
Test2_Print_Yun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a54  08002a54  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08002ac4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002ac4  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008af4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001986  00000000  00000000  00028b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0002a518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d28c  00000000  00000000  0002b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006230  00000000  00000000  000482fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b0d9  00000000  00000000  0004e52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  000e9658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002948 	.word	0x08002948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002948 	.word	0x08002948

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000578:	2b40      	cmp	r3, #64	; 0x40
 800057a:	bf0c      	ite	eq
 800057c:	2301      	moveq	r3, #1
 800057e:	2300      	movne	r3, #0
 8000580:	b2db      	uxtb	r3, r3
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800059a:	78fa      	ldrb	r2, [r7, #3]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <__io_putchar>:
#include "stdarg.h"

#ifdef __GNUC__

int __io_putchar(int ch)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	while(!LL_USART_IsActiveFlag_TC(PRINT_UART_HANDLE));	// 等待发送标志位置位
 80005b4:	bf00      	nop
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <__io_putchar+0x2c>)
 80005b8:	f7ff ffd6 	bl	8000568 <LL_USART_IsActiveFlag_TC>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <__io_putchar+0xa>
	LL_USART_TransmitData8(PRINT_UART_HANDLE, (uint8_t)ch);	// 发送八位数据
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <__io_putchar+0x2c>)
 80005ca:	f7ff ffe0 	bl	800058e <LL_USART_TransmitData8>
	return ch;												// 单字节发送fputc和__io_putchar必须返回的内容
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40011000 	.word	0x40011000

080005dc <_write>:

int _write(int file, char *ptr, int len)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	e009      	b.n	8000602 <_write+0x26>
	{
		__io_putchar(*(ptr + i));
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	4413      	add	r3, r2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffd8 	bl	80005ac <__io_putchar>
	for(int i = 0; i < len; i++)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3301      	adds	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	dbf1      	blt.n	80005ee <_write+0x12>
	}
	return len;
 800060a:	687b      	ldr	r3, [r7, #4]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <DEBUG_PRINT>:

#endif

void DEBUG_PRINT(char* word, char* msg)					// Debug显示，用于自定义显示数据
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	printf("%s:%s\n", word, msg);
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <DEBUG_PRINT+0x1c>)
 8000624:	f001 f9c4 	bl	80019b0 <iprintf>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	08002960 	.word	0x08002960

08000634 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800063e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000640:	4907      	ldr	r1, [pc, #28]	; (8000660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4013      	ands	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800

08000664 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	619a      	str	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000696:	2010      	movs	r0, #16
 8000698:	f7ff ffcc 	bl	8000634 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800069c:	2004      	movs	r0, #4
 800069e:	f7ff ffc9 	bl	8000634 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80006a2:	2080      	movs	r0, #128	; 0x80
 80006a4:	f7ff ffc6 	bl	8000634 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ffc3 	bl	8000634 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, BLUE_LED_Pin|GREEN_LED_Pin);
 80006ae:	2128      	movs	r1, #40	; 0x28
 80006b0:	4815      	ldr	r0, [pc, #84]	; (8000708 <MX_GPIO_Init+0x88>)
 80006b2:	f7ff ffd7 	bl	8000664 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_GPIO_Init+0x8c>)
 80006bc:	f7ff ffd2 	bl	8000664 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin|GREEN_LED_Pin;
 80006c0:	2328      	movs	r3, #40	; 0x28
 80006c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0x88>)
 80006da:	f000 fd07 	bl	80010ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RED_LED_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006e4:	2301      	movs	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0x8c>)
 80006fa:	f000 fcf7 	bl	80010ec <LL_GPIO_Init>

}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000
 800070c:	40020800 	.word	0x40020800

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <LL_RCC_HSI_Enable+0x1c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <LL_RCC_HSI_Enable+0x1c>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_HSI_IsReady+0x20>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	2b02      	cmp	r3, #2
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007b2:	4313      	orrs	r3, r2
 80007b4:	600b      	str	r3, [r1, #0]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_RCC_SetSysClkSource+0x24>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f023 0203 	bic.w	r2, r3, #3
 80007d8:	4904      	ldr	r1, [pc, #16]	; (80007ec <LL_RCC_SetSysClkSource+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	608b      	str	r3, [r1, #8]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40023800 	.word	0x40023800

080007f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_GetSysClkSource+0x18>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 030c 	and.w	r3, r3, #12
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <LL_RCC_SetAHBPrescaler+0x24>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <LL_RCC_SetAHBPrescaler+0x24>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4313      	orrs	r3, r2
 8000822:	608b      	str	r3, [r1, #8]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40023800 	.word	0x40023800

08000834 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_RCC_SetAPB1Prescaler+0x24>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000844:	4904      	ldr	r1, [pc, #16]	; (8000858 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4313      	orrs	r3, r2
 800084a:	608b      	str	r3, [r1, #8]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40023800 	.word	0x40023800

0800085c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800086c:	4904      	ldr	r1, [pc, #16]	; (8000880 <LL_RCC_SetAPB2Prescaler+0x24>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	608b      	str	r3, [r1, #8]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40023800 	.word	0x40023800

08000884 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800088e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800089a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4013      	ands	r3, r2
 80008a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a2:	68fb      	ldr	r3, [r7, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4013      	ands	r3, r2
 80008d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	40023800 	.word	0x40023800

080008e4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <LL_FLASH_SetLatency+0x24>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f023 0207 	bic.w	r2, r3, #7
 80008f4:	4904      	ldr	r1, [pc, #16]	; (8000908 <LL_FLASH_SetLatency+0x24>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	600b      	str	r3, [r1, #0]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	40023c00 	.word	0x40023c00

0800090c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <LL_FLASH_GetLatency+0x18>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0307 	and.w	r3, r3, #7
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023c00 	.word	0x40023c00

08000928 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	600b      	str	r3, [r1, #0]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40007000 	.word	0x40007000

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000954:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000958:	f7ff ffac 	bl	80008b4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800095c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000960:	f7ff ff90 	bl	8000884 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f7ff fed3 	bl	8000710 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096a:	f000 f813 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096e:	f7ff fe87 	bl	8000680 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000972:	f000 fa2d 	bl	8000dd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World!\n");
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <main+0x38>)
 8000978:	f001 f8a0 	bl	8001abc <puts>
  DEBUG_PRINT(WORD_OK, "初始化GPIO和USART成功");
 800097c:	4903      	ldr	r1, [pc, #12]	; (800098c <main+0x3c>)
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <main+0x40>)
 8000980:	f7ff fe48 	bl	8000614 <DEBUG_PRINT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000984:	e7fe      	b.n	8000984 <main+0x34>
 8000986:	bf00      	nop
 8000988:	08002968 	.word	0x08002968
 800098c:	08002978 	.word	0x08002978
 8000990:	08002994 	.word	0x08002994

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ffa3 	bl	80008e4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800099e:	bf00      	nop
 80009a0:	f7ff ffb4 	bl	800090c <LL_FLASH_GetLatency>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1fa      	bne.n	80009a0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80009aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ae:	f7ff ffbb 	bl	8000928 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff fef2 	bl	800079c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80009b8:	f7ff fece 	bl	8000758 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009bc:	bf00      	nop
 80009be:	f7ff fedb 	bl	8000778 <LL_RCC_HSI_IsReady>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d1fa      	bne.n	80009be <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff1f 	bl	800080c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff30 	bl	8000834 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff ff41 	bl	800085c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fef4 	bl	80007c8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80009e0:	bf00      	nop
 80009e2:	f7ff ff05 	bl	80007f0 <LL_RCC_GetSysClkSource>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1fa      	bne.n	80009e2 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <SystemClock_Config+0x68>)
 80009ee:	f000 ff8f 	bl	8001910 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 80009f2:	4802      	ldr	r0, [pc, #8]	; (80009fc <SystemClock_Config+0x68>)
 80009f4:	f000 ff9a 	bl	800192c <LL_SetSystemCoreClock>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	00f42400 	.word	0x00f42400

08000a00 <LL_USART_IsActiveFlag_RXNE>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0320 	and.w	r3, r3, #32
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_USART_ReceiveData8>:
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	b2db      	uxtb	r3, r3
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_USART_TransmitData8>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000a4c:	78fa      	ldrb	r2, [r7, #3]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	605a      	str	r2, [r3, #4]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <BusFault_Handler+0x4>

08000a76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <UsageFault_Handler+0x4>

08000a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(LL_USART_IsActiveFlag_RXNE(USART1))
 8000ab8:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <USART1_IRQHandler+0x24>)
 8000aba:	f7ff ffa1 	bl	8000a00 <LL_USART_IsActiveFlag_RXNE>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d007      	beq.n	8000ad4 <USART1_IRQHandler+0x20>
  {
	  LL_USART_TransmitData8(USART1, LL_USART_ReceiveData8(USART1));
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <USART1_IRQHandler+0x24>)
 8000ac6:	f7ff ffae 	bl	8000a26 <LL_USART_ReceiveData8>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <USART1_IRQHandler+0x24>)
 8000ad0:	f7ff ffb6 	bl	8000a40 <LL_USART_TransmitData8>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40011000 	.word	0x40011000

08000adc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e00a      	b.n	8000b04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aee:	f3af 8000 	nop.w
 8000af2:	4601      	mov	r1, r0
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	60ba      	str	r2, [r7, #8]
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf0      	blt.n	8000aee <_read+0x12>
	}

return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_isatty>:

int _isatty(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	return 1;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3714      	adds	r7, #20
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f000 fecc 	bl	800194c <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20020000 	.word	0x20020000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000084 	.word	0x20000084
 8000be8:	200000a0 	.word	0x200000a0

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <LL_AHB1_GRP1_EnableClock>:
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	40023800 	.word	0x40023800

08000d54 <LL_APB2_GRP1_EnableClock>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	40023800 	.word	0x40023800

08000d84 <LL_USART_Enable>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	60da      	str	r2, [r3, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_USART_ConfigAsyncMode>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	615a      	str	r2, [r3, #20]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000dfa:	2010      	movs	r0, #16
 8000dfc:	f7ff ffaa 	bl	8000d54 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff ff8f 	bl	8000d24 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_USART1_UART_Init+0xb8>)
 8000e26:	f000 f961 	bl	80010ec <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e2a:	f7ff fef1 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff41 	bl	8000cbc <NVIC_EncodePriority>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	2025      	movs	r0, #37	; 0x25
 8000e40:	f7ff ff12 	bl	8000c68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000e44:	2025      	movs	r0, #37	; 0x25
 8000e46:	f7ff fef1 	bl	8000c2c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e4a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e4e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e50:	2300      	movs	r3, #0
 8000e52:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e64:	2300      	movs	r3, #0
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <MX_USART1_UART_Init+0xbc>)
 8000e70:	f000 fcb4 	bl	80017dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART1_UART_Init+0xbc>)
 8000e76:	f7ff ff95 	bl	8000da4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_USART1_UART_Init+0xbc>)
 8000e7c:	f7ff ff82 	bl	8000d84 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40011000 	.word	0x40011000

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eba:	f7ff fe97 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f000 fd4b 	bl	8001958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fd45 	bl	8000950 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ed4:	08002a5c 	.word	0x08002a5c
  ldr r2, =_sbss
 8000ed8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000edc:	200000a0 	.word	0x200000a0

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>

08000ee2 <LL_GPIO_SetPinMode>:
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b089      	sub	sp, #36	; 0x24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	fab3 f383 	clz	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2103      	movs	r1, #3
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	401a      	ands	r2, r3
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	61bb      	str	r3, [r7, #24]
  return result;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	fab3 f383 	clz	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_GPIO_SetPinOutputType>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	401a      	ands	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	fb01 f303 	mul.w	r3, r1, r3
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	605a      	str	r2, [r3, #4]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_GPIO_SetPinSpeed>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	613b      	str	r3, [r7, #16]
  return result;
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	fab3 f383 	clz	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2103      	movs	r1, #3
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	61bb      	str	r3, [r7, #24]
  return result;
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fab3 f383 	clz	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	609a      	str	r2, [r3, #8]
}
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_GPIO_SetPinPull>:
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b089      	sub	sp, #36	; 0x24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	fa93 f3a3 	rbit	r3, r3
 8000fe8:	613b      	str	r3, [r7, #16]
  return result;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa93 f3a3 	rbit	r3, r3
 8001008:	61bb      	str	r3, [r7, #24]
  return result;
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	fab3 f383 	clz	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	431a      	orrs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	60da      	str	r2, [r3, #12]
}
 8001020:	bf00      	nop
 8001022:	3724      	adds	r7, #36	; 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_GPIO_SetAFPin_0_7>:
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	613b      	str	r3, [r7, #16]
  return result;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	fab3 f383 	clz	r3, r3
 800104e:	b2db      	uxtb	r3, r3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	210f      	movs	r1, #15
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	61bb      	str	r3, [r7, #24]
  return result;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fab3 f383 	clz	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	431a      	orrs	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	621a      	str	r2, [r3, #32]
}
 800107e:	bf00      	nop
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_GPIO_SetAFPin_8_15>:
{
 800108a:	b480      	push	{r7}
 800108c:	b089      	sub	sp, #36	; 0x24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	613b      	str	r3, [r7, #16]
  return result;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	210f      	movs	r1, #15
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	61bb      	str	r3, [r7, #24]
  return result;
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010e0:	bf00      	nop
 80010e2:	3724      	adds	r7, #36	; 0x24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	613b      	str	r3, [r7, #16]
  return result;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001116:	e050      	b.n	80011ba <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d042      	beq.n	80011b4 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d003      	beq.n	800113e <LL_GPIO_Init+0x52>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d10d      	bne.n	800115a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	461a      	mov	r2, r3
 8001144:	69b9      	ldr	r1, [r7, #24]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff12 	bl	8000f70 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	461a      	mov	r2, r3
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fef3 	bl	8000f40 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	461a      	mov	r2, r3
 8001160:	69b9      	ldr	r1, [r7, #24]
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff33 	bl	8000fce <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d11a      	bne.n	80011a6 <LL_GPIO_Init+0xba>
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	60bb      	str	r3, [r7, #8]
  return result;
 800117c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b07      	cmp	r3, #7
 8001186:	d807      	bhi.n	8001198 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	461a      	mov	r2, r3
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff4b 	bl	800102c <LL_GPIO_SetAFPin_0_7>
 8001196:	e006      	b.n	80011a6 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	461a      	mov	r2, r3
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff72 	bl	800108a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	461a      	mov	r2, r3
 80011ac:	69b9      	ldr	r1, [r7, #24]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe97 	bl	8000ee2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1a7      	bne.n	8001118 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <LL_RCC_GetSysClkSource>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <LL_RCC_GetSysClkSource+0x18>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 030c 	and.w	r3, r3, #12
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <LL_RCC_GetAHBPrescaler+0x18>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <LL_RCC_GetAPB2Prescaler+0x18>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <LL_RCC_PLL_GetMainSource+0x18>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LL_RCC_PLL_GetN+0x18>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40023800 	.word	0x40023800

0800127c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LL_RCC_PLL_GetP+0x18>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <LL_RCC_PLL_GetDivider+0x18>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80012bc:	f000 f820 	bl	8001300 <RCC_GetSystemClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f840 	bl	8001350 <RCC_GetHCLKClockFreq>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 f84e 	bl	800137c <RCC_GetPCLK1ClockFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f85a 	bl	80013a4 <RCC_GetPCLK2ClockFreq>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60da      	str	r2, [r3, #12]
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800130a:	f7ff ff63 	bl	80011d4 <LL_RCC_GetSysClkSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b08      	cmp	r3, #8
 8001312:	d00c      	beq.n	800132e <RCC_GetSystemClockFreq+0x2e>
 8001314:	2b08      	cmp	r3, #8
 8001316:	d80f      	bhi.n	8001338 <RCC_GetSystemClockFreq+0x38>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <RCC_GetSystemClockFreq+0x22>
 800131c:	2b04      	cmp	r3, #4
 800131e:	d003      	beq.n	8001328 <RCC_GetSystemClockFreq+0x28>
 8001320:	e00a      	b.n	8001338 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <RCC_GetSystemClockFreq+0x48>)
 8001324:	607b      	str	r3, [r7, #4]
      break;
 8001326:	e00a      	b.n	800133e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <RCC_GetSystemClockFreq+0x4c>)
 800132a:	607b      	str	r3, [r7, #4]
      break;
 800132c:	e007      	b.n	800133e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800132e:	2008      	movs	r0, #8
 8001330:	f000 f84c 	bl	80013cc <RCC_PLL_GetFreqDomain_SYS>
 8001334:	6078      	str	r0, [r7, #4]
      break;
 8001336:	e002      	b.n	800133e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <RCC_GetSystemClockFreq+0x48>)
 800133a:	607b      	str	r3, [r7, #4]
      break;
 800133c:	bf00      	nop
  }

  return frequency;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	00f42400 	.word	0x00f42400
 800134c:	017d7840 	.word	0x017d7840

08001350 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001358:	f7ff ff4a 	bl	80011f0 <LL_RCC_GetAHBPrescaler>
 800135c:	4603      	mov	r3, r0
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <RCC_GetHCLKClockFreq+0x28>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	40d3      	lsrs	r3, r2
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0800299c 	.word	0x0800299c

0800137c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001384:	f7ff ff42 	bl	800120c <LL_RCC_GetAPB1Prescaler>
 8001388:	4603      	mov	r3, r0
 800138a:	0a9b      	lsrs	r3, r3, #10
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <RCC_GetPCLK1ClockFreq+0x24>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	40d3      	lsrs	r3, r2
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080029ac 	.word	0x080029ac

080013a4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80013ac:	f7ff ff3c 	bl	8001228 <LL_RCC_GetAPB2Prescaler>
 80013b0:	4603      	mov	r3, r0
 80013b2:	0b5b      	lsrs	r3, r3, #13
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <RCC_GetPCLK2ClockFreq+0x24>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	40d3      	lsrs	r3, r2
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	080029ac 	.word	0x080029ac

080013cc <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80013e0:	f7ff ff30 	bl	8001244 <LL_RCC_PLL_GetMainSource>
 80013e4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d004      	beq.n	80013f6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f2:	d003      	beq.n	80013fc <RCC_PLL_GetFreqDomain_SYS+0x30>
 80013f4:	e005      	b.n	8001402 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80013f8:	617b      	str	r3, [r7, #20]
      break;
 80013fa:	e005      	b.n	8001408 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80013fe:	617b      	str	r3, [r7, #20]
      break;
 8001400:	e002      	b.n	8001408 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001404:	617b      	str	r3, [r7, #20]
      break;
 8001406:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b08      	cmp	r3, #8
 800140c:	d113      	bne.n	8001436 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800140e:	f7ff ff43 	bl	8001298 <LL_RCC_PLL_GetDivider>
 8001412:	4602      	mov	r2, r0
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fbb3 f4f2 	udiv	r4, r3, r2
 800141a:	f7ff ff21 	bl	8001260 <LL_RCC_PLL_GetN>
 800141e:	4603      	mov	r3, r0
 8001420:	fb03 f404 	mul.w	r4, r3, r4
 8001424:	f7ff ff2a 	bl	800127c <LL_RCC_PLL_GetP>
 8001428:	4603      	mov	r3, r0
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	3301      	adds	r3, #1
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fbb4 f3f3 	udiv	r3, r4, r3
 8001434:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001436:	693b      	ldr	r3, [r7, #16]
}
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	00f42400 	.word	0x00f42400
 8001444:	017d7840 	.word	0x017d7840

08001448 <LL_USART_IsEnabled>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145c:	bf0c      	ite	eq
 800145e:	2301      	moveq	r3, #1
 8001460:	2300      	movne	r3, #0
 8001462:	b2db      	uxtb	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_USART_SetStopBitsLength>:
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_USART_SetHWFlowCtrl>:
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	615a      	str	r2, [r3, #20]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_USART_SetBaudRate>:
{
 80014bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c0:	b09f      	sub	sp, #124	; 0x7c
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6778      	str	r0, [r7, #116]	; 0x74
 80014c6:	6739      	str	r1, [r7, #112]	; 0x70
 80014c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80014ca:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80014cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d2:	f040 80bc 	bne.w	800164e <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80014d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014d8:	461c      	mov	r4, r3
 80014da:	f04f 0500 	mov.w	r5, #0
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	eb12 0a02 	adds.w	sl, r2, r2
 80014e6:	eb43 0b03 	adc.w	fp, r3, r3
 80014ea:	4652      	mov	r2, sl
 80014ec:	465b      	mov	r3, fp
 80014ee:	1912      	adds	r2, r2, r4
 80014f0:	eb45 0303 	adc.w	r3, r5, r3
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	f04f 0100 	mov.w	r1, #0
 80014fc:	00d9      	lsls	r1, r3, #3
 80014fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001502:	00d0      	lsls	r0, r2, #3
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	1911      	adds	r1, r2, r4
 800150a:	6639      	str	r1, [r7, #96]	; 0x60
 800150c:	416b      	adcs	r3, r5
 800150e:	667b      	str	r3, [r7, #100]	; 0x64
 8001510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001512:	461a      	mov	r2, r3
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	1891      	adds	r1, r2, r2
 800151a:	6339      	str	r1, [r7, #48]	; 0x30
 800151c:	415b      	adcs	r3, r3
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
 8001520:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001524:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001528:	f7fe fea2 	bl	8000270 <__aeabi_uldivmod>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4ba9      	ldr	r3, [pc, #676]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 8001532:	fba3 2302 	umull	r2, r3, r3, r2
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	b29b      	uxth	r3, r3
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	b29e      	uxth	r6, r3
 800153e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001540:	461c      	mov	r4, r3
 8001542:	f04f 0500 	mov.w	r5, #0
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	1891      	adds	r1, r2, r2
 800154c:	62b9      	str	r1, [r7, #40]	; 0x28
 800154e:	415b      	adcs	r3, r3
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001556:	1912      	adds	r2, r2, r4
 8001558:	eb45 0303 	adc.w	r3, r5, r3
 800155c:	f04f 0000 	mov.w	r0, #0
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	00d9      	lsls	r1, r3, #3
 8001566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800156a:	00d0      	lsls	r0, r2, #3
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	1911      	adds	r1, r2, r4
 8001572:	65b9      	str	r1, [r7, #88]	; 0x58
 8001574:	416b      	adcs	r3, r5
 8001576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800157a:	461a      	mov	r2, r3
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	1891      	adds	r1, r2, r2
 8001582:	6239      	str	r1, [r7, #32]
 8001584:	415b      	adcs	r3, r3
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001590:	f7fe fe6e 	bl	8000270 <__aeabi_uldivmod>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4b8f      	ldr	r3, [pc, #572]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 800159a:	fba3 1302 	umull	r1, r3, r3, r2
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2164      	movs	r1, #100	; 0x64
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	3332      	adds	r3, #50	; 0x32
 80015ac:	4a8a      	ldr	r2, [pc, #552]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015be:	b29b      	uxth	r3, r3
 80015c0:	4433      	add	r3, r6
 80015c2:	b29e      	uxth	r6, r3
 80015c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015c6:	4618      	mov	r0, r3
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	1894      	adds	r4, r2, r2
 80015d2:	61bc      	str	r4, [r7, #24]
 80015d4:	415b      	adcs	r3, r3
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015dc:	1812      	adds	r2, r2, r0
 80015de:	eb41 0303 	adc.w	r3, r1, r3
 80015e2:	f04f 0400 	mov.w	r4, #0
 80015e6:	f04f 0500 	mov.w	r5, #0
 80015ea:	00dd      	lsls	r5, r3, #3
 80015ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80015f0:	00d4      	lsls	r4, r2, #3
 80015f2:	4622      	mov	r2, r4
 80015f4:	462b      	mov	r3, r5
 80015f6:	1814      	adds	r4, r2, r0
 80015f8:	653c      	str	r4, [r7, #80]	; 0x50
 80015fa:	414b      	adcs	r3, r1
 80015fc:	657b      	str	r3, [r7, #84]	; 0x54
 80015fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001600:	461a      	mov	r2, r3
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	1891      	adds	r1, r2, r2
 8001608:	6139      	str	r1, [r7, #16]
 800160a:	415b      	adcs	r3, r3
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001612:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001616:	f7fe fe2b 	bl	8000270 <__aeabi_uldivmod>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4b6e      	ldr	r3, [pc, #440]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 8001620:	fba3 1302 	umull	r1, r3, r3, r2
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	2164      	movs	r1, #100	; 0x64
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	3332      	adds	r3, #50	; 0x32
 8001632:	4a69      	ldr	r2, [pc, #420]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	b29b      	uxth	r3, r3
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	b29b      	uxth	r3, r3
 8001642:	4433      	add	r3, r6
 8001644:	b29b      	uxth	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800164a:	609a      	str	r2, [r3, #8]
}
 800164c:	e0be      	b.n	80017cc <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800164e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001650:	461c      	mov	r4, r3
 8001652:	f04f 0500 	mov.w	r5, #0
 8001656:	4622      	mov	r2, r4
 8001658:	462b      	mov	r3, r5
 800165a:	eb12 0802 	adds.w	r8, r2, r2
 800165e:	eb43 0903 	adc.w	r9, r3, r3
 8001662:	4642      	mov	r2, r8
 8001664:	464b      	mov	r3, r9
 8001666:	1912      	adds	r2, r2, r4
 8001668:	eb45 0303 	adc.w	r3, r5, r3
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	00d9      	lsls	r1, r3, #3
 8001676:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800167a:	00d0      	lsls	r0, r2, #3
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	1911      	adds	r1, r2, r4
 8001682:	64b9      	str	r1, [r7, #72]	; 0x48
 8001684:	416b      	adcs	r3, r5
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800168a:	4618      	mov	r0, r3
 800168c:	f04f 0100 	mov.w	r1, #0
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	008b      	lsls	r3, r1, #2
 800169a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800169e:	0082      	lsls	r2, r0, #2
 80016a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016a4:	f7fe fde4 	bl	8000270 <__aeabi_uldivmod>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 80016ae:	fba3 2302 	umull	r2, r3, r3, r2
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	b29e      	uxth	r6, r3
 80016ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016bc:	4618      	mov	r0, r3
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	1894      	adds	r4, r2, r2
 80016c8:	60bc      	str	r4, [r7, #8]
 80016ca:	415b      	adcs	r3, r3
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016d2:	1812      	adds	r2, r2, r0
 80016d4:	eb41 0303 	adc.w	r3, r1, r3
 80016d8:	f04f 0400 	mov.w	r4, #0
 80016dc:	f04f 0500 	mov.w	r5, #0
 80016e0:	00dd      	lsls	r5, r3, #3
 80016e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80016e6:	00d4      	lsls	r4, r2, #3
 80016e8:	4622      	mov	r2, r4
 80016ea:	462b      	mov	r3, r5
 80016ec:	1814      	adds	r4, r2, r0
 80016ee:	643c      	str	r4, [r7, #64]	; 0x40
 80016f0:	414b      	adcs	r3, r1
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
 80016f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016f6:	4618      	mov	r0, r3
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	008b      	lsls	r3, r1, #2
 8001706:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800170a:	0082      	lsls	r2, r0, #2
 800170c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001710:	f7fe fdae 	bl	8000270 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 800171a:	fba3 1302 	umull	r1, r3, r3, r2
 800171e:	095b      	lsrs	r3, r3, #5
 8001720:	2164      	movs	r1, #100	; 0x64
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	3332      	adds	r3, #50	; 0x32
 800172c:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	b29b      	uxth	r3, r3
 8001736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173a:	b29b      	uxth	r3, r3
 800173c:	4433      	add	r3, r6
 800173e:	b29e      	uxth	r6, r3
 8001740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001742:	4618      	mov	r0, r3
 8001744:	f04f 0100 	mov.w	r1, #0
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	1894      	adds	r4, r2, r2
 800174e:	603c      	str	r4, [r7, #0]
 8001750:	415b      	adcs	r3, r3
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001758:	1812      	adds	r2, r2, r0
 800175a:	eb41 0303 	adc.w	r3, r1, r3
 800175e:	f04f 0400 	mov.w	r4, #0
 8001762:	f04f 0500 	mov.w	r5, #0
 8001766:	00dd      	lsls	r5, r3, #3
 8001768:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800176c:	00d4      	lsls	r4, r2, #3
 800176e:	4622      	mov	r2, r4
 8001770:	462b      	mov	r3, r5
 8001772:	1814      	adds	r4, r2, r0
 8001774:	63bc      	str	r4, [r7, #56]	; 0x38
 8001776:	414b      	adcs	r3, r1
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800177c:	4618      	mov	r0, r3
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	008b      	lsls	r3, r1, #2
 800178c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001790:	0082      	lsls	r2, r0, #2
 8001792:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001796:	f7fe fd6b 	bl	8000270 <__aeabi_uldivmod>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 80017a0:	fba3 1302 	umull	r1, r3, r3, r2
 80017a4:	095b      	lsrs	r3, r3, #5
 80017a6:	2164      	movs	r1, #100	; 0x64
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	3332      	adds	r3, #50	; 0x32
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <LL_USART_SetBaudRate+0x31c>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	095b      	lsrs	r3, r3, #5
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4433      	add	r3, r6
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	377c      	adds	r7, #124	; 0x7c
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d6:	bf00      	nop
 80017d8:	51eb851f 	.word	0x51eb851f

080017dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fe2a 	bl	8001448 <LL_USART_IsEnabled>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d15e      	bne.n	80018b8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001802:	f023 030c 	bic.w	r3, r3, #12
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	6851      	ldr	r1, [r2, #4]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	68d2      	ldr	r2, [r2, #12]
 800180e:	4311      	orrs	r1, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	6912      	ldr	r2, [r2, #16]
 8001814:	4311      	orrs	r1, r2
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	6992      	ldr	r2, [r2, #24]
 800181a:	430a      	orrs	r2, r1
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fe21 	bl	8001470 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fe2e 	bl	8001496 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fd38 	bl	80012b4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <LL_USART_Init+0xe8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d102      	bne.n	8001852 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	e021      	b.n	8001896 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <LL_USART_Init+0xec>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d102      	bne.n	8001860 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	e01a      	b.n	8001896 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <LL_USART_Init+0xf0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d102      	bne.n	800186e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	e013      	b.n	8001896 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <LL_USART_Init+0xf4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d102      	bne.n	800187c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e00c      	b.n	8001896 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <LL_USART_Init+0xf8>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d102      	bne.n	800188a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	e005      	b.n	8001896 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <LL_USART_Init+0xfc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00d      	beq.n	80018b8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d009      	beq.n	80018b8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80018a4:	2300      	movs	r3, #0
 80018a6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69b9      	ldr	r1, [r7, #24]
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fe02 	bl	80014bc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40011000 	.word	0x40011000
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40004800 	.word	0x40004800
 80018d0:	40011400 	.word	0x40011400
 80018d4:	40004c00 	.word	0x40004c00
 80018d8:	40005000 	.word	0x40005000

080018dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4a07      	ldr	r2, [pc, #28]	; (800190c <LL_InitTick+0x30>)
 80018f0:	3b01      	subs	r3, #1
 80018f2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <LL_InitTick+0x30>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <LL_InitTick+0x30>)
 80018fc:	2205      	movs	r2, #5
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e010 	.word	0xe000e010

08001910 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001918:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffdd 	bl	80018dc <LL_InitTick>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <LL_SetSystemCoreClock+0x1c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <__errno>:
 800194c:	4b01      	ldr	r3, [pc, #4]	; (8001954 <__errno+0x8>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000004 	.word	0x20000004

08001958 <__libc_init_array>:
 8001958:	b570      	push	{r4, r5, r6, lr}
 800195a:	4d0d      	ldr	r5, [pc, #52]	; (8001990 <__libc_init_array+0x38>)
 800195c:	4c0d      	ldr	r4, [pc, #52]	; (8001994 <__libc_init_array+0x3c>)
 800195e:	1b64      	subs	r4, r4, r5
 8001960:	10a4      	asrs	r4, r4, #2
 8001962:	2600      	movs	r6, #0
 8001964:	42a6      	cmp	r6, r4
 8001966:	d109      	bne.n	800197c <__libc_init_array+0x24>
 8001968:	4d0b      	ldr	r5, [pc, #44]	; (8001998 <__libc_init_array+0x40>)
 800196a:	4c0c      	ldr	r4, [pc, #48]	; (800199c <__libc_init_array+0x44>)
 800196c:	f000 ffec 	bl	8002948 <_init>
 8001970:	1b64      	subs	r4, r4, r5
 8001972:	10a4      	asrs	r4, r4, #2
 8001974:	2600      	movs	r6, #0
 8001976:	42a6      	cmp	r6, r4
 8001978:	d105      	bne.n	8001986 <__libc_init_array+0x2e>
 800197a:	bd70      	pop	{r4, r5, r6, pc}
 800197c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001980:	4798      	blx	r3
 8001982:	3601      	adds	r6, #1
 8001984:	e7ee      	b.n	8001964 <__libc_init_array+0xc>
 8001986:	f855 3b04 	ldr.w	r3, [r5], #4
 800198a:	4798      	blx	r3
 800198c:	3601      	adds	r6, #1
 800198e:	e7f2      	b.n	8001976 <__libc_init_array+0x1e>
 8001990:	08002a54 	.word	0x08002a54
 8001994:	08002a54 	.word	0x08002a54
 8001998:	08002a54 	.word	0x08002a54
 800199c:	08002a58 	.word	0x08002a58

080019a0 <memset>:
 80019a0:	4402      	add	r2, r0
 80019a2:	4603      	mov	r3, r0
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d100      	bne.n	80019aa <memset+0xa>
 80019a8:	4770      	bx	lr
 80019aa:	f803 1b01 	strb.w	r1, [r3], #1
 80019ae:	e7f9      	b.n	80019a4 <memset+0x4>

080019b0 <iprintf>:
 80019b0:	b40f      	push	{r0, r1, r2, r3}
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <iprintf+0x2c>)
 80019b4:	b513      	push	{r0, r1, r4, lr}
 80019b6:	681c      	ldr	r4, [r3, #0]
 80019b8:	b124      	cbz	r4, 80019c4 <iprintf+0x14>
 80019ba:	69a3      	ldr	r3, [r4, #24]
 80019bc:	b913      	cbnz	r3, 80019c4 <iprintf+0x14>
 80019be:	4620      	mov	r0, r4
 80019c0:	f000 fa5e 	bl	8001e80 <__sinit>
 80019c4:	ab05      	add	r3, sp, #20
 80019c6:	9a04      	ldr	r2, [sp, #16]
 80019c8:	68a1      	ldr	r1, [r4, #8]
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	4620      	mov	r0, r4
 80019ce:	f000 fc2f 	bl	8002230 <_vfiprintf_r>
 80019d2:	b002      	add	sp, #8
 80019d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019d8:	b004      	add	sp, #16
 80019da:	4770      	bx	lr
 80019dc:	20000004 	.word	0x20000004

080019e0 <_puts_r>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	460e      	mov	r6, r1
 80019e4:	4605      	mov	r5, r0
 80019e6:	b118      	cbz	r0, 80019f0 <_puts_r+0x10>
 80019e8:	6983      	ldr	r3, [r0, #24]
 80019ea:	b90b      	cbnz	r3, 80019f0 <_puts_r+0x10>
 80019ec:	f000 fa48 	bl	8001e80 <__sinit>
 80019f0:	69ab      	ldr	r3, [r5, #24]
 80019f2:	68ac      	ldr	r4, [r5, #8]
 80019f4:	b913      	cbnz	r3, 80019fc <_puts_r+0x1c>
 80019f6:	4628      	mov	r0, r5
 80019f8:	f000 fa42 	bl	8001e80 <__sinit>
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <_puts_r+0xd0>)
 80019fe:	429c      	cmp	r4, r3
 8001a00:	d120      	bne.n	8001a44 <_puts_r+0x64>
 8001a02:	686c      	ldr	r4, [r5, #4]
 8001a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a06:	07db      	lsls	r3, r3, #31
 8001a08:	d405      	bmi.n	8001a16 <_puts_r+0x36>
 8001a0a:	89a3      	ldrh	r3, [r4, #12]
 8001a0c:	0598      	lsls	r0, r3, #22
 8001a0e:	d402      	bmi.n	8001a16 <_puts_r+0x36>
 8001a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a12:	f000 fad3 	bl	8001fbc <__retarget_lock_acquire_recursive>
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	0719      	lsls	r1, r3, #28
 8001a1a:	d51d      	bpl.n	8001a58 <_puts_r+0x78>
 8001a1c:	6923      	ldr	r3, [r4, #16]
 8001a1e:	b1db      	cbz	r3, 8001a58 <_puts_r+0x78>
 8001a20:	3e01      	subs	r6, #1
 8001a22:	68a3      	ldr	r3, [r4, #8]
 8001a24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60a3      	str	r3, [r4, #8]
 8001a2c:	bb39      	cbnz	r1, 8001a7e <_puts_r+0x9e>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da38      	bge.n	8001aa4 <_puts_r+0xc4>
 8001a32:	4622      	mov	r2, r4
 8001a34:	210a      	movs	r1, #10
 8001a36:	4628      	mov	r0, r5
 8001a38:	f000 f848 	bl	8001acc <__swbuf_r>
 8001a3c:	3001      	adds	r0, #1
 8001a3e:	d011      	beq.n	8001a64 <_puts_r+0x84>
 8001a40:	250a      	movs	r5, #10
 8001a42:	e011      	b.n	8001a68 <_puts_r+0x88>
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <_puts_r+0xd4>)
 8001a46:	429c      	cmp	r4, r3
 8001a48:	d101      	bne.n	8001a4e <_puts_r+0x6e>
 8001a4a:	68ac      	ldr	r4, [r5, #8]
 8001a4c:	e7da      	b.n	8001a04 <_puts_r+0x24>
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <_puts_r+0xd8>)
 8001a50:	429c      	cmp	r4, r3
 8001a52:	bf08      	it	eq
 8001a54:	68ec      	ldreq	r4, [r5, #12]
 8001a56:	e7d5      	b.n	8001a04 <_puts_r+0x24>
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 f888 	bl	8001b70 <__swsetup_r>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d0dd      	beq.n	8001a20 <_puts_r+0x40>
 8001a64:	f04f 35ff 	mov.w	r5, #4294967295
 8001a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a6a:	07da      	lsls	r2, r3, #31
 8001a6c:	d405      	bmi.n	8001a7a <_puts_r+0x9a>
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	059b      	lsls	r3, r3, #22
 8001a72:	d402      	bmi.n	8001a7a <_puts_r+0x9a>
 8001a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a76:	f000 faa2 	bl	8001fbe <__retarget_lock_release_recursive>
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da04      	bge.n	8001a8c <_puts_r+0xac>
 8001a82:	69a2      	ldr	r2, [r4, #24]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dc06      	bgt.n	8001a96 <_puts_r+0xb6>
 8001a88:	290a      	cmp	r1, #10
 8001a8a:	d004      	beq.n	8001a96 <_puts_r+0xb6>
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	6022      	str	r2, [r4, #0]
 8001a92:	7019      	strb	r1, [r3, #0]
 8001a94:	e7c5      	b.n	8001a22 <_puts_r+0x42>
 8001a96:	4622      	mov	r2, r4
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f817 	bl	8001acc <__swbuf_r>
 8001a9e:	3001      	adds	r0, #1
 8001aa0:	d1bf      	bne.n	8001a22 <_puts_r+0x42>
 8001aa2:	e7df      	b.n	8001a64 <_puts_r+0x84>
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	250a      	movs	r5, #10
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	6022      	str	r2, [r4, #0]
 8001aac:	701d      	strb	r5, [r3, #0]
 8001aae:	e7db      	b.n	8001a68 <_puts_r+0x88>
 8001ab0:	080029d8 	.word	0x080029d8
 8001ab4:	080029f8 	.word	0x080029f8
 8001ab8:	080029b8 	.word	0x080029b8

08001abc <puts>:
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <puts+0xc>)
 8001abe:	4601      	mov	r1, r0
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	f7ff bf8d 	b.w	80019e0 <_puts_r>
 8001ac6:	bf00      	nop
 8001ac8:	20000004 	.word	0x20000004

08001acc <__swbuf_r>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	460e      	mov	r6, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	4605      	mov	r5, r0
 8001ad4:	b118      	cbz	r0, 8001ade <__swbuf_r+0x12>
 8001ad6:	6983      	ldr	r3, [r0, #24]
 8001ad8:	b90b      	cbnz	r3, 8001ade <__swbuf_r+0x12>
 8001ada:	f000 f9d1 	bl	8001e80 <__sinit>
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <__swbuf_r+0x98>)
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	d12b      	bne.n	8001b3c <__swbuf_r+0x70>
 8001ae4:	686c      	ldr	r4, [r5, #4]
 8001ae6:	69a3      	ldr	r3, [r4, #24]
 8001ae8:	60a3      	str	r3, [r4, #8]
 8001aea:	89a3      	ldrh	r3, [r4, #12]
 8001aec:	071a      	lsls	r2, r3, #28
 8001aee:	d52f      	bpl.n	8001b50 <__swbuf_r+0x84>
 8001af0:	6923      	ldr	r3, [r4, #16]
 8001af2:	b36b      	cbz	r3, 8001b50 <__swbuf_r+0x84>
 8001af4:	6923      	ldr	r3, [r4, #16]
 8001af6:	6820      	ldr	r0, [r4, #0]
 8001af8:	1ac0      	subs	r0, r0, r3
 8001afa:	6963      	ldr	r3, [r4, #20]
 8001afc:	b2f6      	uxtb	r6, r6
 8001afe:	4283      	cmp	r3, r0
 8001b00:	4637      	mov	r7, r6
 8001b02:	dc04      	bgt.n	8001b0e <__swbuf_r+0x42>
 8001b04:	4621      	mov	r1, r4
 8001b06:	4628      	mov	r0, r5
 8001b08:	f000 f926 	bl	8001d58 <_fflush_r>
 8001b0c:	bb30      	cbnz	r0, 8001b5c <__swbuf_r+0x90>
 8001b0e:	68a3      	ldr	r3, [r4, #8]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	60a3      	str	r3, [r4, #8]
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	6022      	str	r2, [r4, #0]
 8001b1a:	701e      	strb	r6, [r3, #0]
 8001b1c:	6963      	ldr	r3, [r4, #20]
 8001b1e:	3001      	adds	r0, #1
 8001b20:	4283      	cmp	r3, r0
 8001b22:	d004      	beq.n	8001b2e <__swbuf_r+0x62>
 8001b24:	89a3      	ldrh	r3, [r4, #12]
 8001b26:	07db      	lsls	r3, r3, #31
 8001b28:	d506      	bpl.n	8001b38 <__swbuf_r+0x6c>
 8001b2a:	2e0a      	cmp	r6, #10
 8001b2c:	d104      	bne.n	8001b38 <__swbuf_r+0x6c>
 8001b2e:	4621      	mov	r1, r4
 8001b30:	4628      	mov	r0, r5
 8001b32:	f000 f911 	bl	8001d58 <_fflush_r>
 8001b36:	b988      	cbnz	r0, 8001b5c <__swbuf_r+0x90>
 8001b38:	4638      	mov	r0, r7
 8001b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <__swbuf_r+0x9c>)
 8001b3e:	429c      	cmp	r4, r3
 8001b40:	d101      	bne.n	8001b46 <__swbuf_r+0x7a>
 8001b42:	68ac      	ldr	r4, [r5, #8]
 8001b44:	e7cf      	b.n	8001ae6 <__swbuf_r+0x1a>
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <__swbuf_r+0xa0>)
 8001b48:	429c      	cmp	r4, r3
 8001b4a:	bf08      	it	eq
 8001b4c:	68ec      	ldreq	r4, [r5, #12]
 8001b4e:	e7ca      	b.n	8001ae6 <__swbuf_r+0x1a>
 8001b50:	4621      	mov	r1, r4
 8001b52:	4628      	mov	r0, r5
 8001b54:	f000 f80c 	bl	8001b70 <__swsetup_r>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d0cb      	beq.n	8001af4 <__swbuf_r+0x28>
 8001b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8001b60:	e7ea      	b.n	8001b38 <__swbuf_r+0x6c>
 8001b62:	bf00      	nop
 8001b64:	080029d8 	.word	0x080029d8
 8001b68:	080029f8 	.word	0x080029f8
 8001b6c:	080029b8 	.word	0x080029b8

08001b70 <__swsetup_r>:
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <__swsetup_r+0xcc>)
 8001b72:	b570      	push	{r4, r5, r6, lr}
 8001b74:	681d      	ldr	r5, [r3, #0]
 8001b76:	4606      	mov	r6, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	b125      	cbz	r5, 8001b86 <__swsetup_r+0x16>
 8001b7c:	69ab      	ldr	r3, [r5, #24]
 8001b7e:	b913      	cbnz	r3, 8001b86 <__swsetup_r+0x16>
 8001b80:	4628      	mov	r0, r5
 8001b82:	f000 f97d 	bl	8001e80 <__sinit>
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <__swsetup_r+0xd0>)
 8001b88:	429c      	cmp	r4, r3
 8001b8a:	d10f      	bne.n	8001bac <__swsetup_r+0x3c>
 8001b8c:	686c      	ldr	r4, [r5, #4]
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b94:	0719      	lsls	r1, r3, #28
 8001b96:	d42c      	bmi.n	8001bf2 <__swsetup_r+0x82>
 8001b98:	06dd      	lsls	r5, r3, #27
 8001b9a:	d411      	bmi.n	8001bc0 <__swsetup_r+0x50>
 8001b9c:	2309      	movs	r3, #9
 8001b9e:	6033      	str	r3, [r6, #0]
 8001ba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001ba4:	81a3      	strh	r3, [r4, #12]
 8001ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8001baa:	e03e      	b.n	8001c2a <__swsetup_r+0xba>
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <__swsetup_r+0xd4>)
 8001bae:	429c      	cmp	r4, r3
 8001bb0:	d101      	bne.n	8001bb6 <__swsetup_r+0x46>
 8001bb2:	68ac      	ldr	r4, [r5, #8]
 8001bb4:	e7eb      	b.n	8001b8e <__swsetup_r+0x1e>
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <__swsetup_r+0xd8>)
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	bf08      	it	eq
 8001bbc:	68ec      	ldreq	r4, [r5, #12]
 8001bbe:	e7e6      	b.n	8001b8e <__swsetup_r+0x1e>
 8001bc0:	0758      	lsls	r0, r3, #29
 8001bc2:	d512      	bpl.n	8001bea <__swsetup_r+0x7a>
 8001bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bc6:	b141      	cbz	r1, 8001bda <__swsetup_r+0x6a>
 8001bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bcc:	4299      	cmp	r1, r3
 8001bce:	d002      	beq.n	8001bd6 <__swsetup_r+0x66>
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f000 fa59 	bl	8002088 <_free_r>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8001bda:	89a3      	ldrh	r3, [r4, #12]
 8001bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001be0:	81a3      	strh	r3, [r4, #12]
 8001be2:	2300      	movs	r3, #0
 8001be4:	6063      	str	r3, [r4, #4]
 8001be6:	6923      	ldr	r3, [r4, #16]
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	81a3      	strh	r3, [r4, #12]
 8001bf2:	6923      	ldr	r3, [r4, #16]
 8001bf4:	b94b      	cbnz	r3, 8001c0a <__swsetup_r+0x9a>
 8001bf6:	89a3      	ldrh	r3, [r4, #12]
 8001bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c00:	d003      	beq.n	8001c0a <__swsetup_r+0x9a>
 8001c02:	4621      	mov	r1, r4
 8001c04:	4630      	mov	r0, r6
 8001c06:	f000 f9ff 	bl	8002008 <__smakebuf_r>
 8001c0a:	89a0      	ldrh	r0, [r4, #12]
 8001c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c10:	f010 0301 	ands.w	r3, r0, #1
 8001c14:	d00a      	beq.n	8001c2c <__swsetup_r+0xbc>
 8001c16:	2300      	movs	r3, #0
 8001c18:	60a3      	str	r3, [r4, #8]
 8001c1a:	6963      	ldr	r3, [r4, #20]
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	61a3      	str	r3, [r4, #24]
 8001c20:	6923      	ldr	r3, [r4, #16]
 8001c22:	b943      	cbnz	r3, 8001c36 <__swsetup_r+0xc6>
 8001c24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c28:	d1ba      	bne.n	8001ba0 <__swsetup_r+0x30>
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
 8001c2c:	0781      	lsls	r1, r0, #30
 8001c2e:	bf58      	it	pl
 8001c30:	6963      	ldrpl	r3, [r4, #20]
 8001c32:	60a3      	str	r3, [r4, #8]
 8001c34:	e7f4      	b.n	8001c20 <__swsetup_r+0xb0>
 8001c36:	2000      	movs	r0, #0
 8001c38:	e7f7      	b.n	8001c2a <__swsetup_r+0xba>
 8001c3a:	bf00      	nop
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	080029d8 	.word	0x080029d8
 8001c44:	080029f8 	.word	0x080029f8
 8001c48:	080029b8 	.word	0x080029b8

08001c4c <__sflush_r>:
 8001c4c:	898a      	ldrh	r2, [r1, #12]
 8001c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c52:	4605      	mov	r5, r0
 8001c54:	0710      	lsls	r0, r2, #28
 8001c56:	460c      	mov	r4, r1
 8001c58:	d458      	bmi.n	8001d0c <__sflush_r+0xc0>
 8001c5a:	684b      	ldr	r3, [r1, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dc05      	bgt.n	8001c6c <__sflush_r+0x20>
 8001c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	dc02      	bgt.n	8001c6c <__sflush_r+0x20>
 8001c66:	2000      	movs	r0, #0
 8001c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c6e:	2e00      	cmp	r6, #0
 8001c70:	d0f9      	beq.n	8001c66 <__sflush_r+0x1a>
 8001c72:	2300      	movs	r3, #0
 8001c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c78:	682f      	ldr	r7, [r5, #0]
 8001c7a:	602b      	str	r3, [r5, #0]
 8001c7c:	d032      	beq.n	8001ce4 <__sflush_r+0x98>
 8001c7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	075a      	lsls	r2, r3, #29
 8001c84:	d505      	bpl.n	8001c92 <__sflush_r+0x46>
 8001c86:	6863      	ldr	r3, [r4, #4]
 8001c88:	1ac0      	subs	r0, r0, r3
 8001c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c8c:	b10b      	cbz	r3, 8001c92 <__sflush_r+0x46>
 8001c8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c90:	1ac0      	subs	r0, r0, r3
 8001c92:	2300      	movs	r3, #0
 8001c94:	4602      	mov	r2, r0
 8001c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c98:	6a21      	ldr	r1, [r4, #32]
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	47b0      	blx	r6
 8001c9e:	1c43      	adds	r3, r0, #1
 8001ca0:	89a3      	ldrh	r3, [r4, #12]
 8001ca2:	d106      	bne.n	8001cb2 <__sflush_r+0x66>
 8001ca4:	6829      	ldr	r1, [r5, #0]
 8001ca6:	291d      	cmp	r1, #29
 8001ca8:	d82c      	bhi.n	8001d04 <__sflush_r+0xb8>
 8001caa:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <__sflush_r+0x108>)
 8001cac:	40ca      	lsrs	r2, r1
 8001cae:	07d6      	lsls	r6, r2, #31
 8001cb0:	d528      	bpl.n	8001d04 <__sflush_r+0xb8>
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	6062      	str	r2, [r4, #4]
 8001cb6:	04d9      	lsls	r1, r3, #19
 8001cb8:	6922      	ldr	r2, [r4, #16]
 8001cba:	6022      	str	r2, [r4, #0]
 8001cbc:	d504      	bpl.n	8001cc8 <__sflush_r+0x7c>
 8001cbe:	1c42      	adds	r2, r0, #1
 8001cc0:	d101      	bne.n	8001cc6 <__sflush_r+0x7a>
 8001cc2:	682b      	ldr	r3, [r5, #0]
 8001cc4:	b903      	cbnz	r3, 8001cc8 <__sflush_r+0x7c>
 8001cc6:	6560      	str	r0, [r4, #84]	; 0x54
 8001cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cca:	602f      	str	r7, [r5, #0]
 8001ccc:	2900      	cmp	r1, #0
 8001cce:	d0ca      	beq.n	8001c66 <__sflush_r+0x1a>
 8001cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d002      	beq.n	8001cde <__sflush_r+0x92>
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f000 f9d5 	bl	8002088 <_free_r>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8001ce2:	e7c1      	b.n	8001c68 <__sflush_r+0x1c>
 8001ce4:	6a21      	ldr	r1, [r4, #32]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4628      	mov	r0, r5
 8001cea:	47b0      	blx	r6
 8001cec:	1c41      	adds	r1, r0, #1
 8001cee:	d1c7      	bne.n	8001c80 <__sflush_r+0x34>
 8001cf0:	682b      	ldr	r3, [r5, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0c4      	beq.n	8001c80 <__sflush_r+0x34>
 8001cf6:	2b1d      	cmp	r3, #29
 8001cf8:	d001      	beq.n	8001cfe <__sflush_r+0xb2>
 8001cfa:	2b16      	cmp	r3, #22
 8001cfc:	d101      	bne.n	8001d02 <__sflush_r+0xb6>
 8001cfe:	602f      	str	r7, [r5, #0]
 8001d00:	e7b1      	b.n	8001c66 <__sflush_r+0x1a>
 8001d02:	89a3      	ldrh	r3, [r4, #12]
 8001d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d08:	81a3      	strh	r3, [r4, #12]
 8001d0a:	e7ad      	b.n	8001c68 <__sflush_r+0x1c>
 8001d0c:	690f      	ldr	r7, [r1, #16]
 8001d0e:	2f00      	cmp	r7, #0
 8001d10:	d0a9      	beq.n	8001c66 <__sflush_r+0x1a>
 8001d12:	0793      	lsls	r3, r2, #30
 8001d14:	680e      	ldr	r6, [r1, #0]
 8001d16:	bf08      	it	eq
 8001d18:	694b      	ldreq	r3, [r1, #20]
 8001d1a:	600f      	str	r7, [r1, #0]
 8001d1c:	bf18      	it	ne
 8001d1e:	2300      	movne	r3, #0
 8001d20:	eba6 0807 	sub.w	r8, r6, r7
 8001d24:	608b      	str	r3, [r1, #8]
 8001d26:	f1b8 0f00 	cmp.w	r8, #0
 8001d2a:	dd9c      	ble.n	8001c66 <__sflush_r+0x1a>
 8001d2c:	6a21      	ldr	r1, [r4, #32]
 8001d2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d30:	4643      	mov	r3, r8
 8001d32:	463a      	mov	r2, r7
 8001d34:	4628      	mov	r0, r5
 8001d36:	47b0      	blx	r6
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	dc06      	bgt.n	8001d4a <__sflush_r+0xfe>
 8001d3c:	89a3      	ldrh	r3, [r4, #12]
 8001d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d42:	81a3      	strh	r3, [r4, #12]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	e78e      	b.n	8001c68 <__sflush_r+0x1c>
 8001d4a:	4407      	add	r7, r0
 8001d4c:	eba8 0800 	sub.w	r8, r8, r0
 8001d50:	e7e9      	b.n	8001d26 <__sflush_r+0xda>
 8001d52:	bf00      	nop
 8001d54:	20400001 	.word	0x20400001

08001d58 <_fflush_r>:
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	690b      	ldr	r3, [r1, #16]
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	460c      	mov	r4, r1
 8001d60:	b913      	cbnz	r3, 8001d68 <_fflush_r+0x10>
 8001d62:	2500      	movs	r5, #0
 8001d64:	4628      	mov	r0, r5
 8001d66:	bd38      	pop	{r3, r4, r5, pc}
 8001d68:	b118      	cbz	r0, 8001d72 <_fflush_r+0x1a>
 8001d6a:	6983      	ldr	r3, [r0, #24]
 8001d6c:	b90b      	cbnz	r3, 8001d72 <_fflush_r+0x1a>
 8001d6e:	f000 f887 	bl	8001e80 <__sinit>
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <_fflush_r+0x6c>)
 8001d74:	429c      	cmp	r4, r3
 8001d76:	d11b      	bne.n	8001db0 <_fflush_r+0x58>
 8001d78:	686c      	ldr	r4, [r5, #4]
 8001d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ef      	beq.n	8001d62 <_fflush_r+0xa>
 8001d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d84:	07d0      	lsls	r0, r2, #31
 8001d86:	d404      	bmi.n	8001d92 <_fflush_r+0x3a>
 8001d88:	0599      	lsls	r1, r3, #22
 8001d8a:	d402      	bmi.n	8001d92 <_fflush_r+0x3a>
 8001d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d8e:	f000 f915 	bl	8001fbc <__retarget_lock_acquire_recursive>
 8001d92:	4628      	mov	r0, r5
 8001d94:	4621      	mov	r1, r4
 8001d96:	f7ff ff59 	bl	8001c4c <__sflush_r>
 8001d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d9c:	07da      	lsls	r2, r3, #31
 8001d9e:	4605      	mov	r5, r0
 8001da0:	d4e0      	bmi.n	8001d64 <_fflush_r+0xc>
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	059b      	lsls	r3, r3, #22
 8001da6:	d4dd      	bmi.n	8001d64 <_fflush_r+0xc>
 8001da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001daa:	f000 f908 	bl	8001fbe <__retarget_lock_release_recursive>
 8001dae:	e7d9      	b.n	8001d64 <_fflush_r+0xc>
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <_fflush_r+0x70>)
 8001db2:	429c      	cmp	r4, r3
 8001db4:	d101      	bne.n	8001dba <_fflush_r+0x62>
 8001db6:	68ac      	ldr	r4, [r5, #8]
 8001db8:	e7df      	b.n	8001d7a <_fflush_r+0x22>
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <_fflush_r+0x74>)
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	bf08      	it	eq
 8001dc0:	68ec      	ldreq	r4, [r5, #12]
 8001dc2:	e7da      	b.n	8001d7a <_fflush_r+0x22>
 8001dc4:	080029d8 	.word	0x080029d8
 8001dc8:	080029f8 	.word	0x080029f8
 8001dcc:	080029b8 	.word	0x080029b8

08001dd0 <std>:
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	b510      	push	{r4, lr}
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	e9c0 3300 	strd	r3, r3, [r0]
 8001dda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dde:	6083      	str	r3, [r0, #8]
 8001de0:	8181      	strh	r1, [r0, #12]
 8001de2:	6643      	str	r3, [r0, #100]	; 0x64
 8001de4:	81c2      	strh	r2, [r0, #14]
 8001de6:	6183      	str	r3, [r0, #24]
 8001de8:	4619      	mov	r1, r3
 8001dea:	2208      	movs	r2, #8
 8001dec:	305c      	adds	r0, #92	; 0x5c
 8001dee:	f7ff fdd7 	bl	80019a0 <memset>
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <std+0x38>)
 8001df4:	6263      	str	r3, [r4, #36]	; 0x24
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <std+0x3c>)
 8001df8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <std+0x40>)
 8001dfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <std+0x44>)
 8001e00:	6224      	str	r4, [r4, #32]
 8001e02:	6323      	str	r3, [r4, #48]	; 0x30
 8001e04:	bd10      	pop	{r4, pc}
 8001e06:	bf00      	nop
 8001e08:	080027d9 	.word	0x080027d9
 8001e0c:	080027fb 	.word	0x080027fb
 8001e10:	08002833 	.word	0x08002833
 8001e14:	08002857 	.word	0x08002857

08001e18 <_cleanup_r>:
 8001e18:	4901      	ldr	r1, [pc, #4]	; (8001e20 <_cleanup_r+0x8>)
 8001e1a:	f000 b8af 	b.w	8001f7c <_fwalk_reent>
 8001e1e:	bf00      	nop
 8001e20:	08001d59 	.word	0x08001d59

08001e24 <__sfmoreglue>:
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	1e4a      	subs	r2, r1, #1
 8001e28:	2568      	movs	r5, #104	; 0x68
 8001e2a:	4355      	muls	r5, r2
 8001e2c:	460e      	mov	r6, r1
 8001e2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e32:	f000 f979 	bl	8002128 <_malloc_r>
 8001e36:	4604      	mov	r4, r0
 8001e38:	b140      	cbz	r0, 8001e4c <__sfmoreglue+0x28>
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	e9c0 1600 	strd	r1, r6, [r0]
 8001e40:	300c      	adds	r0, #12
 8001e42:	60a0      	str	r0, [r4, #8]
 8001e44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e48:	f7ff fdaa 	bl	80019a0 <memset>
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}

08001e50 <__sfp_lock_acquire>:
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <__sfp_lock_acquire+0x8>)
 8001e52:	f000 b8b3 	b.w	8001fbc <__retarget_lock_acquire_recursive>
 8001e56:	bf00      	nop
 8001e58:	20000098 	.word	0x20000098

08001e5c <__sfp_lock_release>:
 8001e5c:	4801      	ldr	r0, [pc, #4]	; (8001e64 <__sfp_lock_release+0x8>)
 8001e5e:	f000 b8ae 	b.w	8001fbe <__retarget_lock_release_recursive>
 8001e62:	bf00      	nop
 8001e64:	20000098 	.word	0x20000098

08001e68 <__sinit_lock_acquire>:
 8001e68:	4801      	ldr	r0, [pc, #4]	; (8001e70 <__sinit_lock_acquire+0x8>)
 8001e6a:	f000 b8a7 	b.w	8001fbc <__retarget_lock_acquire_recursive>
 8001e6e:	bf00      	nop
 8001e70:	20000093 	.word	0x20000093

08001e74 <__sinit_lock_release>:
 8001e74:	4801      	ldr	r0, [pc, #4]	; (8001e7c <__sinit_lock_release+0x8>)
 8001e76:	f000 b8a2 	b.w	8001fbe <__retarget_lock_release_recursive>
 8001e7a:	bf00      	nop
 8001e7c:	20000093 	.word	0x20000093

08001e80 <__sinit>:
 8001e80:	b510      	push	{r4, lr}
 8001e82:	4604      	mov	r4, r0
 8001e84:	f7ff fff0 	bl	8001e68 <__sinit_lock_acquire>
 8001e88:	69a3      	ldr	r3, [r4, #24]
 8001e8a:	b11b      	cbz	r3, 8001e94 <__sinit+0x14>
 8001e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e90:	f7ff bff0 	b.w	8001e74 <__sinit_lock_release>
 8001e94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e98:	6523      	str	r3, [r4, #80]	; 0x50
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <__sinit+0x68>)
 8001e9c:	4a13      	ldr	r2, [pc, #76]	; (8001eec <__sinit+0x6c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	bf04      	itt	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	61a3      	streq	r3, [r4, #24]
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f000 f820 	bl	8001ef0 <__sfp>
 8001eb0:	6060      	str	r0, [r4, #4]
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f000 f81c 	bl	8001ef0 <__sfp>
 8001eb8:	60a0      	str	r0, [r4, #8]
 8001eba:	4620      	mov	r0, r4
 8001ebc:	f000 f818 	bl	8001ef0 <__sfp>
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60e0      	str	r0, [r4, #12]
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	6860      	ldr	r0, [r4, #4]
 8001ec8:	f7ff ff82 	bl	8001dd0 <std>
 8001ecc:	68a0      	ldr	r0, [r4, #8]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2109      	movs	r1, #9
 8001ed2:	f7ff ff7d 	bl	8001dd0 <std>
 8001ed6:	68e0      	ldr	r0, [r4, #12]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	2112      	movs	r1, #18
 8001edc:	f7ff ff78 	bl	8001dd0 <std>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61a3      	str	r3, [r4, #24]
 8001ee4:	e7d2      	b.n	8001e8c <__sinit+0xc>
 8001ee6:	bf00      	nop
 8001ee8:	080029b4 	.word	0x080029b4
 8001eec:	08001e19 	.word	0x08001e19

08001ef0 <__sfp>:
 8001ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef2:	4607      	mov	r7, r0
 8001ef4:	f7ff ffac 	bl	8001e50 <__sfp_lock_acquire>
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <__sfp+0x84>)
 8001efa:	681e      	ldr	r6, [r3, #0]
 8001efc:	69b3      	ldr	r3, [r6, #24]
 8001efe:	b913      	cbnz	r3, 8001f06 <__sfp+0x16>
 8001f00:	4630      	mov	r0, r6
 8001f02:	f7ff ffbd 	bl	8001e80 <__sinit>
 8001f06:	3648      	adds	r6, #72	; 0x48
 8001f08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	d503      	bpl.n	8001f18 <__sfp+0x28>
 8001f10:	6833      	ldr	r3, [r6, #0]
 8001f12:	b30b      	cbz	r3, 8001f58 <__sfp+0x68>
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	e7f7      	b.n	8001f08 <__sfp+0x18>
 8001f18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f1c:	b9d5      	cbnz	r5, 8001f54 <__sfp+0x64>
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <__sfp+0x88>)
 8001f20:	60e3      	str	r3, [r4, #12]
 8001f22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f26:	6665      	str	r5, [r4, #100]	; 0x64
 8001f28:	f000 f847 	bl	8001fba <__retarget_lock_init_recursive>
 8001f2c:	f7ff ff96 	bl	8001e5c <__sfp_lock_release>
 8001f30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f38:	6025      	str	r5, [r4, #0]
 8001f3a:	61a5      	str	r5, [r4, #24]
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f44:	f7ff fd2c 	bl	80019a0 <memset>
 8001f48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f50:	4620      	mov	r0, r4
 8001f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f54:	3468      	adds	r4, #104	; 0x68
 8001f56:	e7d9      	b.n	8001f0c <__sfp+0x1c>
 8001f58:	2104      	movs	r1, #4
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	f7ff ff62 	bl	8001e24 <__sfmoreglue>
 8001f60:	4604      	mov	r4, r0
 8001f62:	6030      	str	r0, [r6, #0]
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d1d5      	bne.n	8001f14 <__sfp+0x24>
 8001f68:	f7ff ff78 	bl	8001e5c <__sfp_lock_release>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	e7ee      	b.n	8001f50 <__sfp+0x60>
 8001f72:	bf00      	nop
 8001f74:	080029b4 	.word	0x080029b4
 8001f78:	ffff0001 	.word	0xffff0001

08001f7c <_fwalk_reent>:
 8001f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f80:	4606      	mov	r6, r0
 8001f82:	4688      	mov	r8, r1
 8001f84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f88:	2700      	movs	r7, #0
 8001f8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f8e:	f1b9 0901 	subs.w	r9, r9, #1
 8001f92:	d505      	bpl.n	8001fa0 <_fwalk_reent+0x24>
 8001f94:	6824      	ldr	r4, [r4, #0]
 8001f96:	2c00      	cmp	r4, #0
 8001f98:	d1f7      	bne.n	8001f8a <_fwalk_reent+0xe>
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fa0:	89ab      	ldrh	r3, [r5, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d907      	bls.n	8001fb6 <_fwalk_reent+0x3a>
 8001fa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001faa:	3301      	adds	r3, #1
 8001fac:	d003      	beq.n	8001fb6 <_fwalk_reent+0x3a>
 8001fae:	4629      	mov	r1, r5
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	47c0      	blx	r8
 8001fb4:	4307      	orrs	r7, r0
 8001fb6:	3568      	adds	r5, #104	; 0x68
 8001fb8:	e7e9      	b.n	8001f8e <_fwalk_reent+0x12>

08001fba <__retarget_lock_init_recursive>:
 8001fba:	4770      	bx	lr

08001fbc <__retarget_lock_acquire_recursive>:
 8001fbc:	4770      	bx	lr

08001fbe <__retarget_lock_release_recursive>:
 8001fbe:	4770      	bx	lr

08001fc0 <__swhatbuf_r>:
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	460e      	mov	r6, r1
 8001fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc8:	2900      	cmp	r1, #0
 8001fca:	b096      	sub	sp, #88	; 0x58
 8001fcc:	4614      	mov	r4, r2
 8001fce:	461d      	mov	r5, r3
 8001fd0:	da07      	bge.n	8001fe2 <__swhatbuf_r+0x22>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	602b      	str	r3, [r5, #0]
 8001fd6:	89b3      	ldrh	r3, [r6, #12]
 8001fd8:	061a      	lsls	r2, r3, #24
 8001fda:	d410      	bmi.n	8001ffe <__swhatbuf_r+0x3e>
 8001fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe0:	e00e      	b.n	8002000 <__swhatbuf_r+0x40>
 8001fe2:	466a      	mov	r2, sp
 8001fe4:	f000 fc5e 	bl	80028a4 <_fstat_r>
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	dbf2      	blt.n	8001fd2 <__swhatbuf_r+0x12>
 8001fec:	9a01      	ldr	r2, [sp, #4]
 8001fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ff2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ff6:	425a      	negs	r2, r3
 8001ff8:	415a      	adcs	r2, r3
 8001ffa:	602a      	str	r2, [r5, #0]
 8001ffc:	e7ee      	b.n	8001fdc <__swhatbuf_r+0x1c>
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	2000      	movs	r0, #0
 8002002:	6023      	str	r3, [r4, #0]
 8002004:	b016      	add	sp, #88	; 0x58
 8002006:	bd70      	pop	{r4, r5, r6, pc}

08002008 <__smakebuf_r>:
 8002008:	898b      	ldrh	r3, [r1, #12]
 800200a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800200c:	079d      	lsls	r5, r3, #30
 800200e:	4606      	mov	r6, r0
 8002010:	460c      	mov	r4, r1
 8002012:	d507      	bpl.n	8002024 <__smakebuf_r+0x1c>
 8002014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002018:	6023      	str	r3, [r4, #0]
 800201a:	6123      	str	r3, [r4, #16]
 800201c:	2301      	movs	r3, #1
 800201e:	6163      	str	r3, [r4, #20]
 8002020:	b002      	add	sp, #8
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	ab01      	add	r3, sp, #4
 8002026:	466a      	mov	r2, sp
 8002028:	f7ff ffca 	bl	8001fc0 <__swhatbuf_r>
 800202c:	9900      	ldr	r1, [sp, #0]
 800202e:	4605      	mov	r5, r0
 8002030:	4630      	mov	r0, r6
 8002032:	f000 f879 	bl	8002128 <_malloc_r>
 8002036:	b948      	cbnz	r0, 800204c <__smakebuf_r+0x44>
 8002038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800203c:	059a      	lsls	r2, r3, #22
 800203e:	d4ef      	bmi.n	8002020 <__smakebuf_r+0x18>
 8002040:	f023 0303 	bic.w	r3, r3, #3
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	81a3      	strh	r3, [r4, #12]
 800204a:	e7e3      	b.n	8002014 <__smakebuf_r+0xc>
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <__smakebuf_r+0x7c>)
 800204e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	6020      	str	r0, [r4, #0]
 8002054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002058:	81a3      	strh	r3, [r4, #12]
 800205a:	9b00      	ldr	r3, [sp, #0]
 800205c:	6163      	str	r3, [r4, #20]
 800205e:	9b01      	ldr	r3, [sp, #4]
 8002060:	6120      	str	r0, [r4, #16]
 8002062:	b15b      	cbz	r3, 800207c <__smakebuf_r+0x74>
 8002064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002068:	4630      	mov	r0, r6
 800206a:	f000 fc2d 	bl	80028c8 <_isatty_r>
 800206e:	b128      	cbz	r0, 800207c <__smakebuf_r+0x74>
 8002070:	89a3      	ldrh	r3, [r4, #12]
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	81a3      	strh	r3, [r4, #12]
 800207c:	89a0      	ldrh	r0, [r4, #12]
 800207e:	4305      	orrs	r5, r0
 8002080:	81a5      	strh	r5, [r4, #12]
 8002082:	e7cd      	b.n	8002020 <__smakebuf_r+0x18>
 8002084:	08001e19 	.word	0x08001e19

08002088 <_free_r>:
 8002088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800208a:	2900      	cmp	r1, #0
 800208c:	d048      	beq.n	8002120 <_free_r+0x98>
 800208e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002092:	9001      	str	r0, [sp, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f1a1 0404 	sub.w	r4, r1, #4
 800209a:	bfb8      	it	lt
 800209c:	18e4      	addlt	r4, r4, r3
 800209e:	f000 fc35 	bl	800290c <__malloc_lock>
 80020a2:	4a20      	ldr	r2, [pc, #128]	; (8002124 <_free_r+0x9c>)
 80020a4:	9801      	ldr	r0, [sp, #4]
 80020a6:	6813      	ldr	r3, [r2, #0]
 80020a8:	4615      	mov	r5, r2
 80020aa:	b933      	cbnz	r3, 80020ba <_free_r+0x32>
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	6014      	str	r4, [r2, #0]
 80020b0:	b003      	add	sp, #12
 80020b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020b6:	f000 bc2f 	b.w	8002918 <__malloc_unlock>
 80020ba:	42a3      	cmp	r3, r4
 80020bc:	d90b      	bls.n	80020d6 <_free_r+0x4e>
 80020be:	6821      	ldr	r1, [r4, #0]
 80020c0:	1862      	adds	r2, r4, r1
 80020c2:	4293      	cmp	r3, r2
 80020c4:	bf04      	itt	eq
 80020c6:	681a      	ldreq	r2, [r3, #0]
 80020c8:	685b      	ldreq	r3, [r3, #4]
 80020ca:	6063      	str	r3, [r4, #4]
 80020cc:	bf04      	itt	eq
 80020ce:	1852      	addeq	r2, r2, r1
 80020d0:	6022      	streq	r2, [r4, #0]
 80020d2:	602c      	str	r4, [r5, #0]
 80020d4:	e7ec      	b.n	80020b0 <_free_r+0x28>
 80020d6:	461a      	mov	r2, r3
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	b10b      	cbz	r3, 80020e0 <_free_r+0x58>
 80020dc:	42a3      	cmp	r3, r4
 80020de:	d9fa      	bls.n	80020d6 <_free_r+0x4e>
 80020e0:	6811      	ldr	r1, [r2, #0]
 80020e2:	1855      	adds	r5, r2, r1
 80020e4:	42a5      	cmp	r5, r4
 80020e6:	d10b      	bne.n	8002100 <_free_r+0x78>
 80020e8:	6824      	ldr	r4, [r4, #0]
 80020ea:	4421      	add	r1, r4
 80020ec:	1854      	adds	r4, r2, r1
 80020ee:	42a3      	cmp	r3, r4
 80020f0:	6011      	str	r1, [r2, #0]
 80020f2:	d1dd      	bne.n	80020b0 <_free_r+0x28>
 80020f4:	681c      	ldr	r4, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	6053      	str	r3, [r2, #4]
 80020fa:	4421      	add	r1, r4
 80020fc:	6011      	str	r1, [r2, #0]
 80020fe:	e7d7      	b.n	80020b0 <_free_r+0x28>
 8002100:	d902      	bls.n	8002108 <_free_r+0x80>
 8002102:	230c      	movs	r3, #12
 8002104:	6003      	str	r3, [r0, #0]
 8002106:	e7d3      	b.n	80020b0 <_free_r+0x28>
 8002108:	6825      	ldr	r5, [r4, #0]
 800210a:	1961      	adds	r1, r4, r5
 800210c:	428b      	cmp	r3, r1
 800210e:	bf04      	itt	eq
 8002110:	6819      	ldreq	r1, [r3, #0]
 8002112:	685b      	ldreq	r3, [r3, #4]
 8002114:	6063      	str	r3, [r4, #4]
 8002116:	bf04      	itt	eq
 8002118:	1949      	addeq	r1, r1, r5
 800211a:	6021      	streq	r1, [r4, #0]
 800211c:	6054      	str	r4, [r2, #4]
 800211e:	e7c7      	b.n	80020b0 <_free_r+0x28>
 8002120:	b003      	add	sp, #12
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	20000088 	.word	0x20000088

08002128 <_malloc_r>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	1ccd      	adds	r5, r1, #3
 800212c:	f025 0503 	bic.w	r5, r5, #3
 8002130:	3508      	adds	r5, #8
 8002132:	2d0c      	cmp	r5, #12
 8002134:	bf38      	it	cc
 8002136:	250c      	movcc	r5, #12
 8002138:	2d00      	cmp	r5, #0
 800213a:	4606      	mov	r6, r0
 800213c:	db01      	blt.n	8002142 <_malloc_r+0x1a>
 800213e:	42a9      	cmp	r1, r5
 8002140:	d903      	bls.n	800214a <_malloc_r+0x22>
 8002142:	230c      	movs	r3, #12
 8002144:	6033      	str	r3, [r6, #0]
 8002146:	2000      	movs	r0, #0
 8002148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800214a:	f000 fbdf 	bl	800290c <__malloc_lock>
 800214e:	4921      	ldr	r1, [pc, #132]	; (80021d4 <_malloc_r+0xac>)
 8002150:	680a      	ldr	r2, [r1, #0]
 8002152:	4614      	mov	r4, r2
 8002154:	b99c      	cbnz	r4, 800217e <_malloc_r+0x56>
 8002156:	4f20      	ldr	r7, [pc, #128]	; (80021d8 <_malloc_r+0xb0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b923      	cbnz	r3, 8002166 <_malloc_r+0x3e>
 800215c:	4621      	mov	r1, r4
 800215e:	4630      	mov	r0, r6
 8002160:	f000 fb2a 	bl	80027b8 <_sbrk_r>
 8002164:	6038      	str	r0, [r7, #0]
 8002166:	4629      	mov	r1, r5
 8002168:	4630      	mov	r0, r6
 800216a:	f000 fb25 	bl	80027b8 <_sbrk_r>
 800216e:	1c43      	adds	r3, r0, #1
 8002170:	d123      	bne.n	80021ba <_malloc_r+0x92>
 8002172:	230c      	movs	r3, #12
 8002174:	6033      	str	r3, [r6, #0]
 8002176:	4630      	mov	r0, r6
 8002178:	f000 fbce 	bl	8002918 <__malloc_unlock>
 800217c:	e7e3      	b.n	8002146 <_malloc_r+0x1e>
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	1b5b      	subs	r3, r3, r5
 8002182:	d417      	bmi.n	80021b4 <_malloc_r+0x8c>
 8002184:	2b0b      	cmp	r3, #11
 8002186:	d903      	bls.n	8002190 <_malloc_r+0x68>
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	441c      	add	r4, r3
 800218c:	6025      	str	r5, [r4, #0]
 800218e:	e004      	b.n	800219a <_malloc_r+0x72>
 8002190:	6863      	ldr	r3, [r4, #4]
 8002192:	42a2      	cmp	r2, r4
 8002194:	bf0c      	ite	eq
 8002196:	600b      	streq	r3, [r1, #0]
 8002198:	6053      	strne	r3, [r2, #4]
 800219a:	4630      	mov	r0, r6
 800219c:	f000 fbbc 	bl	8002918 <__malloc_unlock>
 80021a0:	f104 000b 	add.w	r0, r4, #11
 80021a4:	1d23      	adds	r3, r4, #4
 80021a6:	f020 0007 	bic.w	r0, r0, #7
 80021aa:	1ac2      	subs	r2, r0, r3
 80021ac:	d0cc      	beq.n	8002148 <_malloc_r+0x20>
 80021ae:	1a1b      	subs	r3, r3, r0
 80021b0:	50a3      	str	r3, [r4, r2]
 80021b2:	e7c9      	b.n	8002148 <_malloc_r+0x20>
 80021b4:	4622      	mov	r2, r4
 80021b6:	6864      	ldr	r4, [r4, #4]
 80021b8:	e7cc      	b.n	8002154 <_malloc_r+0x2c>
 80021ba:	1cc4      	adds	r4, r0, #3
 80021bc:	f024 0403 	bic.w	r4, r4, #3
 80021c0:	42a0      	cmp	r0, r4
 80021c2:	d0e3      	beq.n	800218c <_malloc_r+0x64>
 80021c4:	1a21      	subs	r1, r4, r0
 80021c6:	4630      	mov	r0, r6
 80021c8:	f000 faf6 	bl	80027b8 <_sbrk_r>
 80021cc:	3001      	adds	r0, #1
 80021ce:	d1dd      	bne.n	800218c <_malloc_r+0x64>
 80021d0:	e7cf      	b.n	8002172 <_malloc_r+0x4a>
 80021d2:	bf00      	nop
 80021d4:	20000088 	.word	0x20000088
 80021d8:	2000008c 	.word	0x2000008c

080021dc <__sfputc_r>:
 80021dc:	6893      	ldr	r3, [r2, #8]
 80021de:	3b01      	subs	r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	b410      	push	{r4}
 80021e4:	6093      	str	r3, [r2, #8]
 80021e6:	da08      	bge.n	80021fa <__sfputc_r+0x1e>
 80021e8:	6994      	ldr	r4, [r2, #24]
 80021ea:	42a3      	cmp	r3, r4
 80021ec:	db01      	blt.n	80021f2 <__sfputc_r+0x16>
 80021ee:	290a      	cmp	r1, #10
 80021f0:	d103      	bne.n	80021fa <__sfputc_r+0x1e>
 80021f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021f6:	f7ff bc69 	b.w	8001acc <__swbuf_r>
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	1c58      	adds	r0, r3, #1
 80021fe:	6010      	str	r0, [r2, #0]
 8002200:	7019      	strb	r1, [r3, #0]
 8002202:	4608      	mov	r0, r1
 8002204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002208:	4770      	bx	lr

0800220a <__sfputs_r>:
 800220a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220c:	4606      	mov	r6, r0
 800220e:	460f      	mov	r7, r1
 8002210:	4614      	mov	r4, r2
 8002212:	18d5      	adds	r5, r2, r3
 8002214:	42ac      	cmp	r4, r5
 8002216:	d101      	bne.n	800221c <__sfputs_r+0x12>
 8002218:	2000      	movs	r0, #0
 800221a:	e007      	b.n	800222c <__sfputs_r+0x22>
 800221c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002220:	463a      	mov	r2, r7
 8002222:	4630      	mov	r0, r6
 8002224:	f7ff ffda 	bl	80021dc <__sfputc_r>
 8002228:	1c43      	adds	r3, r0, #1
 800222a:	d1f3      	bne.n	8002214 <__sfputs_r+0xa>
 800222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002230 <_vfiprintf_r>:
 8002230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002234:	460d      	mov	r5, r1
 8002236:	b09d      	sub	sp, #116	; 0x74
 8002238:	4614      	mov	r4, r2
 800223a:	4698      	mov	r8, r3
 800223c:	4606      	mov	r6, r0
 800223e:	b118      	cbz	r0, 8002248 <_vfiprintf_r+0x18>
 8002240:	6983      	ldr	r3, [r0, #24]
 8002242:	b90b      	cbnz	r3, 8002248 <_vfiprintf_r+0x18>
 8002244:	f7ff fe1c 	bl	8001e80 <__sinit>
 8002248:	4b89      	ldr	r3, [pc, #548]	; (8002470 <_vfiprintf_r+0x240>)
 800224a:	429d      	cmp	r5, r3
 800224c:	d11b      	bne.n	8002286 <_vfiprintf_r+0x56>
 800224e:	6875      	ldr	r5, [r6, #4]
 8002250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002252:	07d9      	lsls	r1, r3, #31
 8002254:	d405      	bmi.n	8002262 <_vfiprintf_r+0x32>
 8002256:	89ab      	ldrh	r3, [r5, #12]
 8002258:	059a      	lsls	r2, r3, #22
 800225a:	d402      	bmi.n	8002262 <_vfiprintf_r+0x32>
 800225c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800225e:	f7ff fead 	bl	8001fbc <__retarget_lock_acquire_recursive>
 8002262:	89ab      	ldrh	r3, [r5, #12]
 8002264:	071b      	lsls	r3, r3, #28
 8002266:	d501      	bpl.n	800226c <_vfiprintf_r+0x3c>
 8002268:	692b      	ldr	r3, [r5, #16]
 800226a:	b9eb      	cbnz	r3, 80022a8 <_vfiprintf_r+0x78>
 800226c:	4629      	mov	r1, r5
 800226e:	4630      	mov	r0, r6
 8002270:	f7ff fc7e 	bl	8001b70 <__swsetup_r>
 8002274:	b1c0      	cbz	r0, 80022a8 <_vfiprintf_r+0x78>
 8002276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002278:	07dc      	lsls	r4, r3, #31
 800227a:	d50e      	bpl.n	800229a <_vfiprintf_r+0x6a>
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	b01d      	add	sp, #116	; 0x74
 8002282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002286:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <_vfiprintf_r+0x244>)
 8002288:	429d      	cmp	r5, r3
 800228a:	d101      	bne.n	8002290 <_vfiprintf_r+0x60>
 800228c:	68b5      	ldr	r5, [r6, #8]
 800228e:	e7df      	b.n	8002250 <_vfiprintf_r+0x20>
 8002290:	4b79      	ldr	r3, [pc, #484]	; (8002478 <_vfiprintf_r+0x248>)
 8002292:	429d      	cmp	r5, r3
 8002294:	bf08      	it	eq
 8002296:	68f5      	ldreq	r5, [r6, #12]
 8002298:	e7da      	b.n	8002250 <_vfiprintf_r+0x20>
 800229a:	89ab      	ldrh	r3, [r5, #12]
 800229c:	0598      	lsls	r0, r3, #22
 800229e:	d4ed      	bmi.n	800227c <_vfiprintf_r+0x4c>
 80022a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022a2:	f7ff fe8c 	bl	8001fbe <__retarget_lock_release_recursive>
 80022a6:	e7e9      	b.n	800227c <_vfiprintf_r+0x4c>
 80022a8:	2300      	movs	r3, #0
 80022aa:	9309      	str	r3, [sp, #36]	; 0x24
 80022ac:	2320      	movs	r3, #32
 80022ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80022b6:	2330      	movs	r3, #48	; 0x30
 80022b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800247c <_vfiprintf_r+0x24c>
 80022bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022c0:	f04f 0901 	mov.w	r9, #1
 80022c4:	4623      	mov	r3, r4
 80022c6:	469a      	mov	sl, r3
 80022c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022cc:	b10a      	cbz	r2, 80022d2 <_vfiprintf_r+0xa2>
 80022ce:	2a25      	cmp	r2, #37	; 0x25
 80022d0:	d1f9      	bne.n	80022c6 <_vfiprintf_r+0x96>
 80022d2:	ebba 0b04 	subs.w	fp, sl, r4
 80022d6:	d00b      	beq.n	80022f0 <_vfiprintf_r+0xc0>
 80022d8:	465b      	mov	r3, fp
 80022da:	4622      	mov	r2, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	4630      	mov	r0, r6
 80022e0:	f7ff ff93 	bl	800220a <__sfputs_r>
 80022e4:	3001      	adds	r0, #1
 80022e6:	f000 80aa 	beq.w	800243e <_vfiprintf_r+0x20e>
 80022ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022ec:	445a      	add	r2, fp
 80022ee:	9209      	str	r2, [sp, #36]	; 0x24
 80022f0:	f89a 3000 	ldrb.w	r3, [sl]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a2 	beq.w	800243e <_vfiprintf_r+0x20e>
 80022fa:	2300      	movs	r3, #0
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002304:	f10a 0a01 	add.w	sl, sl, #1
 8002308:	9304      	str	r3, [sp, #16]
 800230a:	9307      	str	r3, [sp, #28]
 800230c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002310:	931a      	str	r3, [sp, #104]	; 0x68
 8002312:	4654      	mov	r4, sl
 8002314:	2205      	movs	r2, #5
 8002316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800231a:	4858      	ldr	r0, [pc, #352]	; (800247c <_vfiprintf_r+0x24c>)
 800231c:	f7fd ff58 	bl	80001d0 <memchr>
 8002320:	9a04      	ldr	r2, [sp, #16]
 8002322:	b9d8      	cbnz	r0, 800235c <_vfiprintf_r+0x12c>
 8002324:	06d1      	lsls	r1, r2, #27
 8002326:	bf44      	itt	mi
 8002328:	2320      	movmi	r3, #32
 800232a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800232e:	0713      	lsls	r3, r2, #28
 8002330:	bf44      	itt	mi
 8002332:	232b      	movmi	r3, #43	; 0x2b
 8002334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002338:	f89a 3000 	ldrb.w	r3, [sl]
 800233c:	2b2a      	cmp	r3, #42	; 0x2a
 800233e:	d015      	beq.n	800236c <_vfiprintf_r+0x13c>
 8002340:	9a07      	ldr	r2, [sp, #28]
 8002342:	4654      	mov	r4, sl
 8002344:	2000      	movs	r0, #0
 8002346:	f04f 0c0a 	mov.w	ip, #10
 800234a:	4621      	mov	r1, r4
 800234c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002350:	3b30      	subs	r3, #48	; 0x30
 8002352:	2b09      	cmp	r3, #9
 8002354:	d94e      	bls.n	80023f4 <_vfiprintf_r+0x1c4>
 8002356:	b1b0      	cbz	r0, 8002386 <_vfiprintf_r+0x156>
 8002358:	9207      	str	r2, [sp, #28]
 800235a:	e014      	b.n	8002386 <_vfiprintf_r+0x156>
 800235c:	eba0 0308 	sub.w	r3, r0, r8
 8002360:	fa09 f303 	lsl.w	r3, r9, r3
 8002364:	4313      	orrs	r3, r2
 8002366:	9304      	str	r3, [sp, #16]
 8002368:	46a2      	mov	sl, r4
 800236a:	e7d2      	b.n	8002312 <_vfiprintf_r+0xe2>
 800236c:	9b03      	ldr	r3, [sp, #12]
 800236e:	1d19      	adds	r1, r3, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	9103      	str	r1, [sp, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	bfbb      	ittet	lt
 8002378:	425b      	neglt	r3, r3
 800237a:	f042 0202 	orrlt.w	r2, r2, #2
 800237e:	9307      	strge	r3, [sp, #28]
 8002380:	9307      	strlt	r3, [sp, #28]
 8002382:	bfb8      	it	lt
 8002384:	9204      	strlt	r2, [sp, #16]
 8002386:	7823      	ldrb	r3, [r4, #0]
 8002388:	2b2e      	cmp	r3, #46	; 0x2e
 800238a:	d10c      	bne.n	80023a6 <_vfiprintf_r+0x176>
 800238c:	7863      	ldrb	r3, [r4, #1]
 800238e:	2b2a      	cmp	r3, #42	; 0x2a
 8002390:	d135      	bne.n	80023fe <_vfiprintf_r+0x1ce>
 8002392:	9b03      	ldr	r3, [sp, #12]
 8002394:	1d1a      	adds	r2, r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	9203      	str	r2, [sp, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	bfb8      	it	lt
 800239e:	f04f 33ff 	movlt.w	r3, #4294967295
 80023a2:	3402      	adds	r4, #2
 80023a4:	9305      	str	r3, [sp, #20]
 80023a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800248c <_vfiprintf_r+0x25c>
 80023aa:	7821      	ldrb	r1, [r4, #0]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4650      	mov	r0, sl
 80023b0:	f7fd ff0e 	bl	80001d0 <memchr>
 80023b4:	b140      	cbz	r0, 80023c8 <_vfiprintf_r+0x198>
 80023b6:	2340      	movs	r3, #64	; 0x40
 80023b8:	eba0 000a 	sub.w	r0, r0, sl
 80023bc:	fa03 f000 	lsl.w	r0, r3, r0
 80023c0:	9b04      	ldr	r3, [sp, #16]
 80023c2:	4303      	orrs	r3, r0
 80023c4:	3401      	adds	r4, #1
 80023c6:	9304      	str	r3, [sp, #16]
 80023c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023cc:	482c      	ldr	r0, [pc, #176]	; (8002480 <_vfiprintf_r+0x250>)
 80023ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023d2:	2206      	movs	r2, #6
 80023d4:	f7fd fefc 	bl	80001d0 <memchr>
 80023d8:	2800      	cmp	r0, #0
 80023da:	d03f      	beq.n	800245c <_vfiprintf_r+0x22c>
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <_vfiprintf_r+0x254>)
 80023de:	bb1b      	cbnz	r3, 8002428 <_vfiprintf_r+0x1f8>
 80023e0:	9b03      	ldr	r3, [sp, #12]
 80023e2:	3307      	adds	r3, #7
 80023e4:	f023 0307 	bic.w	r3, r3, #7
 80023e8:	3308      	adds	r3, #8
 80023ea:	9303      	str	r3, [sp, #12]
 80023ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023ee:	443b      	add	r3, r7
 80023f0:	9309      	str	r3, [sp, #36]	; 0x24
 80023f2:	e767      	b.n	80022c4 <_vfiprintf_r+0x94>
 80023f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80023f8:	460c      	mov	r4, r1
 80023fa:	2001      	movs	r0, #1
 80023fc:	e7a5      	b.n	800234a <_vfiprintf_r+0x11a>
 80023fe:	2300      	movs	r3, #0
 8002400:	3401      	adds	r4, #1
 8002402:	9305      	str	r3, [sp, #20]
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 0c0a 	mov.w	ip, #10
 800240a:	4620      	mov	r0, r4
 800240c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002410:	3a30      	subs	r2, #48	; 0x30
 8002412:	2a09      	cmp	r2, #9
 8002414:	d903      	bls.n	800241e <_vfiprintf_r+0x1ee>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0c5      	beq.n	80023a6 <_vfiprintf_r+0x176>
 800241a:	9105      	str	r1, [sp, #20]
 800241c:	e7c3      	b.n	80023a6 <_vfiprintf_r+0x176>
 800241e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002422:	4604      	mov	r4, r0
 8002424:	2301      	movs	r3, #1
 8002426:	e7f0      	b.n	800240a <_vfiprintf_r+0x1da>
 8002428:	ab03      	add	r3, sp, #12
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	462a      	mov	r2, r5
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <_vfiprintf_r+0x258>)
 8002430:	a904      	add	r1, sp, #16
 8002432:	4630      	mov	r0, r6
 8002434:	f3af 8000 	nop.w
 8002438:	4607      	mov	r7, r0
 800243a:	1c78      	adds	r0, r7, #1
 800243c:	d1d6      	bne.n	80023ec <_vfiprintf_r+0x1bc>
 800243e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002440:	07d9      	lsls	r1, r3, #31
 8002442:	d405      	bmi.n	8002450 <_vfiprintf_r+0x220>
 8002444:	89ab      	ldrh	r3, [r5, #12]
 8002446:	059a      	lsls	r2, r3, #22
 8002448:	d402      	bmi.n	8002450 <_vfiprintf_r+0x220>
 800244a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800244c:	f7ff fdb7 	bl	8001fbe <__retarget_lock_release_recursive>
 8002450:	89ab      	ldrh	r3, [r5, #12]
 8002452:	065b      	lsls	r3, r3, #25
 8002454:	f53f af12 	bmi.w	800227c <_vfiprintf_r+0x4c>
 8002458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800245a:	e711      	b.n	8002280 <_vfiprintf_r+0x50>
 800245c:	ab03      	add	r3, sp, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	462a      	mov	r2, r5
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <_vfiprintf_r+0x258>)
 8002464:	a904      	add	r1, sp, #16
 8002466:	4630      	mov	r0, r6
 8002468:	f000 f880 	bl	800256c <_printf_i>
 800246c:	e7e4      	b.n	8002438 <_vfiprintf_r+0x208>
 800246e:	bf00      	nop
 8002470:	080029d8 	.word	0x080029d8
 8002474:	080029f8 	.word	0x080029f8
 8002478:	080029b8 	.word	0x080029b8
 800247c:	08002a18 	.word	0x08002a18
 8002480:	08002a22 	.word	0x08002a22
 8002484:	00000000 	.word	0x00000000
 8002488:	0800220b 	.word	0x0800220b
 800248c:	08002a1e 	.word	0x08002a1e

08002490 <_printf_common>:
 8002490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002494:	4616      	mov	r6, r2
 8002496:	4699      	mov	r9, r3
 8002498:	688a      	ldr	r2, [r1, #8]
 800249a:	690b      	ldr	r3, [r1, #16]
 800249c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024a0:	4293      	cmp	r3, r2
 80024a2:	bfb8      	it	lt
 80024a4:	4613      	movlt	r3, r2
 80024a6:	6033      	str	r3, [r6, #0]
 80024a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024ac:	4607      	mov	r7, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	b10a      	cbz	r2, 80024b6 <_printf_common+0x26>
 80024b2:	3301      	adds	r3, #1
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	0699      	lsls	r1, r3, #26
 80024ba:	bf42      	ittt	mi
 80024bc:	6833      	ldrmi	r3, [r6, #0]
 80024be:	3302      	addmi	r3, #2
 80024c0:	6033      	strmi	r3, [r6, #0]
 80024c2:	6825      	ldr	r5, [r4, #0]
 80024c4:	f015 0506 	ands.w	r5, r5, #6
 80024c8:	d106      	bne.n	80024d8 <_printf_common+0x48>
 80024ca:	f104 0a19 	add.w	sl, r4, #25
 80024ce:	68e3      	ldr	r3, [r4, #12]
 80024d0:	6832      	ldr	r2, [r6, #0]
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	42ab      	cmp	r3, r5
 80024d6:	dc26      	bgt.n	8002526 <_printf_common+0x96>
 80024d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024dc:	1e13      	subs	r3, r2, #0
 80024de:	6822      	ldr	r2, [r4, #0]
 80024e0:	bf18      	it	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	0692      	lsls	r2, r2, #26
 80024e6:	d42b      	bmi.n	8002540 <_printf_common+0xb0>
 80024e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024ec:	4649      	mov	r1, r9
 80024ee:	4638      	mov	r0, r7
 80024f0:	47c0      	blx	r8
 80024f2:	3001      	adds	r0, #1
 80024f4:	d01e      	beq.n	8002534 <_printf_common+0xa4>
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	68e5      	ldr	r5, [r4, #12]
 80024fa:	6832      	ldr	r2, [r6, #0]
 80024fc:	f003 0306 	and.w	r3, r3, #6
 8002500:	2b04      	cmp	r3, #4
 8002502:	bf08      	it	eq
 8002504:	1aad      	subeq	r5, r5, r2
 8002506:	68a3      	ldr	r3, [r4, #8]
 8002508:	6922      	ldr	r2, [r4, #16]
 800250a:	bf0c      	ite	eq
 800250c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002510:	2500      	movne	r5, #0
 8002512:	4293      	cmp	r3, r2
 8002514:	bfc4      	itt	gt
 8002516:	1a9b      	subgt	r3, r3, r2
 8002518:	18ed      	addgt	r5, r5, r3
 800251a:	2600      	movs	r6, #0
 800251c:	341a      	adds	r4, #26
 800251e:	42b5      	cmp	r5, r6
 8002520:	d11a      	bne.n	8002558 <_printf_common+0xc8>
 8002522:	2000      	movs	r0, #0
 8002524:	e008      	b.n	8002538 <_printf_common+0xa8>
 8002526:	2301      	movs	r3, #1
 8002528:	4652      	mov	r2, sl
 800252a:	4649      	mov	r1, r9
 800252c:	4638      	mov	r0, r7
 800252e:	47c0      	blx	r8
 8002530:	3001      	adds	r0, #1
 8002532:	d103      	bne.n	800253c <_printf_common+0xac>
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800253c:	3501      	adds	r5, #1
 800253e:	e7c6      	b.n	80024ce <_printf_common+0x3e>
 8002540:	18e1      	adds	r1, r4, r3
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	2030      	movs	r0, #48	; 0x30
 8002546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800254a:	4422      	add	r2, r4
 800254c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002554:	3302      	adds	r3, #2
 8002556:	e7c7      	b.n	80024e8 <_printf_common+0x58>
 8002558:	2301      	movs	r3, #1
 800255a:	4622      	mov	r2, r4
 800255c:	4649      	mov	r1, r9
 800255e:	4638      	mov	r0, r7
 8002560:	47c0      	blx	r8
 8002562:	3001      	adds	r0, #1
 8002564:	d0e6      	beq.n	8002534 <_printf_common+0xa4>
 8002566:	3601      	adds	r6, #1
 8002568:	e7d9      	b.n	800251e <_printf_common+0x8e>
	...

0800256c <_printf_i>:
 800256c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002570:	460c      	mov	r4, r1
 8002572:	4691      	mov	r9, r2
 8002574:	7e27      	ldrb	r7, [r4, #24]
 8002576:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002578:	2f78      	cmp	r7, #120	; 0x78
 800257a:	4680      	mov	r8, r0
 800257c:	469a      	mov	sl, r3
 800257e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002582:	d807      	bhi.n	8002594 <_printf_i+0x28>
 8002584:	2f62      	cmp	r7, #98	; 0x62
 8002586:	d80a      	bhi.n	800259e <_printf_i+0x32>
 8002588:	2f00      	cmp	r7, #0
 800258a:	f000 80d8 	beq.w	800273e <_printf_i+0x1d2>
 800258e:	2f58      	cmp	r7, #88	; 0x58
 8002590:	f000 80a3 	beq.w	80026da <_printf_i+0x16e>
 8002594:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800259c:	e03a      	b.n	8002614 <_printf_i+0xa8>
 800259e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025a2:	2b15      	cmp	r3, #21
 80025a4:	d8f6      	bhi.n	8002594 <_printf_i+0x28>
 80025a6:	a001      	add	r0, pc, #4	; (adr r0, 80025ac <_printf_i+0x40>)
 80025a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025ac:	08002605 	.word	0x08002605
 80025b0:	08002619 	.word	0x08002619
 80025b4:	08002595 	.word	0x08002595
 80025b8:	08002595 	.word	0x08002595
 80025bc:	08002595 	.word	0x08002595
 80025c0:	08002595 	.word	0x08002595
 80025c4:	08002619 	.word	0x08002619
 80025c8:	08002595 	.word	0x08002595
 80025cc:	08002595 	.word	0x08002595
 80025d0:	08002595 	.word	0x08002595
 80025d4:	08002595 	.word	0x08002595
 80025d8:	08002725 	.word	0x08002725
 80025dc:	08002649 	.word	0x08002649
 80025e0:	08002707 	.word	0x08002707
 80025e4:	08002595 	.word	0x08002595
 80025e8:	08002595 	.word	0x08002595
 80025ec:	08002747 	.word	0x08002747
 80025f0:	08002595 	.word	0x08002595
 80025f4:	08002649 	.word	0x08002649
 80025f8:	08002595 	.word	0x08002595
 80025fc:	08002595 	.word	0x08002595
 8002600:	0800270f 	.word	0x0800270f
 8002604:	680b      	ldr	r3, [r1, #0]
 8002606:	1d1a      	adds	r2, r3, #4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	600a      	str	r2, [r1, #0]
 800260c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002614:	2301      	movs	r3, #1
 8002616:	e0a3      	b.n	8002760 <_printf_i+0x1f4>
 8002618:	6825      	ldr	r5, [r4, #0]
 800261a:	6808      	ldr	r0, [r1, #0]
 800261c:	062e      	lsls	r6, r5, #24
 800261e:	f100 0304 	add.w	r3, r0, #4
 8002622:	d50a      	bpl.n	800263a <_printf_i+0xce>
 8002624:	6805      	ldr	r5, [r0, #0]
 8002626:	600b      	str	r3, [r1, #0]
 8002628:	2d00      	cmp	r5, #0
 800262a:	da03      	bge.n	8002634 <_printf_i+0xc8>
 800262c:	232d      	movs	r3, #45	; 0x2d
 800262e:	426d      	negs	r5, r5
 8002630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002634:	485e      	ldr	r0, [pc, #376]	; (80027b0 <_printf_i+0x244>)
 8002636:	230a      	movs	r3, #10
 8002638:	e019      	b.n	800266e <_printf_i+0x102>
 800263a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800263e:	6805      	ldr	r5, [r0, #0]
 8002640:	600b      	str	r3, [r1, #0]
 8002642:	bf18      	it	ne
 8002644:	b22d      	sxthne	r5, r5
 8002646:	e7ef      	b.n	8002628 <_printf_i+0xbc>
 8002648:	680b      	ldr	r3, [r1, #0]
 800264a:	6825      	ldr	r5, [r4, #0]
 800264c:	1d18      	adds	r0, r3, #4
 800264e:	6008      	str	r0, [r1, #0]
 8002650:	0628      	lsls	r0, r5, #24
 8002652:	d501      	bpl.n	8002658 <_printf_i+0xec>
 8002654:	681d      	ldr	r5, [r3, #0]
 8002656:	e002      	b.n	800265e <_printf_i+0xf2>
 8002658:	0669      	lsls	r1, r5, #25
 800265a:	d5fb      	bpl.n	8002654 <_printf_i+0xe8>
 800265c:	881d      	ldrh	r5, [r3, #0]
 800265e:	4854      	ldr	r0, [pc, #336]	; (80027b0 <_printf_i+0x244>)
 8002660:	2f6f      	cmp	r7, #111	; 0x6f
 8002662:	bf0c      	ite	eq
 8002664:	2308      	moveq	r3, #8
 8002666:	230a      	movne	r3, #10
 8002668:	2100      	movs	r1, #0
 800266a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800266e:	6866      	ldr	r6, [r4, #4]
 8002670:	60a6      	str	r6, [r4, #8]
 8002672:	2e00      	cmp	r6, #0
 8002674:	bfa2      	ittt	ge
 8002676:	6821      	ldrge	r1, [r4, #0]
 8002678:	f021 0104 	bicge.w	r1, r1, #4
 800267c:	6021      	strge	r1, [r4, #0]
 800267e:	b90d      	cbnz	r5, 8002684 <_printf_i+0x118>
 8002680:	2e00      	cmp	r6, #0
 8002682:	d04d      	beq.n	8002720 <_printf_i+0x1b4>
 8002684:	4616      	mov	r6, r2
 8002686:	fbb5 f1f3 	udiv	r1, r5, r3
 800268a:	fb03 5711 	mls	r7, r3, r1, r5
 800268e:	5dc7      	ldrb	r7, [r0, r7]
 8002690:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002694:	462f      	mov	r7, r5
 8002696:	42bb      	cmp	r3, r7
 8002698:	460d      	mov	r5, r1
 800269a:	d9f4      	bls.n	8002686 <_printf_i+0x11a>
 800269c:	2b08      	cmp	r3, #8
 800269e:	d10b      	bne.n	80026b8 <_printf_i+0x14c>
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	07df      	lsls	r7, r3, #31
 80026a4:	d508      	bpl.n	80026b8 <_printf_i+0x14c>
 80026a6:	6923      	ldr	r3, [r4, #16]
 80026a8:	6861      	ldr	r1, [r4, #4]
 80026aa:	4299      	cmp	r1, r3
 80026ac:	bfde      	ittt	le
 80026ae:	2330      	movle	r3, #48	; 0x30
 80026b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026b8:	1b92      	subs	r2, r2, r6
 80026ba:	6122      	str	r2, [r4, #16]
 80026bc:	f8cd a000 	str.w	sl, [sp]
 80026c0:	464b      	mov	r3, r9
 80026c2:	aa03      	add	r2, sp, #12
 80026c4:	4621      	mov	r1, r4
 80026c6:	4640      	mov	r0, r8
 80026c8:	f7ff fee2 	bl	8002490 <_printf_common>
 80026cc:	3001      	adds	r0, #1
 80026ce:	d14c      	bne.n	800276a <_printf_i+0x1fe>
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	b004      	add	sp, #16
 80026d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026da:	4835      	ldr	r0, [pc, #212]	; (80027b0 <_printf_i+0x244>)
 80026dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	680e      	ldr	r6, [r1, #0]
 80026e4:	061f      	lsls	r7, r3, #24
 80026e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80026ea:	600e      	str	r6, [r1, #0]
 80026ec:	d514      	bpl.n	8002718 <_printf_i+0x1ac>
 80026ee:	07d9      	lsls	r1, r3, #31
 80026f0:	bf44      	itt	mi
 80026f2:	f043 0320 	orrmi.w	r3, r3, #32
 80026f6:	6023      	strmi	r3, [r4, #0]
 80026f8:	b91d      	cbnz	r5, 8002702 <_printf_i+0x196>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	f023 0320 	bic.w	r3, r3, #32
 8002700:	6023      	str	r3, [r4, #0]
 8002702:	2310      	movs	r3, #16
 8002704:	e7b0      	b.n	8002668 <_printf_i+0xfc>
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	f043 0320 	orr.w	r3, r3, #32
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	2378      	movs	r3, #120	; 0x78
 8002710:	4828      	ldr	r0, [pc, #160]	; (80027b4 <_printf_i+0x248>)
 8002712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002716:	e7e3      	b.n	80026e0 <_printf_i+0x174>
 8002718:	065e      	lsls	r6, r3, #25
 800271a:	bf48      	it	mi
 800271c:	b2ad      	uxthmi	r5, r5
 800271e:	e7e6      	b.n	80026ee <_printf_i+0x182>
 8002720:	4616      	mov	r6, r2
 8002722:	e7bb      	b.n	800269c <_printf_i+0x130>
 8002724:	680b      	ldr	r3, [r1, #0]
 8002726:	6826      	ldr	r6, [r4, #0]
 8002728:	6960      	ldr	r0, [r4, #20]
 800272a:	1d1d      	adds	r5, r3, #4
 800272c:	600d      	str	r5, [r1, #0]
 800272e:	0635      	lsls	r5, r6, #24
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	d501      	bpl.n	8002738 <_printf_i+0x1cc>
 8002734:	6018      	str	r0, [r3, #0]
 8002736:	e002      	b.n	800273e <_printf_i+0x1d2>
 8002738:	0671      	lsls	r1, r6, #25
 800273a:	d5fb      	bpl.n	8002734 <_printf_i+0x1c8>
 800273c:	8018      	strh	r0, [r3, #0]
 800273e:	2300      	movs	r3, #0
 8002740:	6123      	str	r3, [r4, #16]
 8002742:	4616      	mov	r6, r2
 8002744:	e7ba      	b.n	80026bc <_printf_i+0x150>
 8002746:	680b      	ldr	r3, [r1, #0]
 8002748:	1d1a      	adds	r2, r3, #4
 800274a:	600a      	str	r2, [r1, #0]
 800274c:	681e      	ldr	r6, [r3, #0]
 800274e:	6862      	ldr	r2, [r4, #4]
 8002750:	2100      	movs	r1, #0
 8002752:	4630      	mov	r0, r6
 8002754:	f7fd fd3c 	bl	80001d0 <memchr>
 8002758:	b108      	cbz	r0, 800275e <_printf_i+0x1f2>
 800275a:	1b80      	subs	r0, r0, r6
 800275c:	6060      	str	r0, [r4, #4]
 800275e:	6863      	ldr	r3, [r4, #4]
 8002760:	6123      	str	r3, [r4, #16]
 8002762:	2300      	movs	r3, #0
 8002764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002768:	e7a8      	b.n	80026bc <_printf_i+0x150>
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	4632      	mov	r2, r6
 800276e:	4649      	mov	r1, r9
 8002770:	4640      	mov	r0, r8
 8002772:	47d0      	blx	sl
 8002774:	3001      	adds	r0, #1
 8002776:	d0ab      	beq.n	80026d0 <_printf_i+0x164>
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	079b      	lsls	r3, r3, #30
 800277c:	d413      	bmi.n	80027a6 <_printf_i+0x23a>
 800277e:	68e0      	ldr	r0, [r4, #12]
 8002780:	9b03      	ldr	r3, [sp, #12]
 8002782:	4298      	cmp	r0, r3
 8002784:	bfb8      	it	lt
 8002786:	4618      	movlt	r0, r3
 8002788:	e7a4      	b.n	80026d4 <_printf_i+0x168>
 800278a:	2301      	movs	r3, #1
 800278c:	4632      	mov	r2, r6
 800278e:	4649      	mov	r1, r9
 8002790:	4640      	mov	r0, r8
 8002792:	47d0      	blx	sl
 8002794:	3001      	adds	r0, #1
 8002796:	d09b      	beq.n	80026d0 <_printf_i+0x164>
 8002798:	3501      	adds	r5, #1
 800279a:	68e3      	ldr	r3, [r4, #12]
 800279c:	9903      	ldr	r1, [sp, #12]
 800279e:	1a5b      	subs	r3, r3, r1
 80027a0:	42ab      	cmp	r3, r5
 80027a2:	dcf2      	bgt.n	800278a <_printf_i+0x21e>
 80027a4:	e7eb      	b.n	800277e <_printf_i+0x212>
 80027a6:	2500      	movs	r5, #0
 80027a8:	f104 0619 	add.w	r6, r4, #25
 80027ac:	e7f5      	b.n	800279a <_printf_i+0x22e>
 80027ae:	bf00      	nop
 80027b0:	08002a29 	.word	0x08002a29
 80027b4:	08002a3a 	.word	0x08002a3a

080027b8 <_sbrk_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4d06      	ldr	r5, [pc, #24]	; (80027d4 <_sbrk_r+0x1c>)
 80027bc:	2300      	movs	r3, #0
 80027be:	4604      	mov	r4, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	602b      	str	r3, [r5, #0]
 80027c4:	f7fe f9dc 	bl	8000b80 <_sbrk>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_sbrk_r+0x1a>
 80027cc:	682b      	ldr	r3, [r5, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_sbrk_r+0x1a>
 80027d0:	6023      	str	r3, [r4, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	2000009c 	.word	0x2000009c

080027d8 <__sread>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	460c      	mov	r4, r1
 80027dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e0:	f000 f8a0 	bl	8002924 <_read_r>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	bfab      	itete	ge
 80027e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ea:	89a3      	ldrhlt	r3, [r4, #12]
 80027ec:	181b      	addge	r3, r3, r0
 80027ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027f2:	bfac      	ite	ge
 80027f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80027f6:	81a3      	strhlt	r3, [r4, #12]
 80027f8:	bd10      	pop	{r4, pc}

080027fa <__swrite>:
 80027fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027fe:	461f      	mov	r7, r3
 8002800:	898b      	ldrh	r3, [r1, #12]
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	4605      	mov	r5, r0
 8002806:	460c      	mov	r4, r1
 8002808:	4616      	mov	r6, r2
 800280a:	d505      	bpl.n	8002818 <__swrite+0x1e>
 800280c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002810:	2302      	movs	r3, #2
 8002812:	2200      	movs	r2, #0
 8002814:	f000 f868 	bl	80028e8 <_lseek_r>
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800281e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002822:	81a3      	strh	r3, [r4, #12]
 8002824:	4632      	mov	r2, r6
 8002826:	463b      	mov	r3, r7
 8002828:	4628      	mov	r0, r5
 800282a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800282e:	f000 b817 	b.w	8002860 <_write_r>

08002832 <__sseek>:
 8002832:	b510      	push	{r4, lr}
 8002834:	460c      	mov	r4, r1
 8002836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283a:	f000 f855 	bl	80028e8 <_lseek_r>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	bf15      	itete	ne
 8002844:	6560      	strne	r0, [r4, #84]	; 0x54
 8002846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800284a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800284e:	81a3      	strheq	r3, [r4, #12]
 8002850:	bf18      	it	ne
 8002852:	81a3      	strhne	r3, [r4, #12]
 8002854:	bd10      	pop	{r4, pc}

08002856 <__sclose>:
 8002856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285a:	f000 b813 	b.w	8002884 <_close_r>
	...

08002860 <_write_r>:
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	4d07      	ldr	r5, [pc, #28]	; (8002880 <_write_r+0x20>)
 8002864:	4604      	mov	r4, r0
 8002866:	4608      	mov	r0, r1
 8002868:	4611      	mov	r1, r2
 800286a:	2200      	movs	r2, #0
 800286c:	602a      	str	r2, [r5, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	f7fd feb4 	bl	80005dc <_write>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d102      	bne.n	800287e <_write_r+0x1e>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	b103      	cbz	r3, 800287e <_write_r+0x1e>
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	bd38      	pop	{r3, r4, r5, pc}
 8002880:	2000009c 	.word	0x2000009c

08002884 <_close_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4d06      	ldr	r5, [pc, #24]	; (80028a0 <_close_r+0x1c>)
 8002888:	2300      	movs	r3, #0
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	f7fe f941 	bl	8000b16 <_close>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_close_r+0x1a>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_close_r+0x1a>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	2000009c 	.word	0x2000009c

080028a4 <_fstat_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4d07      	ldr	r5, [pc, #28]	; (80028c4 <_fstat_r+0x20>)
 80028a8:	2300      	movs	r3, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	602b      	str	r3, [r5, #0]
 80028b2:	f7fe f93c 	bl	8000b2e <_fstat>
 80028b6:	1c43      	adds	r3, r0, #1
 80028b8:	d102      	bne.n	80028c0 <_fstat_r+0x1c>
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	b103      	cbz	r3, 80028c0 <_fstat_r+0x1c>
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
 80028c2:	bf00      	nop
 80028c4:	2000009c 	.word	0x2000009c

080028c8 <_isatty_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4d06      	ldr	r5, [pc, #24]	; (80028e4 <_isatty_r+0x1c>)
 80028cc:	2300      	movs	r3, #0
 80028ce:	4604      	mov	r4, r0
 80028d0:	4608      	mov	r0, r1
 80028d2:	602b      	str	r3, [r5, #0]
 80028d4:	f7fe f93b 	bl	8000b4e <_isatty>
 80028d8:	1c43      	adds	r3, r0, #1
 80028da:	d102      	bne.n	80028e2 <_isatty_r+0x1a>
 80028dc:	682b      	ldr	r3, [r5, #0]
 80028de:	b103      	cbz	r3, 80028e2 <_isatty_r+0x1a>
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	2000009c 	.word	0x2000009c

080028e8 <_lseek_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4d07      	ldr	r5, [pc, #28]	; (8002908 <_lseek_r+0x20>)
 80028ec:	4604      	mov	r4, r0
 80028ee:	4608      	mov	r0, r1
 80028f0:	4611      	mov	r1, r2
 80028f2:	2200      	movs	r2, #0
 80028f4:	602a      	str	r2, [r5, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7fe f934 	bl	8000b64 <_lseek>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_lseek_r+0x1e>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_lseek_r+0x1e>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	2000009c 	.word	0x2000009c

0800290c <__malloc_lock>:
 800290c:	4801      	ldr	r0, [pc, #4]	; (8002914 <__malloc_lock+0x8>)
 800290e:	f7ff bb55 	b.w	8001fbc <__retarget_lock_acquire_recursive>
 8002912:	bf00      	nop
 8002914:	20000094 	.word	0x20000094

08002918 <__malloc_unlock>:
 8002918:	4801      	ldr	r0, [pc, #4]	; (8002920 <__malloc_unlock+0x8>)
 800291a:	f7ff bb50 	b.w	8001fbe <__retarget_lock_release_recursive>
 800291e:	bf00      	nop
 8002920:	20000094 	.word	0x20000094

08002924 <_read_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4d07      	ldr	r5, [pc, #28]	; (8002944 <_read_r+0x20>)
 8002928:	4604      	mov	r4, r0
 800292a:	4608      	mov	r0, r1
 800292c:	4611      	mov	r1, r2
 800292e:	2200      	movs	r2, #0
 8002930:	602a      	str	r2, [r5, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	f7fe f8d2 	bl	8000adc <_read>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_read_r+0x1e>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	b103      	cbz	r3, 8002942 <_read_r+0x1e>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	2000009c 	.word	0x2000009c

08002948 <_init>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr

08002954 <_fini>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	bf00      	nop
 8002958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295a:	bc08      	pop	{r3}
 800295c:	469e      	mov	lr, r3
 800295e:	4770      	bx	lr
