
Test2_Print_Yun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe8  08002fe8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ff0  08002ff0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000068  08003060  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08003060  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a108  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd8  00000000  00000000  0002a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002bf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d715  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000071ed  00000000  00000000  0004a365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b565  00000000  00000000  00051552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecab7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002210  00000000  00000000  000ecb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ee4 	.word	0x08002ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002ee4 	.word	0x08002ee4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000578:	2b40      	cmp	r3, #64	; 0x40
 800057a:	bf0c      	ite	eq
 800057c:	2301      	moveq	r3, #1
 800057e:	2300      	movne	r3, #0
 8000580:	b2db      	uxtb	r3, r3
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800059a:	78fa      	ldrb	r2, [r7, #3]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	while(!LL_USART_IsActiveFlag_TC(PRINT_UART_HANDLE));	// 等待发送标志位置位
 80005b4:	bf00      	nop
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <__io_putchar+0x2c>)
 80005b8:	f7ff ffd6 	bl	8000568 <LL_USART_IsActiveFlag_TC>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <__io_putchar+0xa>
	LL_USART_TransmitData8(PRINT_UART_HANDLE, (uint8_t)ch);	// 发送八位数据
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <__io_putchar+0x2c>)
 80005ca:	f7ff ffe0 	bl	800058e <LL_USART_TransmitData8>
	return ch;												// 单字节发送fputc和__io_putchar必须返回的内容
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40011000 	.word	0x40011000

080005dc <DEBUG_PRINT>:

void DEBUG_PRINT(char* word, char* msg)					// Debug显示，用于自定义显示数据
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	printf("%s:%s\r\n", word, msg);
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <DEBUG_PRINT+0x1c>)
 80005ec:	f001 fcae 	bl	8001f4c <iprintf>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08002efc 	.word	0x08002efc

080005fc <SW_BLUE_EXTI_Callback>:
 */
#include "main.h"
#include "exp_callback.h"

__attribute__((weak)) void SW_BLUE_EXTI_Callback(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <SW_GREEN_EXTI_Callback>:

__attribute__((weak)) void SW_GREEN_EXTI_Callback(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SW_RED_EXTI_Callback>:

__attribute__((weak)) void SW_RED_EXTI_Callback(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db0b      	blt.n	800066e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	f003 021f 	and.w	r2, r3, #31
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <__NVIC_EnableIRQ+0x38>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	095b      	lsrs	r3, r3, #5
 8000664:	2001      	movs	r0, #1
 8000666:	fa00 f202 	lsl.w	r2, r0, r2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100

08000680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	6039      	str	r1, [r7, #0]
 800068a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	2b00      	cmp	r3, #0
 8000692:	db0a      	blt.n	80006aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	490c      	ldr	r1, [pc, #48]	; (80006cc <__NVIC_SetPriority+0x4c>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	0112      	lsls	r2, r2, #4
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	440b      	add	r3, r1
 80006a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a8:	e00a      	b.n	80006c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4908      	ldr	r1, [pc, #32]	; (80006d0 <__NVIC_SetPriority+0x50>)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	3b04      	subs	r3, #4
 80006b8:	0112      	lsls	r2, r2, #4
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	440b      	add	r3, r1
 80006be:	761a      	strb	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	f1c3 0307 	rsb	r3, r3, #7
 80006ee:	2b04      	cmp	r3, #4
 80006f0:	bf28      	it	cs
 80006f2:	2304      	movcs	r3, #4
 80006f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d902      	bls.n	8000704 <NVIC_EncodePriority+0x30>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	3b03      	subs	r3, #3
 8000702:	e000      	b.n	8000706 <NVIC_EncodePriority+0x32>
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43da      	mvns	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	401a      	ands	r2, r3
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800071c:	f04f 31ff 	mov.w	r1, #4294967295
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	43d9      	mvns	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800072c:	4313      	orrs	r3, r2
         );
}
 800072e:	4618      	mov	r0, r3
 8000730:	3724      	adds	r7, #36	; 0x24
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000748:	4907      	ldr	r1, [pc, #28]	; (8000768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4013      	ands	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	40023800 	.word	0x40023800

0800076c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <LL_SYSCFG_SetEXTISource+0x58>)
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	3302      	adds	r3, #2
 800077e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	0c1b      	lsrs	r3, r3, #16
 8000786:	43db      	mvns	r3, r3
 8000788:	ea02 0103 	and.w	r1, r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	0c1b      	lsrs	r3, r3, #16
 8000790:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	fa93 f3a3 	rbit	r3, r3
 8000798:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	fab3 f383 	clz	r3, r3
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	fa03 f202 	lsl.w	r2, r3, r2
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <LL_SYSCFG_SetEXTISource+0x58>)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	430a      	orrs	r2, r1
 80007b2:	3302      	adds	r3, #2
 80007b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	40013800 	.word	0x40013800

080007c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa93 f3a3 	rbit	r3, r3
 80007e2:	613b      	str	r3, [r7, #16]
  return result;
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	fab3 f383 	clz	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	2103      	movs	r1, #3
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	401a      	ands	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	fa93 f3a3 	rbit	r3, r3
 8000802:	61bb      	str	r3, [r7, #24]
  return result;
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fab3 f383 	clz	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	431a      	orrs	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000826:	b480      	push	{r7}
 8000828:	b089      	sub	sp, #36	; 0x24
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	fa93 f3a3 	rbit	r3, r3
 8000840:	613b      	str	r3, [r7, #16]
  return result;
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	fab3 f383 	clz	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	2103      	movs	r1, #3
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	401a      	ands	r2, r3
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	fa93 f3a3 	rbit	r3, r3
 8000860:	61bb      	str	r3, [r7, #24]
  return result;
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	fab3 f383 	clz	r3, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	431a      	orrs	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	60da      	str	r2, [r3, #12]
}
 8000878:	bf00      	nop
 800087a:	3724      	adds	r7, #36	; 0x24
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	619a      	str	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 80008c0:	2010      	movs	r0, #16
 80008c2:	f7ff ff3b 	bl	800073c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80008c6:	2004      	movs	r0, #4
 80008c8:	f7ff ff38 	bl	800073c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80008cc:	2080      	movs	r0, #128	; 0x80
 80008ce:	f7ff ff35 	bl	800073c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff ff32 	bl	800073c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOE, BLUE_LED_Pin|GREEN_LED_Pin);
 80008d8:	2128      	movs	r1, #40	; 0x28
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x164>)
 80008dc:	f7ff ffd2 	bl	8000884 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(RED_LED_GPIO_Port, RED_LED_Pin);
 80008e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e4:	4848      	ldr	r0, [pc, #288]	; (8000a08 <MX_GPIO_Init+0x168>)
 80008e6:	f7ff ffcd 	bl	8000884 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin|GREEN_LED_Pin;
 80008ea:	2328      	movs	r3, #40	; 0x28
 80008ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ee:	2301      	movs	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fe:	463b      	mov	r3, r7
 8000900:	4619      	mov	r1, r3
 8000902:	4840      	ldr	r0, [pc, #256]	; (8000a04 <MX_GPIO_Init+0x164>)
 8000904:	f000 fec0 	bl	8001688 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800090e:	2301      	movs	r3, #1
 8000910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4839      	ldr	r0, [pc, #228]	; (8000a08 <MX_GPIO_Init+0x168>)
 8000924:	f000 feb0 	bl	8001688 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE11);
 8000928:	4938      	ldr	r1, [pc, #224]	; (8000a0c <MX_GPIO_Init+0x16c>)
 800092a:	2004      	movs	r0, #4
 800092c:	f7ff ff1e 	bl	800076c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE13);
 8000930:	4937      	ldr	r1, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x170>)
 8000932:	2004      	movs	r0, #4
 8000934:	f7ff ff1a 	bl	800076c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE15);
 8000938:	4936      	ldr	r1, [pc, #216]	; (8000a14 <MX_GPIO_Init+0x174>)
 800093a:	2004      	movs	r0, #4
 800093c:	f7ff ff16 	bl	800076c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8000940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000944:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000946:	2301      	movs	r3, #1
 8000948:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800094a:	2300      	movs	r3, #0
 800094c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800094e:	2303      	movs	r3, #3
 8000950:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	4618      	mov	r0, r3
 8000958:	f000 fd10 	bl	800137c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000962:	2301      	movs	r3, #1
 8000964:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000966:	2300      	movs	r3, #0
 8000968:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800096a:	2303      	movs	r3, #3
 800096c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fd02 	bl	800137c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800097c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800097e:	2301      	movs	r3, #1
 8000980:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000982:	2300      	movs	r3, #0
 8000984:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000986:	2303      	movs	r3, #3
 8000988:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fcf4 	bl	800137c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(SW_BLUE_GPIO_Port, SW_BLUE_Pin, LL_GPIO_PULL_UP);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099a:	481a      	ldr	r0, [pc, #104]	; (8000a04 <MX_GPIO_Init+0x164>)
 800099c:	f7ff ff43 	bl	8000826 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW_GREEN_GPIO_Port, SW_GREEN_Pin, LL_GPIO_PULL_UP);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a6:	4817      	ldr	r0, [pc, #92]	; (8000a04 <MX_GPIO_Init+0x164>)
 80009a8:	f7ff ff3d 	bl	8000826 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SW_RED_GPIO_Port, SW_RED_Pin, LL_GPIO_PULL_UP);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0x164>)
 80009b4:	f7ff ff37 	bl	8000826 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SW_BLUE_GPIO_Port, SW_BLUE_Pin, LL_GPIO_MODE_INPUT);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009be:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_GPIO_Init+0x164>)
 80009c0:	f7ff ff02 	bl	80007c8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW_GREEN_GPIO_Port, SW_GREEN_Pin, LL_GPIO_MODE_INPUT);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <MX_GPIO_Init+0x164>)
 80009cc:	f7ff fefc 	bl	80007c8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SW_RED_GPIO_Port, SW_RED_Pin, LL_GPIO_MODE_INPUT);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_GPIO_Init+0x164>)
 80009d8:	f7ff fef6 	bl	80007c8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80009dc:	f7ff fe24 	bl	8000628 <__NVIC_GetPriorityGrouping>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe74 	bl	80006d4 <NVIC_EncodePriority>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4619      	mov	r1, r3
 80009f0:	2028      	movs	r0, #40	; 0x28
 80009f2:	f7ff fe45 	bl	8000680 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f6:	2028      	movs	r0, #40	; 0x28
 80009f8:	f7ff fe24 	bl	8000644 <__NVIC_EnableIRQ>

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	f0000002 	.word	0xf0000002
 8000a10:	00f00003 	.word	0x00f00003
 8000a14:	f0000003 	.word	0xf0000003

08000a18 <__NVIC_SetPriorityGrouping>:
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <LL_RCC_HSI_Enable+0x1c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <LL_RCC_HSI_Enable+0x1c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <LL_RCC_HSI_IsReady+0x20>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	bf0c      	ite	eq
 8000a90:	2301      	moveq	r3, #1
 8000a92:	2300      	movne	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	4904      	ldr	r1, [pc, #16]	; (8000acc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <LL_RCC_SetSysClkSource+0x24>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	f023 0203 	bic.w	r2, r3, #3
 8000ae0:	4904      	ldr	r1, [pc, #16]	; (8000af4 <LL_RCC_SetSysClkSource+0x24>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	608b      	str	r3, [r1, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40023800 	.word	0x40023800

08000af8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <LL_RCC_GetSysClkSource+0x18>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	f003 030c 	and.w	r3, r3, #12
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <LL_RCC_SetAHBPrescaler+0x24>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40023800 	.word	0x40023800

08000b3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	608b      	str	r3, [r1, #8]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800

08000b64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b74:	4904      	ldr	r1, [pc, #16]	; (8000b88 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	40023800 	.word	0x40023800

08000b8c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40023800 	.word	0x40023800

08000bbc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	40023800 	.word	0x40023800

08000bec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <LL_FLASH_SetLatency+0x24>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 0207 	bic.w	r2, r3, #7
 8000bfc:	4904      	ldr	r1, [pc, #16]	; (8000c10 <LL_FLASH_SetLatency+0x24>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40023c00 	.word	0x40023c00

08000c14 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <LL_FLASH_GetLatency+0x18>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000c40:	4904      	ldr	r1, [pc, #16]	; (8000c54 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	600b      	str	r3, [r1, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40007000 	.word	0x40007000

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c60:	f7ff ffac 	bl	8000bbc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c68:	f7ff ff90 	bl	8000b8c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f7ff fed3 	bl	8000a18 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f813 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f7ff fe13 	bl	80008a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000c7a:	f000 fa5d 	bl	8001138 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World!\r\n");
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <main+0x38>)
 8000c80:	f001 f9ea 	bl	8002058 <puts>
  DEBUG_PRINT(WORD_OK, "初始化GPIO和USART成功");
 8000c84:	4903      	ldr	r1, [pc, #12]	; (8000c94 <main+0x3c>)
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <main+0x40>)
 8000c88:	f7ff fca8 	bl	80005dc <DEBUG_PRINT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <main+0x34>
 8000c8e:	bf00      	nop
 8000c90:	08002f04 	.word	0x08002f04
 8000c94:	08002f14 	.word	0x08002f14
 8000c98:	08002f30 	.word	0x08002f30

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ffa3 	bl	8000bec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffb4 	bl	8000c14 <LL_FLASH_GetLatency>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1fa      	bne.n	8000ca8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000cb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cb6:	f7ff ffbb 	bl	8000c30 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000cba:	2010      	movs	r0, #16
 8000cbc:	f7ff fef2 	bl	8000aa4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000cc0:	f7ff fece 	bl	8000a60 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000cc4:	bf00      	nop
 8000cc6:	f7ff fedb 	bl	8000a80 <LL_RCC_HSI_IsReady>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d1fa      	bne.n	8000cc6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff ff1f 	bl	8000b14 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff30 	bl	8000b3c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff41 	bl	8000b64 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fef4 	bl	8000ad0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000ce8:	bf00      	nop
 8000cea:	f7ff ff05 	bl	8000af8 <LL_RCC_GetSysClkSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1fa      	bne.n	8000cea <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <SystemClock_Config+0x68>)
 8000cf6:	f001 f8d9 	bl	8001eac <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000cfa:	4802      	ldr	r0, [pc, #8]	; (8000d04 <SystemClock_Config+0x68>)
 8000cfc:	f001 f8e4 	bl	8001ec8 <LL_SetSystemCoreClock>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	00f42400 	.word	0x00f42400

08000d08 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000d12:	695a      	ldr	r2, [r3, #20]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4013      	ands	r3, r2
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	bf0c      	ite	eq
 8000d1e:	2301      	moveq	r3, #1
 8000d20:	2300      	movne	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40013c00 	.word	0x40013c00

08000d34 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6153      	str	r3, [r2, #20]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40013c00 	.word	0x40013c00

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8000dbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dc0:	f7ff ffa2 	bl	8000d08 <LL_EXTI_IsActiveFlag_0_31>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <EXTI15_10_IRQHandler+0x1e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8000dca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dce:	f7ff ffb1 	bl	8000d34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */
    SW_BLUE_EXTI_Callback();
 8000dd2:	f7ff fc13 	bl	80005fc <SW_BLUE_EXTI_Callback>
    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8000dd6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dda:	f7ff ff95 	bl	8000d08 <LL_EXTI_IsActiveFlag_0_31>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d005      	beq.n	8000df0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8000de4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000de8:	f7ff ffa4 	bl	8000d34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    SW_GREEN_EXTI_Callback();
 8000dec:	f7ff fc0d 	bl	800060a <SW_GREEN_EXTI_Callback>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8000df0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000df4:	f7ff ff88 	bl	8000d08 <LL_EXTI_IsActiveFlag_0_31>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <EXTI15_10_IRQHandler+0x52>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8000dfe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e02:	f7ff ff97 	bl	8000d34 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15 */
    SW_RED_EXTI_Callback();
 8000e06:	f7ff fc07 	bl	8000618 <SW_RED_EXTI_Callback>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e00a      	b.n	8000e36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e20:	f3af 8000 	nop.w
 8000e24:	4601      	mov	r1, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1c5a      	adds	r2, r3, #1
 8000e2a:	60ba      	str	r2, [r7, #8]
 8000e2c:	b2ca      	uxtb	r2, r1
 8000e2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dbf0      	blt.n	8000e20 <_read+0x12>
	}

return len;
 8000e3e:	687b      	ldr	r3, [r7, #4]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e009      	b.n	8000e6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1c5a      	adds	r2, r3, #1
 8000e5e:	60ba      	str	r2, [r7, #8]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fba2 	bl	80005ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbf1      	blt.n	8000e5a <_write+0x12>
	}
	return len;
 8000e76:	687b      	ldr	r3, [r7, #4]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_close>:

int _close(int file)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea8:	605a      	str	r2, [r3, #4]
	return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_isatty>:

int _isatty(int file)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	return 1;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
	return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f000 ffe6 	bl	8001ee8 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	20000084 	.word	0x20000084
 8000f50:	200000a0 	.word	0x200000a0

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <LL_AHB1_GRP1_EnableClock>:
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4013      	ands	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40023800 	.word	0x40023800

080010bc <LL_APB2_GRP1_EnableClock>:
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4013      	ands	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	40023800 	.word	0x40023800

080010ec <LL_USART_Enable>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_USART_ConfigAsyncMode>:
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	615a      	str	r2, [r3, #20]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08e      	sub	sp, #56	; 0x38
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001162:	2010      	movs	r0, #16
 8001164:	f7ff ffaa 	bl	80010bc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff ff8f 	bl	800108c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800116e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001174:	2302      	movs	r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001184:	2307      	movs	r3, #7
 8001186:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4818      	ldr	r0, [pc, #96]	; (80011f0 <MX_USART1_UART_Init+0xb8>)
 800118e:	f000 fa7b 	bl	8001688 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001192:	f7ff fef1 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 8001196:	4603      	mov	r3, r0
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff41 	bl	8001024 <NVIC_EncodePriority>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4619      	mov	r1, r3
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	f7ff ff12 	bl	8000fd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80011ac:	2025      	movs	r0, #37	; 0x25
 80011ae:	f7ff fef1 	bl	8000f94 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80011b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80011b6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011c4:	230c      	movs	r3, #12
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_USART1_UART_Init+0xbc>)
 80011d8:	f000 fdce 	bl	8001d78 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART1_UART_Init+0xbc>)
 80011de:	f7ff ff95 	bl	800110c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80011e2:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_USART1_UART_Init+0xbc>)
 80011e4:	f7ff ff82 	bl	80010ec <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40011000 	.word	0x40011000

080011f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800120c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001222:	f7ff fe97 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001226:	f000 fe65 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122a:	f7ff fd15 	bl	8000c58 <main>
  bx  lr    
 800122e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001230:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800123c:	08002ff8 	.word	0x08002ff8
  ldr r2, =_sbss
 8001240:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001244:	200000a0 	.word	0x200000a0

08001248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <LL_EXTI_EnableIT_0_31>:
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <LL_EXTI_EnableIT_0_31+0x20>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4904      	ldr	r1, [pc, #16]	; (800126c <LL_EXTI_EnableIT_0_31+0x20>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40013c00 	.word	0x40013c00

08001270 <LL_EXTI_DisableIT_0_31>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <LL_EXTI_DisableIT_0_31+0x24>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	43db      	mvns	r3, r3
 8001280:	4904      	ldr	r1, [pc, #16]	; (8001294 <LL_EXTI_DisableIT_0_31+0x24>)
 8001282:	4013      	ands	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40013c00 	.word	0x40013c00

08001298 <LL_EXTI_EnableEvent_0_31>:
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40013c00 	.word	0x40013c00

080012bc <LL_EXTI_DisableEvent_0_31>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80012ce:	4013      	ands	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	4904      	ldr	r1, [pc, #16]	; (8001304 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40013c00 	.word	0x40013c00

08001308 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	43db      	mvns	r3, r3
 8001318:	4904      	ldr	r1, [pc, #16]	; (800132c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800131a:	4013      	ands	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40013c00 	.word	0x40013c00

08001330 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40013c00 	.word	0x40013c00

08001354 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	43db      	mvns	r3, r3
 8001364:	4904      	ldr	r1, [pc, #16]	; (8001378 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001366:	4013      	ands	r3, r2
 8001368:	60cb      	str	r3, [r1, #12]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40013c00 	.word	0x40013c00

0800137c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d065      	beq.n	800145c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d06c      	beq.n	8001472 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	795b      	ldrb	r3, [r3, #5]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d01c      	beq.n	80013da <LL_EXTI_Init+0x5e>
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	dc25      	bgt.n	80013f0 <LL_EXTI_Init+0x74>
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <LL_EXTI_Init+0x32>
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d00b      	beq.n	80013c4 <LL_EXTI_Init+0x48>
 80013ac:	e020      	b.n	80013f0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff82 	bl	80012bc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff45 	bl	800124c <LL_EXTI_EnableIT_0_31>
          break;
 80013c2:	e018      	b.n	80013f6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff51 	bl	8001270 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff60 	bl	8001298 <LL_EXTI_EnableEvent_0_31>
          break;
 80013d8:	e00d      	b.n	80013f6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff34 	bl	800124c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff55 	bl	8001298 <LL_EXTI_EnableEvent_0_31>
          break;
 80013ee:	e002      	b.n	80013f6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
          break;
 80013f4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	799b      	ldrb	r3, [r3, #6]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d039      	beq.n	8001472 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	799b      	ldrb	r3, [r3, #6]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d01c      	beq.n	8001440 <LL_EXTI_Init+0xc4>
 8001406:	2b03      	cmp	r3, #3
 8001408:	dc25      	bgt.n	8001456 <LL_EXTI_Init+0xda>
 800140a:	2b01      	cmp	r3, #1
 800140c:	d002      	beq.n	8001414 <LL_EXTI_Init+0x98>
 800140e:	2b02      	cmp	r3, #2
 8001410:	d00b      	beq.n	800142a <LL_EXTI_Init+0xae>
 8001412:	e020      	b.n	8001456 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff9b 	bl	8001354 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff5e 	bl	80012e4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001428:	e024      	b.n	8001474 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff6a 	bl	8001308 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff79 	bl	8001330 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800143e:	e019      	b.n	8001474 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff4d 	bl	80012e4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff6e 	bl	8001330 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001454:	e00e      	b.n	8001474 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
            break;
 800145a:	e00b      	b.n	8001474 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff05 	bl	8001270 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff26 	bl	80012bc <LL_EXTI_DisableEvent_0_31>
 8001470:	e000      	b.n	8001474 <LL_EXTI_Init+0xf8>
      }
 8001472:	bf00      	nop
  }
  return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <LL_GPIO_SetPinMode>:
{
 800147e:	b480      	push	{r7}
 8001480:	b089      	sub	sp, #36	; 0x24
 8001482:	af00      	add	r7, sp, #0
 8001484:	60f8      	str	r0, [r7, #12]
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	613b      	str	r3, [r7, #16]
  return result;
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2103      	movs	r1, #3
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	401a      	ands	r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	61bb      	str	r3, [r7, #24]
  return result;
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	3724      	adds	r7, #36	; 0x24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_GPIO_SetPinOutputType>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	401a      	ands	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	431a      	orrs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_GPIO_SetPinSpeed>:
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	613b      	str	r3, [r7, #16]
  return result;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2103      	movs	r1, #3
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	401a      	ands	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	61bb      	str	r3, [r7, #24]
  return result;
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	609a      	str	r2, [r3, #8]
}
 800155e:	bf00      	nop
 8001560:	3724      	adds	r7, #36	; 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_GPIO_SetPinPull>:
{
 800156a:	b480      	push	{r7}
 800156c:	b089      	sub	sp, #36	; 0x24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	613b      	str	r3, [r7, #16]
  return result;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2103      	movs	r1, #3
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	401a      	ands	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa93 f3a3 	rbit	r3, r3
 80015a4:	61bb      	str	r3, [r7, #24]
  return result;
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	60da      	str	r2, [r3, #12]
}
 80015bc:	bf00      	nop
 80015be:	3724      	adds	r7, #36	; 0x24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_GPIO_SetAFPin_0_7>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a1a      	ldr	r2, [r3, #32]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	613b      	str	r3, [r7, #16]
  return result;
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	210f      	movs	r1, #15
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	401a      	ands	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	61bb      	str	r3, [r7, #24]
  return result;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	431a      	orrs	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	621a      	str	r2, [r3, #32]
}
 800161a:	bf00      	nop
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_GPIO_SetAFPin_8_15>:
{
 8001626:	b480      	push	{r7}
 8001628:	b089      	sub	sp, #36	; 0x24
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	613b      	str	r3, [r7, #16]
  return result;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	210f      	movs	r1, #15
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	61bb      	str	r3, [r7, #24]
  return result;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800167c:	bf00      	nop
 800167e:	3724      	adds	r7, #36	; 0x24
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	613b      	str	r3, [r7, #16]
  return result;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80016b2:	e050      	b.n	8001756 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d042      	beq.n	8001750 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d003      	beq.n	80016da <LL_GPIO_Init+0x52>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d10d      	bne.n	80016f6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	461a      	mov	r2, r3
 80016e0:	69b9      	ldr	r1, [r7, #24]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff12 	bl	800150c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fef3 	bl	80014dc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	461a      	mov	r2, r3
 80016fc:	69b9      	ldr	r1, [r7, #24]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ff33 	bl	800156a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d11a      	bne.n	8001742 <LL_GPIO_Init+0xba>
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	60bb      	str	r3, [r7, #8]
  return result;
 8001718:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b07      	cmp	r3, #7
 8001722:	d807      	bhi.n	8001734 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	461a      	mov	r2, r3
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff4b 	bl	80015c8 <LL_GPIO_SetAFPin_0_7>
 8001732:	e006      	b.n	8001742 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	461a      	mov	r2, r3
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff72 	bl	8001626 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	461a      	mov	r2, r3
 8001748:	69b9      	ldr	r1, [r7, #24]
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fe97 	bl	800147e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	3301      	adds	r3, #1
 8001754:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1a7      	bne.n	80016b4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <LL_RCC_GetSysClkSource>:
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <LL_RCC_GetSysClkSource+0x18>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <LL_RCC_GetAPB2Prescaler+0x18>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <LL_RCC_PLL_GetMainSource+0x18>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <LL_RCC_PLL_GetN+0x18>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023800 	.word	0x40023800

08001818 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <LL_RCC_PLL_GetP+0x18>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <LL_RCC_PLL_GetDivider+0x18>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001858:	f000 f820 	bl	800189c <RCC_GetSystemClockFreq>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f840 	bl	80018ec <RCC_GetHCLKClockFreq>
 800186c:	4602      	mov	r2, r0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f84e 	bl	8001918 <RCC_GetPCLK1ClockFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f85a 	bl	8001940 <RCC_GetPCLK2ClockFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60da      	str	r2, [r3, #12]
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80018a6:	f7ff ff63 	bl	8001770 <LL_RCC_GetSysClkSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00c      	beq.n	80018ca <RCC_GetSystemClockFreq+0x2e>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d80f      	bhi.n	80018d4 <RCC_GetSystemClockFreq+0x38>
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <RCC_GetSystemClockFreq+0x22>
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d003      	beq.n	80018c4 <RCC_GetSystemClockFreq+0x28>
 80018bc:	e00a      	b.n	80018d4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <RCC_GetSystemClockFreq+0x48>)
 80018c0:	607b      	str	r3, [r7, #4]
      break;
 80018c2:	e00a      	b.n	80018da <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <RCC_GetSystemClockFreq+0x4c>)
 80018c6:	607b      	str	r3, [r7, #4]
      break;
 80018c8:	e007      	b.n	80018da <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80018ca:	2008      	movs	r0, #8
 80018cc:	f000 f84c 	bl	8001968 <RCC_PLL_GetFreqDomain_SYS>
 80018d0:	6078      	str	r0, [r7, #4]
      break;
 80018d2:	e002      	b.n	80018da <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <RCC_GetSystemClockFreq+0x48>)
 80018d6:	607b      	str	r3, [r7, #4]
      break;
 80018d8:	bf00      	nop
  }

  return frequency;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	00f42400 	.word	0x00f42400
 80018e8:	017d7840 	.word	0x017d7840

080018ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80018f4:	f7ff ff4a 	bl	800178c <LL_RCC_GetAHBPrescaler>
 80018f8:	4603      	mov	r3, r0
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <RCC_GetHCLKClockFreq+0x28>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	40d3      	lsrs	r3, r2
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	08002f38 	.word	0x08002f38

08001918 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001920:	f7ff ff42 	bl	80017a8 <LL_RCC_GetAPB1Prescaler>
 8001924:	4603      	mov	r3, r0
 8001926:	0a9b      	lsrs	r3, r3, #10
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <RCC_GetPCLK1ClockFreq+0x24>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	40d3      	lsrs	r3, r2
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	08002f48 	.word	0x08002f48

08001940 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001948:	f7ff ff3c 	bl	80017c4 <LL_RCC_GetAPB2Prescaler>
 800194c:	4603      	mov	r3, r0
 800194e:	0b5b      	lsrs	r3, r3, #13
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <RCC_GetPCLK2ClockFreq+0x24>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	40d3      	lsrs	r3, r2
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	08002f48 	.word	0x08002f48

08001968 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800197c:	f7ff ff30 	bl	80017e0 <LL_RCC_PLL_GetMainSource>
 8001980:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198e:	d003      	beq.n	8001998 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001990:	e005      	b.n	800199e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001994:	617b      	str	r3, [r7, #20]
      break;
 8001996:	e005      	b.n	80019a4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800199a:	617b      	str	r3, [r7, #20]
      break;
 800199c:	e002      	b.n	80019a4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80019a0:	617b      	str	r3, [r7, #20]
      break;
 80019a2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d113      	bne.n	80019d2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80019aa:	f7ff ff43 	bl	8001834 <LL_RCC_PLL_GetDivider>
 80019ae:	4602      	mov	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fbb3 f4f2 	udiv	r4, r3, r2
 80019b6:	f7ff ff21 	bl	80017fc <LL_RCC_PLL_GetN>
 80019ba:	4603      	mov	r3, r0
 80019bc:	fb03 f404 	mul.w	r4, r3, r4
 80019c0:	f7ff ff2a 	bl	8001818 <LL_RCC_PLL_GetP>
 80019c4:	4603      	mov	r3, r0
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	3301      	adds	r3, #1
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80019d0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80019d2:	693b      	ldr	r3, [r7, #16]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	00f42400 	.word	0x00f42400
 80019e0:	017d7840 	.word	0x017d7840

080019e4 <LL_USART_IsEnabled>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f8:	bf0c      	ite	eq
 80019fa:	2301      	moveq	r3, #1
 80019fc:	2300      	movne	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_USART_SetStopBitsLength>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_USART_SetHWFlowCtrl>:
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	615a      	str	r2, [r3, #20]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_USART_SetBaudRate>:
{
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5c:	b09f      	sub	sp, #124	; 0x7c
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6778      	str	r0, [r7, #116]	; 0x74
 8001a62:	6739      	str	r1, [r7, #112]	; 0x70
 8001a64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a66:	66bb      	str	r3, [r7, #104]	; 0x68
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6e:	f040 80bc 	bne.w	8001bea <LL_USART_SetBaudRate+0x192>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a74:	461c      	mov	r4, r3
 8001a76:	f04f 0500 	mov.w	r5, #0
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	eb12 0a02 	adds.w	sl, r2, r2
 8001a82:	eb43 0b03 	adc.w	fp, r3, r3
 8001a86:	4652      	mov	r2, sl
 8001a88:	465b      	mov	r3, fp
 8001a8a:	1912      	adds	r2, r2, r4
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	00d9      	lsls	r1, r3, #3
 8001a9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9e:	00d0      	lsls	r0, r2, #3
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	1911      	adds	r1, r2, r4
 8001aa6:	6639      	str	r1, [r7, #96]	; 0x60
 8001aa8:	416b      	adcs	r3, r5
 8001aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8001aac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	1891      	adds	r1, r2, r2
 8001ab6:	6339      	str	r1, [r7, #48]	; 0x30
 8001ab8:	415b      	adcs	r3, r3
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
 8001abc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ac0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ac4:	f7fe fbd4 	bl	8000270 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4ba9      	ldr	r3, [pc, #676]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001ace:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	b29e      	uxth	r6, r3
 8001ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001adc:	461c      	mov	r4, r3
 8001ade:	f04f 0500 	mov.w	r5, #0
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	1891      	adds	r1, r2, r2
 8001ae8:	62b9      	str	r1, [r7, #40]	; 0x28
 8001aea:	415b      	adcs	r3, r3
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001af2:	1912      	adds	r2, r2, r4
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	00d9      	lsls	r1, r3, #3
 8001b02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b06:	00d0      	lsls	r0, r2, #3
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	1911      	adds	r1, r2, r4
 8001b0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b10:	416b      	adcs	r3, r5
 8001b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b16:	461a      	mov	r2, r3
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	1891      	adds	r1, r2, r2
 8001b1e:	6239      	str	r1, [r7, #32]
 8001b20:	415b      	adcs	r3, r3
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b28:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b2c:	f7fe fba0 	bl	8000270 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001b36:	fba3 1302 	umull	r1, r3, r3, r2
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2164      	movs	r1, #100	; 0x64
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	3332      	adds	r3, #50	; 0x32
 8001b48:	4a8a      	ldr	r2, [pc, #552]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4433      	add	r3, r6
 8001b5e:	b29e      	uxth	r6, r3
 8001b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b62:	4618      	mov	r0, r3
 8001b64:	f04f 0100 	mov.w	r1, #0
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	1894      	adds	r4, r2, r2
 8001b6e:	61bc      	str	r4, [r7, #24]
 8001b70:	415b      	adcs	r3, r3
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b78:	1812      	adds	r2, r2, r0
 8001b7a:	eb41 0303 	adc.w	r3, r1, r3
 8001b7e:	f04f 0400 	mov.w	r4, #0
 8001b82:	f04f 0500 	mov.w	r5, #0
 8001b86:	00dd      	lsls	r5, r3, #3
 8001b88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001b8c:	00d4      	lsls	r4, r2, #3
 8001b8e:	4622      	mov	r2, r4
 8001b90:	462b      	mov	r3, r5
 8001b92:	1814      	adds	r4, r2, r0
 8001b94:	653c      	str	r4, [r7, #80]	; 0x50
 8001b96:	414b      	adcs	r3, r1
 8001b98:	657b      	str	r3, [r7, #84]	; 0x54
 8001b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	1891      	adds	r1, r2, r2
 8001ba4:	6139      	str	r1, [r7, #16]
 8001ba6:	415b      	adcs	r3, r3
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001bb2:	f7fe fb5d 	bl	8000270 <__aeabi_uldivmod>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4b6e      	ldr	r3, [pc, #440]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc0:	095b      	lsrs	r3, r3, #5
 8001bc2:	2164      	movs	r1, #100	; 0x64
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	3332      	adds	r3, #50	; 0x32
 8001bce:	4a69      	ldr	r2, [pc, #420]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	095b      	lsrs	r3, r3, #5
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4433      	add	r3, r6
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be6:	609a      	str	r2, [r3, #8]
}
 8001be8:	e0be      	b.n	8001d68 <LL_USART_SetBaudRate+0x310>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bec:	461c      	mov	r4, r3
 8001bee:	f04f 0500 	mov.w	r5, #0
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	462b      	mov	r3, r5
 8001bf6:	eb12 0802 	adds.w	r8, r2, r2
 8001bfa:	eb43 0903 	adc.w	r9, r3, r3
 8001bfe:	4642      	mov	r2, r8
 8001c00:	464b      	mov	r3, r9
 8001c02:	1912      	adds	r2, r2, r4
 8001c04:	eb45 0303 	adc.w	r3, r5, r3
 8001c08:	f04f 0000 	mov.w	r0, #0
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	00d9      	lsls	r1, r3, #3
 8001c12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c16:	00d0      	lsls	r0, r2, #3
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	1911      	adds	r1, r2, r4
 8001c1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c20:	416b      	adcs	r3, r5
 8001c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c26:	4618      	mov	r0, r3
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	008b      	lsls	r3, r1, #2
 8001c36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001c3a:	0082      	lsls	r2, r0, #2
 8001c3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c40:	f7fe fb16 	bl	8000270 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	b29e      	uxth	r6, r3
 8001c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	1894      	adds	r4, r2, r2
 8001c64:	60bc      	str	r4, [r7, #8]
 8001c66:	415b      	adcs	r3, r3
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c6e:	1812      	adds	r2, r2, r0
 8001c70:	eb41 0303 	adc.w	r3, r1, r3
 8001c74:	f04f 0400 	mov.w	r4, #0
 8001c78:	f04f 0500 	mov.w	r5, #0
 8001c7c:	00dd      	lsls	r5, r3, #3
 8001c7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001c82:	00d4      	lsls	r4, r2, #3
 8001c84:	4622      	mov	r2, r4
 8001c86:	462b      	mov	r3, r5
 8001c88:	1814      	adds	r4, r2, r0
 8001c8a:	643c      	str	r4, [r7, #64]	; 0x40
 8001c8c:	414b      	adcs	r3, r1
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c92:	4618      	mov	r0, r3
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	008b      	lsls	r3, r1, #2
 8001ca2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001ca6:	0082      	lsls	r2, r0, #2
 8001ca8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cac:	f7fe fae0 	bl	8000270 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	2164      	movs	r1, #100	; 0x64
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	3332      	adds	r3, #50	; 0x32
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4433      	add	r3, r6
 8001cda:	b29e      	uxth	r6, r3
 8001cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	1894      	adds	r4, r2, r2
 8001cea:	603c      	str	r4, [r7, #0]
 8001cec:	415b      	adcs	r3, r3
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cf4:	1812      	adds	r2, r2, r0
 8001cf6:	eb41 0303 	adc.w	r3, r1, r3
 8001cfa:	f04f 0400 	mov.w	r4, #0
 8001cfe:	f04f 0500 	mov.w	r5, #0
 8001d02:	00dd      	lsls	r5, r3, #3
 8001d04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001d08:	00d4      	lsls	r4, r2, #3
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	1814      	adds	r4, r2, r0
 8001d10:	63bc      	str	r4, [r7, #56]	; 0x38
 8001d12:	414b      	adcs	r3, r1
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	008b      	lsls	r3, r1, #2
 8001d28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001d2c:	0082      	lsls	r2, r0, #2
 8001d2e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d32:	f7fe fa9d 	bl	8000270 <__aeabi_uldivmod>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	2164      	movs	r1, #100	; 0x64
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	3332      	adds	r3, #50	; 0x32
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <LL_USART_SetBaudRate+0x31c>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4433      	add	r3, r6
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d66:	609a      	str	r2, [r3, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	377c      	adds	r7, #124	; 0x7c
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d72:	bf00      	nop
 8001d74:	51eb851f 	.word	0x51eb851f

08001d78 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fe2a 	bl	80019e4 <LL_USART_IsEnabled>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d15e      	bne.n	8001e54 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d9e:	f023 030c 	bic.w	r3, r3, #12
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	6851      	ldr	r1, [r2, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	68d2      	ldr	r2, [r2, #12]
 8001daa:	4311      	orrs	r1, r2
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	6912      	ldr	r2, [r2, #16]
 8001db0:	4311      	orrs	r1, r2
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	6992      	ldr	r2, [r2, #24]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff fe21 	bl	8001a0c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fe2e 	bl	8001a32 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fd38 	bl	8001850 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <LL_USART_Init+0xe8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d102      	bne.n	8001dee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e021      	b.n	8001e32 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <LL_USART_Init+0xec>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d102      	bne.n	8001dfc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	e01a      	b.n	8001e32 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <LL_USART_Init+0xf0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d102      	bne.n	8001e0a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	e013      	b.n	8001e32 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <LL_USART_Init+0xf4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d102      	bne.n	8001e18 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	e00c      	b.n	8001e32 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <LL_USART_Init+0xf8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d102      	bne.n	8001e26 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	e005      	b.n	8001e32 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <LL_USART_Init+0xfc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fe02 	bl	8001a58 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40004400 	.word	0x40004400
 8001e68:	40004800 	.word	0x40004800
 8001e6c:	40011400 	.word	0x40011400
 8001e70:	40004c00 	.word	0x40004c00
 8001e74:	40005000 	.word	0x40005000

08001e78 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <LL_InitTick+0x30>)
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <LL_InitTick+0x30>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e96:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <LL_InitTick+0x30>)
 8001e98:	2205      	movs	r2, #5
 8001e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000e010 	.word	0xe000e010

08001eac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ffdd 	bl	8001e78 <LL_InitTick>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <LL_SetSystemCoreClock+0x1c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000000 	.word	0x20000000

08001ee8 <__errno>:
 8001ee8:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <__errno+0x8>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	4d0d      	ldr	r5, [pc, #52]	; (8001f2c <__libc_init_array+0x38>)
 8001ef8:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efa:	1b64      	subs	r4, r4, r5
 8001efc:	10a4      	asrs	r4, r4, #2
 8001efe:	2600      	movs	r6, #0
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	4d0b      	ldr	r5, [pc, #44]	; (8001f34 <__libc_init_array+0x40>)
 8001f06:	4c0c      	ldr	r4, [pc, #48]	; (8001f38 <__libc_init_array+0x44>)
 8001f08:	f000 ffec 	bl	8002ee4 <_init>
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	2600      	movs	r6, #0
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08002ff0 	.word	0x08002ff0
 8001f30:	08002ff0 	.word	0x08002ff0
 8001f34:	08002ff0 	.word	0x08002ff0
 8001f38:	08002ff4 	.word	0x08002ff4

08001f3c <memset>:
 8001f3c:	4402      	add	r2, r0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <iprintf>:
 8001f4c:	b40f      	push	{r0, r1, r2, r3}
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <iprintf+0x2c>)
 8001f50:	b513      	push	{r0, r1, r4, lr}
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	b124      	cbz	r4, 8001f60 <iprintf+0x14>
 8001f56:	69a3      	ldr	r3, [r4, #24]
 8001f58:	b913      	cbnz	r3, 8001f60 <iprintf+0x14>
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f000 fa5e 	bl	800241c <__sinit>
 8001f60:	ab05      	add	r3, sp, #20
 8001f62:	9a04      	ldr	r2, [sp, #16]
 8001f64:	68a1      	ldr	r1, [r4, #8]
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fc2f 	bl	80027cc <_vfiprintf_r>
 8001f6e:	b002      	add	sp, #8
 8001f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f74:	b004      	add	sp, #16
 8001f76:	4770      	bx	lr
 8001f78:	20000004 	.word	0x20000004

08001f7c <_puts_r>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	460e      	mov	r6, r1
 8001f80:	4605      	mov	r5, r0
 8001f82:	b118      	cbz	r0, 8001f8c <_puts_r+0x10>
 8001f84:	6983      	ldr	r3, [r0, #24]
 8001f86:	b90b      	cbnz	r3, 8001f8c <_puts_r+0x10>
 8001f88:	f000 fa48 	bl	800241c <__sinit>
 8001f8c:	69ab      	ldr	r3, [r5, #24]
 8001f8e:	68ac      	ldr	r4, [r5, #8]
 8001f90:	b913      	cbnz	r3, 8001f98 <_puts_r+0x1c>
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 fa42 	bl	800241c <__sinit>
 8001f98:	4b2c      	ldr	r3, [pc, #176]	; (800204c <_puts_r+0xd0>)
 8001f9a:	429c      	cmp	r4, r3
 8001f9c:	d120      	bne.n	8001fe0 <_puts_r+0x64>
 8001f9e:	686c      	ldr	r4, [r5, #4]
 8001fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001fa2:	07db      	lsls	r3, r3, #31
 8001fa4:	d405      	bmi.n	8001fb2 <_puts_r+0x36>
 8001fa6:	89a3      	ldrh	r3, [r4, #12]
 8001fa8:	0598      	lsls	r0, r3, #22
 8001faa:	d402      	bmi.n	8001fb2 <_puts_r+0x36>
 8001fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fae:	f000 fad3 	bl	8002558 <__retarget_lock_acquire_recursive>
 8001fb2:	89a3      	ldrh	r3, [r4, #12]
 8001fb4:	0719      	lsls	r1, r3, #28
 8001fb6:	d51d      	bpl.n	8001ff4 <_puts_r+0x78>
 8001fb8:	6923      	ldr	r3, [r4, #16]
 8001fba:	b1db      	cbz	r3, 8001ff4 <_puts_r+0x78>
 8001fbc:	3e01      	subs	r6, #1
 8001fbe:	68a3      	ldr	r3, [r4, #8]
 8001fc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	60a3      	str	r3, [r4, #8]
 8001fc8:	bb39      	cbnz	r1, 800201a <_puts_r+0x9e>
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da38      	bge.n	8002040 <_puts_r+0xc4>
 8001fce:	4622      	mov	r2, r4
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f000 f848 	bl	8002068 <__swbuf_r>
 8001fd8:	3001      	adds	r0, #1
 8001fda:	d011      	beq.n	8002000 <_puts_r+0x84>
 8001fdc:	250a      	movs	r5, #10
 8001fde:	e011      	b.n	8002004 <_puts_r+0x88>
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <_puts_r+0xd4>)
 8001fe2:	429c      	cmp	r4, r3
 8001fe4:	d101      	bne.n	8001fea <_puts_r+0x6e>
 8001fe6:	68ac      	ldr	r4, [r5, #8]
 8001fe8:	e7da      	b.n	8001fa0 <_puts_r+0x24>
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <_puts_r+0xd8>)
 8001fec:	429c      	cmp	r4, r3
 8001fee:	bf08      	it	eq
 8001ff0:	68ec      	ldreq	r4, [r5, #12]
 8001ff2:	e7d5      	b.n	8001fa0 <_puts_r+0x24>
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	4628      	mov	r0, r5
 8001ff8:	f000 f888 	bl	800210c <__swsetup_r>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	d0dd      	beq.n	8001fbc <_puts_r+0x40>
 8002000:	f04f 35ff 	mov.w	r5, #4294967295
 8002004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002006:	07da      	lsls	r2, r3, #31
 8002008:	d405      	bmi.n	8002016 <_puts_r+0x9a>
 800200a:	89a3      	ldrh	r3, [r4, #12]
 800200c:	059b      	lsls	r3, r3, #22
 800200e:	d402      	bmi.n	8002016 <_puts_r+0x9a>
 8002010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002012:	f000 faa2 	bl	800255a <__retarget_lock_release_recursive>
 8002016:	4628      	mov	r0, r5
 8002018:	bd70      	pop	{r4, r5, r6, pc}
 800201a:	2b00      	cmp	r3, #0
 800201c:	da04      	bge.n	8002028 <_puts_r+0xac>
 800201e:	69a2      	ldr	r2, [r4, #24]
 8002020:	429a      	cmp	r2, r3
 8002022:	dc06      	bgt.n	8002032 <_puts_r+0xb6>
 8002024:	290a      	cmp	r1, #10
 8002026:	d004      	beq.n	8002032 <_puts_r+0xb6>
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	6022      	str	r2, [r4, #0]
 800202e:	7019      	strb	r1, [r3, #0]
 8002030:	e7c5      	b.n	8001fbe <_puts_r+0x42>
 8002032:	4622      	mov	r2, r4
 8002034:	4628      	mov	r0, r5
 8002036:	f000 f817 	bl	8002068 <__swbuf_r>
 800203a:	3001      	adds	r0, #1
 800203c:	d1bf      	bne.n	8001fbe <_puts_r+0x42>
 800203e:	e7df      	b.n	8002000 <_puts_r+0x84>
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	250a      	movs	r5, #10
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	6022      	str	r2, [r4, #0]
 8002048:	701d      	strb	r5, [r3, #0]
 800204a:	e7db      	b.n	8002004 <_puts_r+0x88>
 800204c:	08002f74 	.word	0x08002f74
 8002050:	08002f94 	.word	0x08002f94
 8002054:	08002f54 	.word	0x08002f54

08002058 <puts>:
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <puts+0xc>)
 800205a:	4601      	mov	r1, r0
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	f7ff bf8d 	b.w	8001f7c <_puts_r>
 8002062:	bf00      	nop
 8002064:	20000004 	.word	0x20000004

08002068 <__swbuf_r>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	460e      	mov	r6, r1
 800206c:	4614      	mov	r4, r2
 800206e:	4605      	mov	r5, r0
 8002070:	b118      	cbz	r0, 800207a <__swbuf_r+0x12>
 8002072:	6983      	ldr	r3, [r0, #24]
 8002074:	b90b      	cbnz	r3, 800207a <__swbuf_r+0x12>
 8002076:	f000 f9d1 	bl	800241c <__sinit>
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <__swbuf_r+0x98>)
 800207c:	429c      	cmp	r4, r3
 800207e:	d12b      	bne.n	80020d8 <__swbuf_r+0x70>
 8002080:	686c      	ldr	r4, [r5, #4]
 8002082:	69a3      	ldr	r3, [r4, #24]
 8002084:	60a3      	str	r3, [r4, #8]
 8002086:	89a3      	ldrh	r3, [r4, #12]
 8002088:	071a      	lsls	r2, r3, #28
 800208a:	d52f      	bpl.n	80020ec <__swbuf_r+0x84>
 800208c:	6923      	ldr	r3, [r4, #16]
 800208e:	b36b      	cbz	r3, 80020ec <__swbuf_r+0x84>
 8002090:	6923      	ldr	r3, [r4, #16]
 8002092:	6820      	ldr	r0, [r4, #0]
 8002094:	1ac0      	subs	r0, r0, r3
 8002096:	6963      	ldr	r3, [r4, #20]
 8002098:	b2f6      	uxtb	r6, r6
 800209a:	4283      	cmp	r3, r0
 800209c:	4637      	mov	r7, r6
 800209e:	dc04      	bgt.n	80020aa <__swbuf_r+0x42>
 80020a0:	4621      	mov	r1, r4
 80020a2:	4628      	mov	r0, r5
 80020a4:	f000 f926 	bl	80022f4 <_fflush_r>
 80020a8:	bb30      	cbnz	r0, 80020f8 <__swbuf_r+0x90>
 80020aa:	68a3      	ldr	r3, [r4, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60a3      	str	r3, [r4, #8]
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	6022      	str	r2, [r4, #0]
 80020b6:	701e      	strb	r6, [r3, #0]
 80020b8:	6963      	ldr	r3, [r4, #20]
 80020ba:	3001      	adds	r0, #1
 80020bc:	4283      	cmp	r3, r0
 80020be:	d004      	beq.n	80020ca <__swbuf_r+0x62>
 80020c0:	89a3      	ldrh	r3, [r4, #12]
 80020c2:	07db      	lsls	r3, r3, #31
 80020c4:	d506      	bpl.n	80020d4 <__swbuf_r+0x6c>
 80020c6:	2e0a      	cmp	r6, #10
 80020c8:	d104      	bne.n	80020d4 <__swbuf_r+0x6c>
 80020ca:	4621      	mov	r1, r4
 80020cc:	4628      	mov	r0, r5
 80020ce:	f000 f911 	bl	80022f4 <_fflush_r>
 80020d2:	b988      	cbnz	r0, 80020f8 <__swbuf_r+0x90>
 80020d4:	4638      	mov	r0, r7
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <__swbuf_r+0x9c>)
 80020da:	429c      	cmp	r4, r3
 80020dc:	d101      	bne.n	80020e2 <__swbuf_r+0x7a>
 80020de:	68ac      	ldr	r4, [r5, #8]
 80020e0:	e7cf      	b.n	8002082 <__swbuf_r+0x1a>
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <__swbuf_r+0xa0>)
 80020e4:	429c      	cmp	r4, r3
 80020e6:	bf08      	it	eq
 80020e8:	68ec      	ldreq	r4, [r5, #12]
 80020ea:	e7ca      	b.n	8002082 <__swbuf_r+0x1a>
 80020ec:	4621      	mov	r1, r4
 80020ee:	4628      	mov	r0, r5
 80020f0:	f000 f80c 	bl	800210c <__swsetup_r>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d0cb      	beq.n	8002090 <__swbuf_r+0x28>
 80020f8:	f04f 37ff 	mov.w	r7, #4294967295
 80020fc:	e7ea      	b.n	80020d4 <__swbuf_r+0x6c>
 80020fe:	bf00      	nop
 8002100:	08002f74 	.word	0x08002f74
 8002104:	08002f94 	.word	0x08002f94
 8002108:	08002f54 	.word	0x08002f54

0800210c <__swsetup_r>:
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <__swsetup_r+0xcc>)
 800210e:	b570      	push	{r4, r5, r6, lr}
 8002110:	681d      	ldr	r5, [r3, #0]
 8002112:	4606      	mov	r6, r0
 8002114:	460c      	mov	r4, r1
 8002116:	b125      	cbz	r5, 8002122 <__swsetup_r+0x16>
 8002118:	69ab      	ldr	r3, [r5, #24]
 800211a:	b913      	cbnz	r3, 8002122 <__swsetup_r+0x16>
 800211c:	4628      	mov	r0, r5
 800211e:	f000 f97d 	bl	800241c <__sinit>
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <__swsetup_r+0xd0>)
 8002124:	429c      	cmp	r4, r3
 8002126:	d10f      	bne.n	8002148 <__swsetup_r+0x3c>
 8002128:	686c      	ldr	r4, [r5, #4]
 800212a:	89a3      	ldrh	r3, [r4, #12]
 800212c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002130:	0719      	lsls	r1, r3, #28
 8002132:	d42c      	bmi.n	800218e <__swsetup_r+0x82>
 8002134:	06dd      	lsls	r5, r3, #27
 8002136:	d411      	bmi.n	800215c <__swsetup_r+0x50>
 8002138:	2309      	movs	r3, #9
 800213a:	6033      	str	r3, [r6, #0]
 800213c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002140:	81a3      	strh	r3, [r4, #12]
 8002142:	f04f 30ff 	mov.w	r0, #4294967295
 8002146:	e03e      	b.n	80021c6 <__swsetup_r+0xba>
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <__swsetup_r+0xd4>)
 800214a:	429c      	cmp	r4, r3
 800214c:	d101      	bne.n	8002152 <__swsetup_r+0x46>
 800214e:	68ac      	ldr	r4, [r5, #8]
 8002150:	e7eb      	b.n	800212a <__swsetup_r+0x1e>
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <__swsetup_r+0xd8>)
 8002154:	429c      	cmp	r4, r3
 8002156:	bf08      	it	eq
 8002158:	68ec      	ldreq	r4, [r5, #12]
 800215a:	e7e6      	b.n	800212a <__swsetup_r+0x1e>
 800215c:	0758      	lsls	r0, r3, #29
 800215e:	d512      	bpl.n	8002186 <__swsetup_r+0x7a>
 8002160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002162:	b141      	cbz	r1, 8002176 <__swsetup_r+0x6a>
 8002164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002168:	4299      	cmp	r1, r3
 800216a:	d002      	beq.n	8002172 <__swsetup_r+0x66>
 800216c:	4630      	mov	r0, r6
 800216e:	f000 fa59 	bl	8002624 <_free_r>
 8002172:	2300      	movs	r3, #0
 8002174:	6363      	str	r3, [r4, #52]	; 0x34
 8002176:	89a3      	ldrh	r3, [r4, #12]
 8002178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800217c:	81a3      	strh	r3, [r4, #12]
 800217e:	2300      	movs	r3, #0
 8002180:	6063      	str	r3, [r4, #4]
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	6023      	str	r3, [r4, #0]
 8002186:	89a3      	ldrh	r3, [r4, #12]
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	81a3      	strh	r3, [r4, #12]
 800218e:	6923      	ldr	r3, [r4, #16]
 8002190:	b94b      	cbnz	r3, 80021a6 <__swsetup_r+0x9a>
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219c:	d003      	beq.n	80021a6 <__swsetup_r+0x9a>
 800219e:	4621      	mov	r1, r4
 80021a0:	4630      	mov	r0, r6
 80021a2:	f000 f9ff 	bl	80025a4 <__smakebuf_r>
 80021a6:	89a0      	ldrh	r0, [r4, #12]
 80021a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80021ac:	f010 0301 	ands.w	r3, r0, #1
 80021b0:	d00a      	beq.n	80021c8 <__swsetup_r+0xbc>
 80021b2:	2300      	movs	r3, #0
 80021b4:	60a3      	str	r3, [r4, #8]
 80021b6:	6963      	ldr	r3, [r4, #20]
 80021b8:	425b      	negs	r3, r3
 80021ba:	61a3      	str	r3, [r4, #24]
 80021bc:	6923      	ldr	r3, [r4, #16]
 80021be:	b943      	cbnz	r3, 80021d2 <__swsetup_r+0xc6>
 80021c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021c4:	d1ba      	bne.n	800213c <__swsetup_r+0x30>
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
 80021c8:	0781      	lsls	r1, r0, #30
 80021ca:	bf58      	it	pl
 80021cc:	6963      	ldrpl	r3, [r4, #20]
 80021ce:	60a3      	str	r3, [r4, #8]
 80021d0:	e7f4      	b.n	80021bc <__swsetup_r+0xb0>
 80021d2:	2000      	movs	r0, #0
 80021d4:	e7f7      	b.n	80021c6 <__swsetup_r+0xba>
 80021d6:	bf00      	nop
 80021d8:	20000004 	.word	0x20000004
 80021dc:	08002f74 	.word	0x08002f74
 80021e0:	08002f94 	.word	0x08002f94
 80021e4:	08002f54 	.word	0x08002f54

080021e8 <__sflush_r>:
 80021e8:	898a      	ldrh	r2, [r1, #12]
 80021ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021ee:	4605      	mov	r5, r0
 80021f0:	0710      	lsls	r0, r2, #28
 80021f2:	460c      	mov	r4, r1
 80021f4:	d458      	bmi.n	80022a8 <__sflush_r+0xc0>
 80021f6:	684b      	ldr	r3, [r1, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	dc05      	bgt.n	8002208 <__sflush_r+0x20>
 80021fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	dc02      	bgt.n	8002208 <__sflush_r+0x20>
 8002202:	2000      	movs	r0, #0
 8002204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800220a:	2e00      	cmp	r6, #0
 800220c:	d0f9      	beq.n	8002202 <__sflush_r+0x1a>
 800220e:	2300      	movs	r3, #0
 8002210:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002214:	682f      	ldr	r7, [r5, #0]
 8002216:	602b      	str	r3, [r5, #0]
 8002218:	d032      	beq.n	8002280 <__sflush_r+0x98>
 800221a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800221c:	89a3      	ldrh	r3, [r4, #12]
 800221e:	075a      	lsls	r2, r3, #29
 8002220:	d505      	bpl.n	800222e <__sflush_r+0x46>
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	1ac0      	subs	r0, r0, r3
 8002226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002228:	b10b      	cbz	r3, 800222e <__sflush_r+0x46>
 800222a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800222c:	1ac0      	subs	r0, r0, r3
 800222e:	2300      	movs	r3, #0
 8002230:	4602      	mov	r2, r0
 8002232:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002234:	6a21      	ldr	r1, [r4, #32]
 8002236:	4628      	mov	r0, r5
 8002238:	47b0      	blx	r6
 800223a:	1c43      	adds	r3, r0, #1
 800223c:	89a3      	ldrh	r3, [r4, #12]
 800223e:	d106      	bne.n	800224e <__sflush_r+0x66>
 8002240:	6829      	ldr	r1, [r5, #0]
 8002242:	291d      	cmp	r1, #29
 8002244:	d82c      	bhi.n	80022a0 <__sflush_r+0xb8>
 8002246:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <__sflush_r+0x108>)
 8002248:	40ca      	lsrs	r2, r1
 800224a:	07d6      	lsls	r6, r2, #31
 800224c:	d528      	bpl.n	80022a0 <__sflush_r+0xb8>
 800224e:	2200      	movs	r2, #0
 8002250:	6062      	str	r2, [r4, #4]
 8002252:	04d9      	lsls	r1, r3, #19
 8002254:	6922      	ldr	r2, [r4, #16]
 8002256:	6022      	str	r2, [r4, #0]
 8002258:	d504      	bpl.n	8002264 <__sflush_r+0x7c>
 800225a:	1c42      	adds	r2, r0, #1
 800225c:	d101      	bne.n	8002262 <__sflush_r+0x7a>
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	b903      	cbnz	r3, 8002264 <__sflush_r+0x7c>
 8002262:	6560      	str	r0, [r4, #84]	; 0x54
 8002264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002266:	602f      	str	r7, [r5, #0]
 8002268:	2900      	cmp	r1, #0
 800226a:	d0ca      	beq.n	8002202 <__sflush_r+0x1a>
 800226c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002270:	4299      	cmp	r1, r3
 8002272:	d002      	beq.n	800227a <__sflush_r+0x92>
 8002274:	4628      	mov	r0, r5
 8002276:	f000 f9d5 	bl	8002624 <_free_r>
 800227a:	2000      	movs	r0, #0
 800227c:	6360      	str	r0, [r4, #52]	; 0x34
 800227e:	e7c1      	b.n	8002204 <__sflush_r+0x1c>
 8002280:	6a21      	ldr	r1, [r4, #32]
 8002282:	2301      	movs	r3, #1
 8002284:	4628      	mov	r0, r5
 8002286:	47b0      	blx	r6
 8002288:	1c41      	adds	r1, r0, #1
 800228a:	d1c7      	bne.n	800221c <__sflush_r+0x34>
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0c4      	beq.n	800221c <__sflush_r+0x34>
 8002292:	2b1d      	cmp	r3, #29
 8002294:	d001      	beq.n	800229a <__sflush_r+0xb2>
 8002296:	2b16      	cmp	r3, #22
 8002298:	d101      	bne.n	800229e <__sflush_r+0xb6>
 800229a:	602f      	str	r7, [r5, #0]
 800229c:	e7b1      	b.n	8002202 <__sflush_r+0x1a>
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a4:	81a3      	strh	r3, [r4, #12]
 80022a6:	e7ad      	b.n	8002204 <__sflush_r+0x1c>
 80022a8:	690f      	ldr	r7, [r1, #16]
 80022aa:	2f00      	cmp	r7, #0
 80022ac:	d0a9      	beq.n	8002202 <__sflush_r+0x1a>
 80022ae:	0793      	lsls	r3, r2, #30
 80022b0:	680e      	ldr	r6, [r1, #0]
 80022b2:	bf08      	it	eq
 80022b4:	694b      	ldreq	r3, [r1, #20]
 80022b6:	600f      	str	r7, [r1, #0]
 80022b8:	bf18      	it	ne
 80022ba:	2300      	movne	r3, #0
 80022bc:	eba6 0807 	sub.w	r8, r6, r7
 80022c0:	608b      	str	r3, [r1, #8]
 80022c2:	f1b8 0f00 	cmp.w	r8, #0
 80022c6:	dd9c      	ble.n	8002202 <__sflush_r+0x1a>
 80022c8:	6a21      	ldr	r1, [r4, #32]
 80022ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022cc:	4643      	mov	r3, r8
 80022ce:	463a      	mov	r2, r7
 80022d0:	4628      	mov	r0, r5
 80022d2:	47b0      	blx	r6
 80022d4:	2800      	cmp	r0, #0
 80022d6:	dc06      	bgt.n	80022e6 <__sflush_r+0xfe>
 80022d8:	89a3      	ldrh	r3, [r4, #12]
 80022da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022de:	81a3      	strh	r3, [r4, #12]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	e78e      	b.n	8002204 <__sflush_r+0x1c>
 80022e6:	4407      	add	r7, r0
 80022e8:	eba8 0800 	sub.w	r8, r8, r0
 80022ec:	e7e9      	b.n	80022c2 <__sflush_r+0xda>
 80022ee:	bf00      	nop
 80022f0:	20400001 	.word	0x20400001

080022f4 <_fflush_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	690b      	ldr	r3, [r1, #16]
 80022f8:	4605      	mov	r5, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	b913      	cbnz	r3, 8002304 <_fflush_r+0x10>
 80022fe:	2500      	movs	r5, #0
 8002300:	4628      	mov	r0, r5
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	b118      	cbz	r0, 800230e <_fflush_r+0x1a>
 8002306:	6983      	ldr	r3, [r0, #24]
 8002308:	b90b      	cbnz	r3, 800230e <_fflush_r+0x1a>
 800230a:	f000 f887 	bl	800241c <__sinit>
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <_fflush_r+0x6c>)
 8002310:	429c      	cmp	r4, r3
 8002312:	d11b      	bne.n	800234c <_fflush_r+0x58>
 8002314:	686c      	ldr	r4, [r5, #4]
 8002316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0ef      	beq.n	80022fe <_fflush_r+0xa>
 800231e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002320:	07d0      	lsls	r0, r2, #31
 8002322:	d404      	bmi.n	800232e <_fflush_r+0x3a>
 8002324:	0599      	lsls	r1, r3, #22
 8002326:	d402      	bmi.n	800232e <_fflush_r+0x3a>
 8002328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800232a:	f000 f915 	bl	8002558 <__retarget_lock_acquire_recursive>
 800232e:	4628      	mov	r0, r5
 8002330:	4621      	mov	r1, r4
 8002332:	f7ff ff59 	bl	80021e8 <__sflush_r>
 8002336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002338:	07da      	lsls	r2, r3, #31
 800233a:	4605      	mov	r5, r0
 800233c:	d4e0      	bmi.n	8002300 <_fflush_r+0xc>
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	059b      	lsls	r3, r3, #22
 8002342:	d4dd      	bmi.n	8002300 <_fflush_r+0xc>
 8002344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002346:	f000 f908 	bl	800255a <__retarget_lock_release_recursive>
 800234a:	e7d9      	b.n	8002300 <_fflush_r+0xc>
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <_fflush_r+0x70>)
 800234e:	429c      	cmp	r4, r3
 8002350:	d101      	bne.n	8002356 <_fflush_r+0x62>
 8002352:	68ac      	ldr	r4, [r5, #8]
 8002354:	e7df      	b.n	8002316 <_fflush_r+0x22>
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <_fflush_r+0x74>)
 8002358:	429c      	cmp	r4, r3
 800235a:	bf08      	it	eq
 800235c:	68ec      	ldreq	r4, [r5, #12]
 800235e:	e7da      	b.n	8002316 <_fflush_r+0x22>
 8002360:	08002f74 	.word	0x08002f74
 8002364:	08002f94 	.word	0x08002f94
 8002368:	08002f54 	.word	0x08002f54

0800236c <std>:
 800236c:	2300      	movs	r3, #0
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	e9c0 3300 	strd	r3, r3, [r0]
 8002376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800237a:	6083      	str	r3, [r0, #8]
 800237c:	8181      	strh	r1, [r0, #12]
 800237e:	6643      	str	r3, [r0, #100]	; 0x64
 8002380:	81c2      	strh	r2, [r0, #14]
 8002382:	6183      	str	r3, [r0, #24]
 8002384:	4619      	mov	r1, r3
 8002386:	2208      	movs	r2, #8
 8002388:	305c      	adds	r0, #92	; 0x5c
 800238a:	f7ff fdd7 	bl	8001f3c <memset>
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <std+0x38>)
 8002390:	6263      	str	r3, [r4, #36]	; 0x24
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <std+0x3c>)
 8002394:	62a3      	str	r3, [r4, #40]	; 0x28
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <std+0x40>)
 8002398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <std+0x44>)
 800239c:	6224      	str	r4, [r4, #32]
 800239e:	6323      	str	r3, [r4, #48]	; 0x30
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	bf00      	nop
 80023a4:	08002d75 	.word	0x08002d75
 80023a8:	08002d97 	.word	0x08002d97
 80023ac:	08002dcf 	.word	0x08002dcf
 80023b0:	08002df3 	.word	0x08002df3

080023b4 <_cleanup_r>:
 80023b4:	4901      	ldr	r1, [pc, #4]	; (80023bc <_cleanup_r+0x8>)
 80023b6:	f000 b8af 	b.w	8002518 <_fwalk_reent>
 80023ba:	bf00      	nop
 80023bc:	080022f5 	.word	0x080022f5

080023c0 <__sfmoreglue>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	1e4a      	subs	r2, r1, #1
 80023c4:	2568      	movs	r5, #104	; 0x68
 80023c6:	4355      	muls	r5, r2
 80023c8:	460e      	mov	r6, r1
 80023ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80023ce:	f000 f979 	bl	80026c4 <_malloc_r>
 80023d2:	4604      	mov	r4, r0
 80023d4:	b140      	cbz	r0, 80023e8 <__sfmoreglue+0x28>
 80023d6:	2100      	movs	r1, #0
 80023d8:	e9c0 1600 	strd	r1, r6, [r0]
 80023dc:	300c      	adds	r0, #12
 80023de:	60a0      	str	r0, [r4, #8]
 80023e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023e4:	f7ff fdaa 	bl	8001f3c <memset>
 80023e8:	4620      	mov	r0, r4
 80023ea:	bd70      	pop	{r4, r5, r6, pc}

080023ec <__sfp_lock_acquire>:
 80023ec:	4801      	ldr	r0, [pc, #4]	; (80023f4 <__sfp_lock_acquire+0x8>)
 80023ee:	f000 b8b3 	b.w	8002558 <__retarget_lock_acquire_recursive>
 80023f2:	bf00      	nop
 80023f4:	20000098 	.word	0x20000098

080023f8 <__sfp_lock_release>:
 80023f8:	4801      	ldr	r0, [pc, #4]	; (8002400 <__sfp_lock_release+0x8>)
 80023fa:	f000 b8ae 	b.w	800255a <__retarget_lock_release_recursive>
 80023fe:	bf00      	nop
 8002400:	20000098 	.word	0x20000098

08002404 <__sinit_lock_acquire>:
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <__sinit_lock_acquire+0x8>)
 8002406:	f000 b8a7 	b.w	8002558 <__retarget_lock_acquire_recursive>
 800240a:	bf00      	nop
 800240c:	20000093 	.word	0x20000093

08002410 <__sinit_lock_release>:
 8002410:	4801      	ldr	r0, [pc, #4]	; (8002418 <__sinit_lock_release+0x8>)
 8002412:	f000 b8a2 	b.w	800255a <__retarget_lock_release_recursive>
 8002416:	bf00      	nop
 8002418:	20000093 	.word	0x20000093

0800241c <__sinit>:
 800241c:	b510      	push	{r4, lr}
 800241e:	4604      	mov	r4, r0
 8002420:	f7ff fff0 	bl	8002404 <__sinit_lock_acquire>
 8002424:	69a3      	ldr	r3, [r4, #24]
 8002426:	b11b      	cbz	r3, 8002430 <__sinit+0x14>
 8002428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800242c:	f7ff bff0 	b.w	8002410 <__sinit_lock_release>
 8002430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002434:	6523      	str	r3, [r4, #80]	; 0x50
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <__sinit+0x68>)
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <__sinit+0x6c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	62a2      	str	r2, [r4, #40]	; 0x28
 800243e:	42a3      	cmp	r3, r4
 8002440:	bf04      	itt	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	61a3      	streq	r3, [r4, #24]
 8002446:	4620      	mov	r0, r4
 8002448:	f000 f820 	bl	800248c <__sfp>
 800244c:	6060      	str	r0, [r4, #4]
 800244e:	4620      	mov	r0, r4
 8002450:	f000 f81c 	bl	800248c <__sfp>
 8002454:	60a0      	str	r0, [r4, #8]
 8002456:	4620      	mov	r0, r4
 8002458:	f000 f818 	bl	800248c <__sfp>
 800245c:	2200      	movs	r2, #0
 800245e:	60e0      	str	r0, [r4, #12]
 8002460:	2104      	movs	r1, #4
 8002462:	6860      	ldr	r0, [r4, #4]
 8002464:	f7ff ff82 	bl	800236c <std>
 8002468:	68a0      	ldr	r0, [r4, #8]
 800246a:	2201      	movs	r2, #1
 800246c:	2109      	movs	r1, #9
 800246e:	f7ff ff7d 	bl	800236c <std>
 8002472:	68e0      	ldr	r0, [r4, #12]
 8002474:	2202      	movs	r2, #2
 8002476:	2112      	movs	r1, #18
 8002478:	f7ff ff78 	bl	800236c <std>
 800247c:	2301      	movs	r3, #1
 800247e:	61a3      	str	r3, [r4, #24]
 8002480:	e7d2      	b.n	8002428 <__sinit+0xc>
 8002482:	bf00      	nop
 8002484:	08002f50 	.word	0x08002f50
 8002488:	080023b5 	.word	0x080023b5

0800248c <__sfp>:
 800248c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248e:	4607      	mov	r7, r0
 8002490:	f7ff ffac 	bl	80023ec <__sfp_lock_acquire>
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <__sfp+0x84>)
 8002496:	681e      	ldr	r6, [r3, #0]
 8002498:	69b3      	ldr	r3, [r6, #24]
 800249a:	b913      	cbnz	r3, 80024a2 <__sfp+0x16>
 800249c:	4630      	mov	r0, r6
 800249e:	f7ff ffbd 	bl	800241c <__sinit>
 80024a2:	3648      	adds	r6, #72	; 0x48
 80024a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	d503      	bpl.n	80024b4 <__sfp+0x28>
 80024ac:	6833      	ldr	r3, [r6, #0]
 80024ae:	b30b      	cbz	r3, 80024f4 <__sfp+0x68>
 80024b0:	6836      	ldr	r6, [r6, #0]
 80024b2:	e7f7      	b.n	80024a4 <__sfp+0x18>
 80024b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024b8:	b9d5      	cbnz	r5, 80024f0 <__sfp+0x64>
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <__sfp+0x88>)
 80024bc:	60e3      	str	r3, [r4, #12]
 80024be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80024c2:	6665      	str	r5, [r4, #100]	; 0x64
 80024c4:	f000 f847 	bl	8002556 <__retarget_lock_init_recursive>
 80024c8:	f7ff ff96 	bl	80023f8 <__sfp_lock_release>
 80024cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80024d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80024d4:	6025      	str	r5, [r4, #0]
 80024d6:	61a5      	str	r5, [r4, #24]
 80024d8:	2208      	movs	r2, #8
 80024da:	4629      	mov	r1, r5
 80024dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024e0:	f7ff fd2c 	bl	8001f3c <memset>
 80024e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80024ec:	4620      	mov	r0, r4
 80024ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024f0:	3468      	adds	r4, #104	; 0x68
 80024f2:	e7d9      	b.n	80024a8 <__sfp+0x1c>
 80024f4:	2104      	movs	r1, #4
 80024f6:	4638      	mov	r0, r7
 80024f8:	f7ff ff62 	bl	80023c0 <__sfmoreglue>
 80024fc:	4604      	mov	r4, r0
 80024fe:	6030      	str	r0, [r6, #0]
 8002500:	2800      	cmp	r0, #0
 8002502:	d1d5      	bne.n	80024b0 <__sfp+0x24>
 8002504:	f7ff ff78 	bl	80023f8 <__sfp_lock_release>
 8002508:	230c      	movs	r3, #12
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	e7ee      	b.n	80024ec <__sfp+0x60>
 800250e:	bf00      	nop
 8002510:	08002f50 	.word	0x08002f50
 8002514:	ffff0001 	.word	0xffff0001

08002518 <_fwalk_reent>:
 8002518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800251c:	4606      	mov	r6, r0
 800251e:	4688      	mov	r8, r1
 8002520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002524:	2700      	movs	r7, #0
 8002526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800252a:	f1b9 0901 	subs.w	r9, r9, #1
 800252e:	d505      	bpl.n	800253c <_fwalk_reent+0x24>
 8002530:	6824      	ldr	r4, [r4, #0]
 8002532:	2c00      	cmp	r4, #0
 8002534:	d1f7      	bne.n	8002526 <_fwalk_reent+0xe>
 8002536:	4638      	mov	r0, r7
 8002538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800253c:	89ab      	ldrh	r3, [r5, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d907      	bls.n	8002552 <_fwalk_reent+0x3a>
 8002542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002546:	3301      	adds	r3, #1
 8002548:	d003      	beq.n	8002552 <_fwalk_reent+0x3a>
 800254a:	4629      	mov	r1, r5
 800254c:	4630      	mov	r0, r6
 800254e:	47c0      	blx	r8
 8002550:	4307      	orrs	r7, r0
 8002552:	3568      	adds	r5, #104	; 0x68
 8002554:	e7e9      	b.n	800252a <_fwalk_reent+0x12>

08002556 <__retarget_lock_init_recursive>:
 8002556:	4770      	bx	lr

08002558 <__retarget_lock_acquire_recursive>:
 8002558:	4770      	bx	lr

0800255a <__retarget_lock_release_recursive>:
 800255a:	4770      	bx	lr

0800255c <__swhatbuf_r>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	460e      	mov	r6, r1
 8002560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002564:	2900      	cmp	r1, #0
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	da07      	bge.n	800257e <__swhatbuf_r+0x22>
 800256e:	2300      	movs	r3, #0
 8002570:	602b      	str	r3, [r5, #0]
 8002572:	89b3      	ldrh	r3, [r6, #12]
 8002574:	061a      	lsls	r2, r3, #24
 8002576:	d410      	bmi.n	800259a <__swhatbuf_r+0x3e>
 8002578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257c:	e00e      	b.n	800259c <__swhatbuf_r+0x40>
 800257e:	466a      	mov	r2, sp
 8002580:	f000 fc5e 	bl	8002e40 <_fstat_r>
 8002584:	2800      	cmp	r0, #0
 8002586:	dbf2      	blt.n	800256e <__swhatbuf_r+0x12>
 8002588:	9a01      	ldr	r2, [sp, #4]
 800258a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800258e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002592:	425a      	negs	r2, r3
 8002594:	415a      	adcs	r2, r3
 8002596:	602a      	str	r2, [r5, #0]
 8002598:	e7ee      	b.n	8002578 <__swhatbuf_r+0x1c>
 800259a:	2340      	movs	r3, #64	; 0x40
 800259c:	2000      	movs	r0, #0
 800259e:	6023      	str	r3, [r4, #0]
 80025a0:	b016      	add	sp, #88	; 0x58
 80025a2:	bd70      	pop	{r4, r5, r6, pc}

080025a4 <__smakebuf_r>:
 80025a4:	898b      	ldrh	r3, [r1, #12]
 80025a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025a8:	079d      	lsls	r5, r3, #30
 80025aa:	4606      	mov	r6, r0
 80025ac:	460c      	mov	r4, r1
 80025ae:	d507      	bpl.n	80025c0 <__smakebuf_r+0x1c>
 80025b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80025b4:	6023      	str	r3, [r4, #0]
 80025b6:	6123      	str	r3, [r4, #16]
 80025b8:	2301      	movs	r3, #1
 80025ba:	6163      	str	r3, [r4, #20]
 80025bc:	b002      	add	sp, #8
 80025be:	bd70      	pop	{r4, r5, r6, pc}
 80025c0:	ab01      	add	r3, sp, #4
 80025c2:	466a      	mov	r2, sp
 80025c4:	f7ff ffca 	bl	800255c <__swhatbuf_r>
 80025c8:	9900      	ldr	r1, [sp, #0]
 80025ca:	4605      	mov	r5, r0
 80025cc:	4630      	mov	r0, r6
 80025ce:	f000 f879 	bl	80026c4 <_malloc_r>
 80025d2:	b948      	cbnz	r0, 80025e8 <__smakebuf_r+0x44>
 80025d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025d8:	059a      	lsls	r2, r3, #22
 80025da:	d4ef      	bmi.n	80025bc <__smakebuf_r+0x18>
 80025dc:	f023 0303 	bic.w	r3, r3, #3
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	81a3      	strh	r3, [r4, #12]
 80025e6:	e7e3      	b.n	80025b0 <__smakebuf_r+0xc>
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <__smakebuf_r+0x7c>)
 80025ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80025ec:	89a3      	ldrh	r3, [r4, #12]
 80025ee:	6020      	str	r0, [r4, #0]
 80025f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f4:	81a3      	strh	r3, [r4, #12]
 80025f6:	9b00      	ldr	r3, [sp, #0]
 80025f8:	6163      	str	r3, [r4, #20]
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	6120      	str	r0, [r4, #16]
 80025fe:	b15b      	cbz	r3, 8002618 <__smakebuf_r+0x74>
 8002600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002604:	4630      	mov	r0, r6
 8002606:	f000 fc2d 	bl	8002e64 <_isatty_r>
 800260a:	b128      	cbz	r0, 8002618 <__smakebuf_r+0x74>
 800260c:	89a3      	ldrh	r3, [r4, #12]
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	81a3      	strh	r3, [r4, #12]
 8002618:	89a0      	ldrh	r0, [r4, #12]
 800261a:	4305      	orrs	r5, r0
 800261c:	81a5      	strh	r5, [r4, #12]
 800261e:	e7cd      	b.n	80025bc <__smakebuf_r+0x18>
 8002620:	080023b5 	.word	0x080023b5

08002624 <_free_r>:
 8002624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002626:	2900      	cmp	r1, #0
 8002628:	d048      	beq.n	80026bc <_free_r+0x98>
 800262a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800262e:	9001      	str	r0, [sp, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f1a1 0404 	sub.w	r4, r1, #4
 8002636:	bfb8      	it	lt
 8002638:	18e4      	addlt	r4, r4, r3
 800263a:	f000 fc35 	bl	8002ea8 <__malloc_lock>
 800263e:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <_free_r+0x9c>)
 8002640:	9801      	ldr	r0, [sp, #4]
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	4615      	mov	r5, r2
 8002646:	b933      	cbnz	r3, 8002656 <_free_r+0x32>
 8002648:	6063      	str	r3, [r4, #4]
 800264a:	6014      	str	r4, [r2, #0]
 800264c:	b003      	add	sp, #12
 800264e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002652:	f000 bc2f 	b.w	8002eb4 <__malloc_unlock>
 8002656:	42a3      	cmp	r3, r4
 8002658:	d90b      	bls.n	8002672 <_free_r+0x4e>
 800265a:	6821      	ldr	r1, [r4, #0]
 800265c:	1862      	adds	r2, r4, r1
 800265e:	4293      	cmp	r3, r2
 8002660:	bf04      	itt	eq
 8002662:	681a      	ldreq	r2, [r3, #0]
 8002664:	685b      	ldreq	r3, [r3, #4]
 8002666:	6063      	str	r3, [r4, #4]
 8002668:	bf04      	itt	eq
 800266a:	1852      	addeq	r2, r2, r1
 800266c:	6022      	streq	r2, [r4, #0]
 800266e:	602c      	str	r4, [r5, #0]
 8002670:	e7ec      	b.n	800264c <_free_r+0x28>
 8002672:	461a      	mov	r2, r3
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	b10b      	cbz	r3, 800267c <_free_r+0x58>
 8002678:	42a3      	cmp	r3, r4
 800267a:	d9fa      	bls.n	8002672 <_free_r+0x4e>
 800267c:	6811      	ldr	r1, [r2, #0]
 800267e:	1855      	adds	r5, r2, r1
 8002680:	42a5      	cmp	r5, r4
 8002682:	d10b      	bne.n	800269c <_free_r+0x78>
 8002684:	6824      	ldr	r4, [r4, #0]
 8002686:	4421      	add	r1, r4
 8002688:	1854      	adds	r4, r2, r1
 800268a:	42a3      	cmp	r3, r4
 800268c:	6011      	str	r1, [r2, #0]
 800268e:	d1dd      	bne.n	800264c <_free_r+0x28>
 8002690:	681c      	ldr	r4, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	6053      	str	r3, [r2, #4]
 8002696:	4421      	add	r1, r4
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	e7d7      	b.n	800264c <_free_r+0x28>
 800269c:	d902      	bls.n	80026a4 <_free_r+0x80>
 800269e:	230c      	movs	r3, #12
 80026a0:	6003      	str	r3, [r0, #0]
 80026a2:	e7d3      	b.n	800264c <_free_r+0x28>
 80026a4:	6825      	ldr	r5, [r4, #0]
 80026a6:	1961      	adds	r1, r4, r5
 80026a8:	428b      	cmp	r3, r1
 80026aa:	bf04      	itt	eq
 80026ac:	6819      	ldreq	r1, [r3, #0]
 80026ae:	685b      	ldreq	r3, [r3, #4]
 80026b0:	6063      	str	r3, [r4, #4]
 80026b2:	bf04      	itt	eq
 80026b4:	1949      	addeq	r1, r1, r5
 80026b6:	6021      	streq	r1, [r4, #0]
 80026b8:	6054      	str	r4, [r2, #4]
 80026ba:	e7c7      	b.n	800264c <_free_r+0x28>
 80026bc:	b003      	add	sp, #12
 80026be:	bd30      	pop	{r4, r5, pc}
 80026c0:	20000088 	.word	0x20000088

080026c4 <_malloc_r>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	1ccd      	adds	r5, r1, #3
 80026c8:	f025 0503 	bic.w	r5, r5, #3
 80026cc:	3508      	adds	r5, #8
 80026ce:	2d0c      	cmp	r5, #12
 80026d0:	bf38      	it	cc
 80026d2:	250c      	movcc	r5, #12
 80026d4:	2d00      	cmp	r5, #0
 80026d6:	4606      	mov	r6, r0
 80026d8:	db01      	blt.n	80026de <_malloc_r+0x1a>
 80026da:	42a9      	cmp	r1, r5
 80026dc:	d903      	bls.n	80026e6 <_malloc_r+0x22>
 80026de:	230c      	movs	r3, #12
 80026e0:	6033      	str	r3, [r6, #0]
 80026e2:	2000      	movs	r0, #0
 80026e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e6:	f000 fbdf 	bl	8002ea8 <__malloc_lock>
 80026ea:	4921      	ldr	r1, [pc, #132]	; (8002770 <_malloc_r+0xac>)
 80026ec:	680a      	ldr	r2, [r1, #0]
 80026ee:	4614      	mov	r4, r2
 80026f0:	b99c      	cbnz	r4, 800271a <_malloc_r+0x56>
 80026f2:	4f20      	ldr	r7, [pc, #128]	; (8002774 <_malloc_r+0xb0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b923      	cbnz	r3, 8002702 <_malloc_r+0x3e>
 80026f8:	4621      	mov	r1, r4
 80026fa:	4630      	mov	r0, r6
 80026fc:	f000 fb2a 	bl	8002d54 <_sbrk_r>
 8002700:	6038      	str	r0, [r7, #0]
 8002702:	4629      	mov	r1, r5
 8002704:	4630      	mov	r0, r6
 8002706:	f000 fb25 	bl	8002d54 <_sbrk_r>
 800270a:	1c43      	adds	r3, r0, #1
 800270c:	d123      	bne.n	8002756 <_malloc_r+0x92>
 800270e:	230c      	movs	r3, #12
 8002710:	6033      	str	r3, [r6, #0]
 8002712:	4630      	mov	r0, r6
 8002714:	f000 fbce 	bl	8002eb4 <__malloc_unlock>
 8002718:	e7e3      	b.n	80026e2 <_malloc_r+0x1e>
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	1b5b      	subs	r3, r3, r5
 800271e:	d417      	bmi.n	8002750 <_malloc_r+0x8c>
 8002720:	2b0b      	cmp	r3, #11
 8002722:	d903      	bls.n	800272c <_malloc_r+0x68>
 8002724:	6023      	str	r3, [r4, #0]
 8002726:	441c      	add	r4, r3
 8002728:	6025      	str	r5, [r4, #0]
 800272a:	e004      	b.n	8002736 <_malloc_r+0x72>
 800272c:	6863      	ldr	r3, [r4, #4]
 800272e:	42a2      	cmp	r2, r4
 8002730:	bf0c      	ite	eq
 8002732:	600b      	streq	r3, [r1, #0]
 8002734:	6053      	strne	r3, [r2, #4]
 8002736:	4630      	mov	r0, r6
 8002738:	f000 fbbc 	bl	8002eb4 <__malloc_unlock>
 800273c:	f104 000b 	add.w	r0, r4, #11
 8002740:	1d23      	adds	r3, r4, #4
 8002742:	f020 0007 	bic.w	r0, r0, #7
 8002746:	1ac2      	subs	r2, r0, r3
 8002748:	d0cc      	beq.n	80026e4 <_malloc_r+0x20>
 800274a:	1a1b      	subs	r3, r3, r0
 800274c:	50a3      	str	r3, [r4, r2]
 800274e:	e7c9      	b.n	80026e4 <_malloc_r+0x20>
 8002750:	4622      	mov	r2, r4
 8002752:	6864      	ldr	r4, [r4, #4]
 8002754:	e7cc      	b.n	80026f0 <_malloc_r+0x2c>
 8002756:	1cc4      	adds	r4, r0, #3
 8002758:	f024 0403 	bic.w	r4, r4, #3
 800275c:	42a0      	cmp	r0, r4
 800275e:	d0e3      	beq.n	8002728 <_malloc_r+0x64>
 8002760:	1a21      	subs	r1, r4, r0
 8002762:	4630      	mov	r0, r6
 8002764:	f000 faf6 	bl	8002d54 <_sbrk_r>
 8002768:	3001      	adds	r0, #1
 800276a:	d1dd      	bne.n	8002728 <_malloc_r+0x64>
 800276c:	e7cf      	b.n	800270e <_malloc_r+0x4a>
 800276e:	bf00      	nop
 8002770:	20000088 	.word	0x20000088
 8002774:	2000008c 	.word	0x2000008c

08002778 <__sfputc_r>:
 8002778:	6893      	ldr	r3, [r2, #8]
 800277a:	3b01      	subs	r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	b410      	push	{r4}
 8002780:	6093      	str	r3, [r2, #8]
 8002782:	da08      	bge.n	8002796 <__sfputc_r+0x1e>
 8002784:	6994      	ldr	r4, [r2, #24]
 8002786:	42a3      	cmp	r3, r4
 8002788:	db01      	blt.n	800278e <__sfputc_r+0x16>
 800278a:	290a      	cmp	r1, #10
 800278c:	d103      	bne.n	8002796 <__sfputc_r+0x1e>
 800278e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002792:	f7ff bc69 	b.w	8002068 <__swbuf_r>
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	1c58      	adds	r0, r3, #1
 800279a:	6010      	str	r0, [r2, #0]
 800279c:	7019      	strb	r1, [r3, #0]
 800279e:	4608      	mov	r0, r1
 80027a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <__sfputs_r>:
 80027a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a8:	4606      	mov	r6, r0
 80027aa:	460f      	mov	r7, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	18d5      	adds	r5, r2, r3
 80027b0:	42ac      	cmp	r4, r5
 80027b2:	d101      	bne.n	80027b8 <__sfputs_r+0x12>
 80027b4:	2000      	movs	r0, #0
 80027b6:	e007      	b.n	80027c8 <__sfputs_r+0x22>
 80027b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027bc:	463a      	mov	r2, r7
 80027be:	4630      	mov	r0, r6
 80027c0:	f7ff ffda 	bl	8002778 <__sfputc_r>
 80027c4:	1c43      	adds	r3, r0, #1
 80027c6:	d1f3      	bne.n	80027b0 <__sfputs_r+0xa>
 80027c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027cc <_vfiprintf_r>:
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	460d      	mov	r5, r1
 80027d2:	b09d      	sub	sp, #116	; 0x74
 80027d4:	4614      	mov	r4, r2
 80027d6:	4698      	mov	r8, r3
 80027d8:	4606      	mov	r6, r0
 80027da:	b118      	cbz	r0, 80027e4 <_vfiprintf_r+0x18>
 80027dc:	6983      	ldr	r3, [r0, #24]
 80027de:	b90b      	cbnz	r3, 80027e4 <_vfiprintf_r+0x18>
 80027e0:	f7ff fe1c 	bl	800241c <__sinit>
 80027e4:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <_vfiprintf_r+0x240>)
 80027e6:	429d      	cmp	r5, r3
 80027e8:	d11b      	bne.n	8002822 <_vfiprintf_r+0x56>
 80027ea:	6875      	ldr	r5, [r6, #4]
 80027ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027ee:	07d9      	lsls	r1, r3, #31
 80027f0:	d405      	bmi.n	80027fe <_vfiprintf_r+0x32>
 80027f2:	89ab      	ldrh	r3, [r5, #12]
 80027f4:	059a      	lsls	r2, r3, #22
 80027f6:	d402      	bmi.n	80027fe <_vfiprintf_r+0x32>
 80027f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027fa:	f7ff fead 	bl	8002558 <__retarget_lock_acquire_recursive>
 80027fe:	89ab      	ldrh	r3, [r5, #12]
 8002800:	071b      	lsls	r3, r3, #28
 8002802:	d501      	bpl.n	8002808 <_vfiprintf_r+0x3c>
 8002804:	692b      	ldr	r3, [r5, #16]
 8002806:	b9eb      	cbnz	r3, 8002844 <_vfiprintf_r+0x78>
 8002808:	4629      	mov	r1, r5
 800280a:	4630      	mov	r0, r6
 800280c:	f7ff fc7e 	bl	800210c <__swsetup_r>
 8002810:	b1c0      	cbz	r0, 8002844 <_vfiprintf_r+0x78>
 8002812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002814:	07dc      	lsls	r4, r3, #31
 8002816:	d50e      	bpl.n	8002836 <_vfiprintf_r+0x6a>
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	b01d      	add	sp, #116	; 0x74
 800281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002822:	4b7b      	ldr	r3, [pc, #492]	; (8002a10 <_vfiprintf_r+0x244>)
 8002824:	429d      	cmp	r5, r3
 8002826:	d101      	bne.n	800282c <_vfiprintf_r+0x60>
 8002828:	68b5      	ldr	r5, [r6, #8]
 800282a:	e7df      	b.n	80027ec <_vfiprintf_r+0x20>
 800282c:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <_vfiprintf_r+0x248>)
 800282e:	429d      	cmp	r5, r3
 8002830:	bf08      	it	eq
 8002832:	68f5      	ldreq	r5, [r6, #12]
 8002834:	e7da      	b.n	80027ec <_vfiprintf_r+0x20>
 8002836:	89ab      	ldrh	r3, [r5, #12]
 8002838:	0598      	lsls	r0, r3, #22
 800283a:	d4ed      	bmi.n	8002818 <_vfiprintf_r+0x4c>
 800283c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800283e:	f7ff fe8c 	bl	800255a <__retarget_lock_release_recursive>
 8002842:	e7e9      	b.n	8002818 <_vfiprintf_r+0x4c>
 8002844:	2300      	movs	r3, #0
 8002846:	9309      	str	r3, [sp, #36]	; 0x24
 8002848:	2320      	movs	r3, #32
 800284a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800284e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002852:	2330      	movs	r3, #48	; 0x30
 8002854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002a18 <_vfiprintf_r+0x24c>
 8002858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800285c:	f04f 0901 	mov.w	r9, #1
 8002860:	4623      	mov	r3, r4
 8002862:	469a      	mov	sl, r3
 8002864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002868:	b10a      	cbz	r2, 800286e <_vfiprintf_r+0xa2>
 800286a:	2a25      	cmp	r2, #37	; 0x25
 800286c:	d1f9      	bne.n	8002862 <_vfiprintf_r+0x96>
 800286e:	ebba 0b04 	subs.w	fp, sl, r4
 8002872:	d00b      	beq.n	800288c <_vfiprintf_r+0xc0>
 8002874:	465b      	mov	r3, fp
 8002876:	4622      	mov	r2, r4
 8002878:	4629      	mov	r1, r5
 800287a:	4630      	mov	r0, r6
 800287c:	f7ff ff93 	bl	80027a6 <__sfputs_r>
 8002880:	3001      	adds	r0, #1
 8002882:	f000 80aa 	beq.w	80029da <_vfiprintf_r+0x20e>
 8002886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002888:	445a      	add	r2, fp
 800288a:	9209      	str	r2, [sp, #36]	; 0x24
 800288c:	f89a 3000 	ldrb.w	r3, [sl]
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a2 	beq.w	80029da <_vfiprintf_r+0x20e>
 8002896:	2300      	movs	r3, #0
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028a0:	f10a 0a01 	add.w	sl, sl, #1
 80028a4:	9304      	str	r3, [sp, #16]
 80028a6:	9307      	str	r3, [sp, #28]
 80028a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028ac:	931a      	str	r3, [sp, #104]	; 0x68
 80028ae:	4654      	mov	r4, sl
 80028b0:	2205      	movs	r2, #5
 80028b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b6:	4858      	ldr	r0, [pc, #352]	; (8002a18 <_vfiprintf_r+0x24c>)
 80028b8:	f7fd fc8a 	bl	80001d0 <memchr>
 80028bc:	9a04      	ldr	r2, [sp, #16]
 80028be:	b9d8      	cbnz	r0, 80028f8 <_vfiprintf_r+0x12c>
 80028c0:	06d1      	lsls	r1, r2, #27
 80028c2:	bf44      	itt	mi
 80028c4:	2320      	movmi	r3, #32
 80028c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028ca:	0713      	lsls	r3, r2, #28
 80028cc:	bf44      	itt	mi
 80028ce:	232b      	movmi	r3, #43	; 0x2b
 80028d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d4:	f89a 3000 	ldrb.w	r3, [sl]
 80028d8:	2b2a      	cmp	r3, #42	; 0x2a
 80028da:	d015      	beq.n	8002908 <_vfiprintf_r+0x13c>
 80028dc:	9a07      	ldr	r2, [sp, #28]
 80028de:	4654      	mov	r4, sl
 80028e0:	2000      	movs	r0, #0
 80028e2:	f04f 0c0a 	mov.w	ip, #10
 80028e6:	4621      	mov	r1, r4
 80028e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ec:	3b30      	subs	r3, #48	; 0x30
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	d94e      	bls.n	8002990 <_vfiprintf_r+0x1c4>
 80028f2:	b1b0      	cbz	r0, 8002922 <_vfiprintf_r+0x156>
 80028f4:	9207      	str	r2, [sp, #28]
 80028f6:	e014      	b.n	8002922 <_vfiprintf_r+0x156>
 80028f8:	eba0 0308 	sub.w	r3, r0, r8
 80028fc:	fa09 f303 	lsl.w	r3, r9, r3
 8002900:	4313      	orrs	r3, r2
 8002902:	9304      	str	r3, [sp, #16]
 8002904:	46a2      	mov	sl, r4
 8002906:	e7d2      	b.n	80028ae <_vfiprintf_r+0xe2>
 8002908:	9b03      	ldr	r3, [sp, #12]
 800290a:	1d19      	adds	r1, r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	9103      	str	r1, [sp, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	bfbb      	ittet	lt
 8002914:	425b      	neglt	r3, r3
 8002916:	f042 0202 	orrlt.w	r2, r2, #2
 800291a:	9307      	strge	r3, [sp, #28]
 800291c:	9307      	strlt	r3, [sp, #28]
 800291e:	bfb8      	it	lt
 8002920:	9204      	strlt	r2, [sp, #16]
 8002922:	7823      	ldrb	r3, [r4, #0]
 8002924:	2b2e      	cmp	r3, #46	; 0x2e
 8002926:	d10c      	bne.n	8002942 <_vfiprintf_r+0x176>
 8002928:	7863      	ldrb	r3, [r4, #1]
 800292a:	2b2a      	cmp	r3, #42	; 0x2a
 800292c:	d135      	bne.n	800299a <_vfiprintf_r+0x1ce>
 800292e:	9b03      	ldr	r3, [sp, #12]
 8002930:	1d1a      	adds	r2, r3, #4
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	9203      	str	r2, [sp, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfb8      	it	lt
 800293a:	f04f 33ff 	movlt.w	r3, #4294967295
 800293e:	3402      	adds	r4, #2
 8002940:	9305      	str	r3, [sp, #20]
 8002942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002a28 <_vfiprintf_r+0x25c>
 8002946:	7821      	ldrb	r1, [r4, #0]
 8002948:	2203      	movs	r2, #3
 800294a:	4650      	mov	r0, sl
 800294c:	f7fd fc40 	bl	80001d0 <memchr>
 8002950:	b140      	cbz	r0, 8002964 <_vfiprintf_r+0x198>
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	eba0 000a 	sub.w	r0, r0, sl
 8002958:	fa03 f000 	lsl.w	r0, r3, r0
 800295c:	9b04      	ldr	r3, [sp, #16]
 800295e:	4303      	orrs	r3, r0
 8002960:	3401      	adds	r4, #1
 8002962:	9304      	str	r3, [sp, #16]
 8002964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002968:	482c      	ldr	r0, [pc, #176]	; (8002a1c <_vfiprintf_r+0x250>)
 800296a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800296e:	2206      	movs	r2, #6
 8002970:	f7fd fc2e 	bl	80001d0 <memchr>
 8002974:	2800      	cmp	r0, #0
 8002976:	d03f      	beq.n	80029f8 <_vfiprintf_r+0x22c>
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <_vfiprintf_r+0x254>)
 800297a:	bb1b      	cbnz	r3, 80029c4 <_vfiprintf_r+0x1f8>
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	3307      	adds	r3, #7
 8002980:	f023 0307 	bic.w	r3, r3, #7
 8002984:	3308      	adds	r3, #8
 8002986:	9303      	str	r3, [sp, #12]
 8002988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800298a:	443b      	add	r3, r7
 800298c:	9309      	str	r3, [sp, #36]	; 0x24
 800298e:	e767      	b.n	8002860 <_vfiprintf_r+0x94>
 8002990:	fb0c 3202 	mla	r2, ip, r2, r3
 8002994:	460c      	mov	r4, r1
 8002996:	2001      	movs	r0, #1
 8002998:	e7a5      	b.n	80028e6 <_vfiprintf_r+0x11a>
 800299a:	2300      	movs	r3, #0
 800299c:	3401      	adds	r4, #1
 800299e:	9305      	str	r3, [sp, #20]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 0c0a 	mov.w	ip, #10
 80029a6:	4620      	mov	r0, r4
 80029a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029ac:	3a30      	subs	r2, #48	; 0x30
 80029ae:	2a09      	cmp	r2, #9
 80029b0:	d903      	bls.n	80029ba <_vfiprintf_r+0x1ee>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0c5      	beq.n	8002942 <_vfiprintf_r+0x176>
 80029b6:	9105      	str	r1, [sp, #20]
 80029b8:	e7c3      	b.n	8002942 <_vfiprintf_r+0x176>
 80029ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80029be:	4604      	mov	r4, r0
 80029c0:	2301      	movs	r3, #1
 80029c2:	e7f0      	b.n	80029a6 <_vfiprintf_r+0x1da>
 80029c4:	ab03      	add	r3, sp, #12
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	462a      	mov	r2, r5
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <_vfiprintf_r+0x258>)
 80029cc:	a904      	add	r1, sp, #16
 80029ce:	4630      	mov	r0, r6
 80029d0:	f3af 8000 	nop.w
 80029d4:	4607      	mov	r7, r0
 80029d6:	1c78      	adds	r0, r7, #1
 80029d8:	d1d6      	bne.n	8002988 <_vfiprintf_r+0x1bc>
 80029da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029dc:	07d9      	lsls	r1, r3, #31
 80029de:	d405      	bmi.n	80029ec <_vfiprintf_r+0x220>
 80029e0:	89ab      	ldrh	r3, [r5, #12]
 80029e2:	059a      	lsls	r2, r3, #22
 80029e4:	d402      	bmi.n	80029ec <_vfiprintf_r+0x220>
 80029e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029e8:	f7ff fdb7 	bl	800255a <__retarget_lock_release_recursive>
 80029ec:	89ab      	ldrh	r3, [r5, #12]
 80029ee:	065b      	lsls	r3, r3, #25
 80029f0:	f53f af12 	bmi.w	8002818 <_vfiprintf_r+0x4c>
 80029f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029f6:	e711      	b.n	800281c <_vfiprintf_r+0x50>
 80029f8:	ab03      	add	r3, sp, #12
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	462a      	mov	r2, r5
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <_vfiprintf_r+0x258>)
 8002a00:	a904      	add	r1, sp, #16
 8002a02:	4630      	mov	r0, r6
 8002a04:	f000 f880 	bl	8002b08 <_printf_i>
 8002a08:	e7e4      	b.n	80029d4 <_vfiprintf_r+0x208>
 8002a0a:	bf00      	nop
 8002a0c:	08002f74 	.word	0x08002f74
 8002a10:	08002f94 	.word	0x08002f94
 8002a14:	08002f54 	.word	0x08002f54
 8002a18:	08002fb4 	.word	0x08002fb4
 8002a1c:	08002fbe 	.word	0x08002fbe
 8002a20:	00000000 	.word	0x00000000
 8002a24:	080027a7 	.word	0x080027a7
 8002a28:	08002fba 	.word	0x08002fba

08002a2c <_printf_common>:
 8002a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a30:	4616      	mov	r6, r2
 8002a32:	4699      	mov	r9, r3
 8002a34:	688a      	ldr	r2, [r1, #8]
 8002a36:	690b      	ldr	r3, [r1, #16]
 8002a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bfb8      	it	lt
 8002a40:	4613      	movlt	r3, r2
 8002a42:	6033      	str	r3, [r6, #0]
 8002a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a48:	4607      	mov	r7, r0
 8002a4a:	460c      	mov	r4, r1
 8002a4c:	b10a      	cbz	r2, 8002a52 <_printf_common+0x26>
 8002a4e:	3301      	adds	r3, #1
 8002a50:	6033      	str	r3, [r6, #0]
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	0699      	lsls	r1, r3, #26
 8002a56:	bf42      	ittt	mi
 8002a58:	6833      	ldrmi	r3, [r6, #0]
 8002a5a:	3302      	addmi	r3, #2
 8002a5c:	6033      	strmi	r3, [r6, #0]
 8002a5e:	6825      	ldr	r5, [r4, #0]
 8002a60:	f015 0506 	ands.w	r5, r5, #6
 8002a64:	d106      	bne.n	8002a74 <_printf_common+0x48>
 8002a66:	f104 0a19 	add.w	sl, r4, #25
 8002a6a:	68e3      	ldr	r3, [r4, #12]
 8002a6c:	6832      	ldr	r2, [r6, #0]
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	42ab      	cmp	r3, r5
 8002a72:	dc26      	bgt.n	8002ac2 <_printf_common+0x96>
 8002a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a78:	1e13      	subs	r3, r2, #0
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	bf18      	it	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	0692      	lsls	r2, r2, #26
 8002a82:	d42b      	bmi.n	8002adc <_printf_common+0xb0>
 8002a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a88:	4649      	mov	r1, r9
 8002a8a:	4638      	mov	r0, r7
 8002a8c:	47c0      	blx	r8
 8002a8e:	3001      	adds	r0, #1
 8002a90:	d01e      	beq.n	8002ad0 <_printf_common+0xa4>
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	68e5      	ldr	r5, [r4, #12]
 8002a96:	6832      	ldr	r2, [r6, #0]
 8002a98:	f003 0306 	and.w	r3, r3, #6
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	bf08      	it	eq
 8002aa0:	1aad      	subeq	r5, r5, r2
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	6922      	ldr	r2, [r4, #16]
 8002aa6:	bf0c      	ite	eq
 8002aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aac:	2500      	movne	r5, #0
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	bfc4      	itt	gt
 8002ab2:	1a9b      	subgt	r3, r3, r2
 8002ab4:	18ed      	addgt	r5, r5, r3
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	341a      	adds	r4, #26
 8002aba:	42b5      	cmp	r5, r6
 8002abc:	d11a      	bne.n	8002af4 <_printf_common+0xc8>
 8002abe:	2000      	movs	r0, #0
 8002ac0:	e008      	b.n	8002ad4 <_printf_common+0xa8>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4652      	mov	r2, sl
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	4638      	mov	r0, r7
 8002aca:	47c0      	blx	r8
 8002acc:	3001      	adds	r0, #1
 8002ace:	d103      	bne.n	8002ad8 <_printf_common+0xac>
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad8:	3501      	adds	r5, #1
 8002ada:	e7c6      	b.n	8002a6a <_printf_common+0x3e>
 8002adc:	18e1      	adds	r1, r4, r3
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	2030      	movs	r0, #48	; 0x30
 8002ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ae6:	4422      	add	r2, r4
 8002ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002af0:	3302      	adds	r3, #2
 8002af2:	e7c7      	b.n	8002a84 <_printf_common+0x58>
 8002af4:	2301      	movs	r3, #1
 8002af6:	4622      	mov	r2, r4
 8002af8:	4649      	mov	r1, r9
 8002afa:	4638      	mov	r0, r7
 8002afc:	47c0      	blx	r8
 8002afe:	3001      	adds	r0, #1
 8002b00:	d0e6      	beq.n	8002ad0 <_printf_common+0xa4>
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7d9      	b.n	8002aba <_printf_common+0x8e>
	...

08002b08 <_printf_i>:
 8002b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	4691      	mov	r9, r2
 8002b10:	7e27      	ldrb	r7, [r4, #24]
 8002b12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b14:	2f78      	cmp	r7, #120	; 0x78
 8002b16:	4680      	mov	r8, r0
 8002b18:	469a      	mov	sl, r3
 8002b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b1e:	d807      	bhi.n	8002b30 <_printf_i+0x28>
 8002b20:	2f62      	cmp	r7, #98	; 0x62
 8002b22:	d80a      	bhi.n	8002b3a <_printf_i+0x32>
 8002b24:	2f00      	cmp	r7, #0
 8002b26:	f000 80d8 	beq.w	8002cda <_printf_i+0x1d2>
 8002b2a:	2f58      	cmp	r7, #88	; 0x58
 8002b2c:	f000 80a3 	beq.w	8002c76 <_printf_i+0x16e>
 8002b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b38:	e03a      	b.n	8002bb0 <_printf_i+0xa8>
 8002b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b3e:	2b15      	cmp	r3, #21
 8002b40:	d8f6      	bhi.n	8002b30 <_printf_i+0x28>
 8002b42:	a001      	add	r0, pc, #4	; (adr r0, 8002b48 <_printf_i+0x40>)
 8002b44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b48:	08002ba1 	.word	0x08002ba1
 8002b4c:	08002bb5 	.word	0x08002bb5
 8002b50:	08002b31 	.word	0x08002b31
 8002b54:	08002b31 	.word	0x08002b31
 8002b58:	08002b31 	.word	0x08002b31
 8002b5c:	08002b31 	.word	0x08002b31
 8002b60:	08002bb5 	.word	0x08002bb5
 8002b64:	08002b31 	.word	0x08002b31
 8002b68:	08002b31 	.word	0x08002b31
 8002b6c:	08002b31 	.word	0x08002b31
 8002b70:	08002b31 	.word	0x08002b31
 8002b74:	08002cc1 	.word	0x08002cc1
 8002b78:	08002be5 	.word	0x08002be5
 8002b7c:	08002ca3 	.word	0x08002ca3
 8002b80:	08002b31 	.word	0x08002b31
 8002b84:	08002b31 	.word	0x08002b31
 8002b88:	08002ce3 	.word	0x08002ce3
 8002b8c:	08002b31 	.word	0x08002b31
 8002b90:	08002be5 	.word	0x08002be5
 8002b94:	08002b31 	.word	0x08002b31
 8002b98:	08002b31 	.word	0x08002b31
 8002b9c:	08002cab 	.word	0x08002cab
 8002ba0:	680b      	ldr	r3, [r1, #0]
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	600a      	str	r2, [r1, #0]
 8002ba8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0a3      	b.n	8002cfc <_printf_i+0x1f4>
 8002bb4:	6825      	ldr	r5, [r4, #0]
 8002bb6:	6808      	ldr	r0, [r1, #0]
 8002bb8:	062e      	lsls	r6, r5, #24
 8002bba:	f100 0304 	add.w	r3, r0, #4
 8002bbe:	d50a      	bpl.n	8002bd6 <_printf_i+0xce>
 8002bc0:	6805      	ldr	r5, [r0, #0]
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	2d00      	cmp	r5, #0
 8002bc6:	da03      	bge.n	8002bd0 <_printf_i+0xc8>
 8002bc8:	232d      	movs	r3, #45	; 0x2d
 8002bca:	426d      	negs	r5, r5
 8002bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bd0:	485e      	ldr	r0, [pc, #376]	; (8002d4c <_printf_i+0x244>)
 8002bd2:	230a      	movs	r3, #10
 8002bd4:	e019      	b.n	8002c0a <_printf_i+0x102>
 8002bd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002bda:	6805      	ldr	r5, [r0, #0]
 8002bdc:	600b      	str	r3, [r1, #0]
 8002bde:	bf18      	it	ne
 8002be0:	b22d      	sxthne	r5, r5
 8002be2:	e7ef      	b.n	8002bc4 <_printf_i+0xbc>
 8002be4:	680b      	ldr	r3, [r1, #0]
 8002be6:	6825      	ldr	r5, [r4, #0]
 8002be8:	1d18      	adds	r0, r3, #4
 8002bea:	6008      	str	r0, [r1, #0]
 8002bec:	0628      	lsls	r0, r5, #24
 8002bee:	d501      	bpl.n	8002bf4 <_printf_i+0xec>
 8002bf0:	681d      	ldr	r5, [r3, #0]
 8002bf2:	e002      	b.n	8002bfa <_printf_i+0xf2>
 8002bf4:	0669      	lsls	r1, r5, #25
 8002bf6:	d5fb      	bpl.n	8002bf0 <_printf_i+0xe8>
 8002bf8:	881d      	ldrh	r5, [r3, #0]
 8002bfa:	4854      	ldr	r0, [pc, #336]	; (8002d4c <_printf_i+0x244>)
 8002bfc:	2f6f      	cmp	r7, #111	; 0x6f
 8002bfe:	bf0c      	ite	eq
 8002c00:	2308      	moveq	r3, #8
 8002c02:	230a      	movne	r3, #10
 8002c04:	2100      	movs	r1, #0
 8002c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c0a:	6866      	ldr	r6, [r4, #4]
 8002c0c:	60a6      	str	r6, [r4, #8]
 8002c0e:	2e00      	cmp	r6, #0
 8002c10:	bfa2      	ittt	ge
 8002c12:	6821      	ldrge	r1, [r4, #0]
 8002c14:	f021 0104 	bicge.w	r1, r1, #4
 8002c18:	6021      	strge	r1, [r4, #0]
 8002c1a:	b90d      	cbnz	r5, 8002c20 <_printf_i+0x118>
 8002c1c:	2e00      	cmp	r6, #0
 8002c1e:	d04d      	beq.n	8002cbc <_printf_i+0x1b4>
 8002c20:	4616      	mov	r6, r2
 8002c22:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c26:	fb03 5711 	mls	r7, r3, r1, r5
 8002c2a:	5dc7      	ldrb	r7, [r0, r7]
 8002c2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c30:	462f      	mov	r7, r5
 8002c32:	42bb      	cmp	r3, r7
 8002c34:	460d      	mov	r5, r1
 8002c36:	d9f4      	bls.n	8002c22 <_printf_i+0x11a>
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d10b      	bne.n	8002c54 <_printf_i+0x14c>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	07df      	lsls	r7, r3, #31
 8002c40:	d508      	bpl.n	8002c54 <_printf_i+0x14c>
 8002c42:	6923      	ldr	r3, [r4, #16]
 8002c44:	6861      	ldr	r1, [r4, #4]
 8002c46:	4299      	cmp	r1, r3
 8002c48:	bfde      	ittt	le
 8002c4a:	2330      	movle	r3, #48	; 0x30
 8002c4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c54:	1b92      	subs	r2, r2, r6
 8002c56:	6122      	str	r2, [r4, #16]
 8002c58:	f8cd a000 	str.w	sl, [sp]
 8002c5c:	464b      	mov	r3, r9
 8002c5e:	aa03      	add	r2, sp, #12
 8002c60:	4621      	mov	r1, r4
 8002c62:	4640      	mov	r0, r8
 8002c64:	f7ff fee2 	bl	8002a2c <_printf_common>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	d14c      	bne.n	8002d06 <_printf_i+0x1fe>
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	b004      	add	sp, #16
 8002c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c76:	4835      	ldr	r0, [pc, #212]	; (8002d4c <_printf_i+0x244>)
 8002c78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	680e      	ldr	r6, [r1, #0]
 8002c80:	061f      	lsls	r7, r3, #24
 8002c82:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c86:	600e      	str	r6, [r1, #0]
 8002c88:	d514      	bpl.n	8002cb4 <_printf_i+0x1ac>
 8002c8a:	07d9      	lsls	r1, r3, #31
 8002c8c:	bf44      	itt	mi
 8002c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8002c92:	6023      	strmi	r3, [r4, #0]
 8002c94:	b91d      	cbnz	r5, 8002c9e <_printf_i+0x196>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	f023 0320 	bic.w	r3, r3, #32
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	e7b0      	b.n	8002c04 <_printf_i+0xfc>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	f043 0320 	orr.w	r3, r3, #32
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	2378      	movs	r3, #120	; 0x78
 8002cac:	4828      	ldr	r0, [pc, #160]	; (8002d50 <_printf_i+0x248>)
 8002cae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cb2:	e7e3      	b.n	8002c7c <_printf_i+0x174>
 8002cb4:	065e      	lsls	r6, r3, #25
 8002cb6:	bf48      	it	mi
 8002cb8:	b2ad      	uxthmi	r5, r5
 8002cba:	e7e6      	b.n	8002c8a <_printf_i+0x182>
 8002cbc:	4616      	mov	r6, r2
 8002cbe:	e7bb      	b.n	8002c38 <_printf_i+0x130>
 8002cc0:	680b      	ldr	r3, [r1, #0]
 8002cc2:	6826      	ldr	r6, [r4, #0]
 8002cc4:	6960      	ldr	r0, [r4, #20]
 8002cc6:	1d1d      	adds	r5, r3, #4
 8002cc8:	600d      	str	r5, [r1, #0]
 8002cca:	0635      	lsls	r5, r6, #24
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	d501      	bpl.n	8002cd4 <_printf_i+0x1cc>
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	e002      	b.n	8002cda <_printf_i+0x1d2>
 8002cd4:	0671      	lsls	r1, r6, #25
 8002cd6:	d5fb      	bpl.n	8002cd0 <_printf_i+0x1c8>
 8002cd8:	8018      	strh	r0, [r3, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6123      	str	r3, [r4, #16]
 8002cde:	4616      	mov	r6, r2
 8002ce0:	e7ba      	b.n	8002c58 <_printf_i+0x150>
 8002ce2:	680b      	ldr	r3, [r1, #0]
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	600a      	str	r2, [r1, #0]
 8002ce8:	681e      	ldr	r6, [r3, #0]
 8002cea:	6862      	ldr	r2, [r4, #4]
 8002cec:	2100      	movs	r1, #0
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f7fd fa6e 	bl	80001d0 <memchr>
 8002cf4:	b108      	cbz	r0, 8002cfa <_printf_i+0x1f2>
 8002cf6:	1b80      	subs	r0, r0, r6
 8002cf8:	6060      	str	r0, [r4, #4]
 8002cfa:	6863      	ldr	r3, [r4, #4]
 8002cfc:	6123      	str	r3, [r4, #16]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d04:	e7a8      	b.n	8002c58 <_printf_i+0x150>
 8002d06:	6923      	ldr	r3, [r4, #16]
 8002d08:	4632      	mov	r2, r6
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	47d0      	blx	sl
 8002d10:	3001      	adds	r0, #1
 8002d12:	d0ab      	beq.n	8002c6c <_printf_i+0x164>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	079b      	lsls	r3, r3, #30
 8002d18:	d413      	bmi.n	8002d42 <_printf_i+0x23a>
 8002d1a:	68e0      	ldr	r0, [r4, #12]
 8002d1c:	9b03      	ldr	r3, [sp, #12]
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	bfb8      	it	lt
 8002d22:	4618      	movlt	r0, r3
 8002d24:	e7a4      	b.n	8002c70 <_printf_i+0x168>
 8002d26:	2301      	movs	r3, #1
 8002d28:	4632      	mov	r2, r6
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	4640      	mov	r0, r8
 8002d2e:	47d0      	blx	sl
 8002d30:	3001      	adds	r0, #1
 8002d32:	d09b      	beq.n	8002c6c <_printf_i+0x164>
 8002d34:	3501      	adds	r5, #1
 8002d36:	68e3      	ldr	r3, [r4, #12]
 8002d38:	9903      	ldr	r1, [sp, #12]
 8002d3a:	1a5b      	subs	r3, r3, r1
 8002d3c:	42ab      	cmp	r3, r5
 8002d3e:	dcf2      	bgt.n	8002d26 <_printf_i+0x21e>
 8002d40:	e7eb      	b.n	8002d1a <_printf_i+0x212>
 8002d42:	2500      	movs	r5, #0
 8002d44:	f104 0619 	add.w	r6, r4, #25
 8002d48:	e7f5      	b.n	8002d36 <_printf_i+0x22e>
 8002d4a:	bf00      	nop
 8002d4c:	08002fc5 	.word	0x08002fc5
 8002d50:	08002fd6 	.word	0x08002fd6

08002d54 <_sbrk_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4d06      	ldr	r5, [pc, #24]	; (8002d70 <_sbrk_r+0x1c>)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	602b      	str	r3, [r5, #0]
 8002d60:	f7fe f8c2 	bl	8000ee8 <_sbrk>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_sbrk_r+0x1a>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_sbrk_r+0x1a>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	2000009c 	.word	0x2000009c

08002d74 <__sread>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	460c      	mov	r4, r1
 8002d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7c:	f000 f8a0 	bl	8002ec0 <_read_r>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	bfab      	itete	ge
 8002d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d86:	89a3      	ldrhlt	r3, [r4, #12]
 8002d88:	181b      	addge	r3, r3, r0
 8002d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d8e:	bfac      	ite	ge
 8002d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d92:	81a3      	strhlt	r3, [r4, #12]
 8002d94:	bd10      	pop	{r4, pc}

08002d96 <__swrite>:
 8002d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9a:	461f      	mov	r7, r3
 8002d9c:	898b      	ldrh	r3, [r1, #12]
 8002d9e:	05db      	lsls	r3, r3, #23
 8002da0:	4605      	mov	r5, r0
 8002da2:	460c      	mov	r4, r1
 8002da4:	4616      	mov	r6, r2
 8002da6:	d505      	bpl.n	8002db4 <__swrite+0x1e>
 8002da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dac:	2302      	movs	r3, #2
 8002dae:	2200      	movs	r2, #0
 8002db0:	f000 f868 	bl	8002e84 <_lseek_r>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	463b      	mov	r3, r7
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	f000 b817 	b.w	8002dfc <_write_r>

08002dce <__sseek>:
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd6:	f000 f855 	bl	8002e84 <_lseek_r>
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	bf15      	itete	ne
 8002de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dea:	81a3      	strheq	r3, [r4, #12]
 8002dec:	bf18      	it	ne
 8002dee:	81a3      	strhne	r3, [r4, #12]
 8002df0:	bd10      	pop	{r4, pc}

08002df2 <__sclose>:
 8002df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df6:	f000 b813 	b.w	8002e20 <_close_r>
	...

08002dfc <_write_r>:
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4d07      	ldr	r5, [pc, #28]	; (8002e1c <_write_r+0x20>)
 8002e00:	4604      	mov	r4, r0
 8002e02:	4608      	mov	r0, r1
 8002e04:	4611      	mov	r1, r2
 8002e06:	2200      	movs	r2, #0
 8002e08:	602a      	str	r2, [r5, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f7fe f81c 	bl	8000e48 <_write>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_write_r+0x1e>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_write_r+0x1e>
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	2000009c 	.word	0x2000009c

08002e20 <_close_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	4d06      	ldr	r5, [pc, #24]	; (8002e3c <_close_r+0x1c>)
 8002e24:	2300      	movs	r3, #0
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	f7fe f828 	bl	8000e80 <_close>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_close_r+0x1a>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_close_r+0x1a>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	2000009c 	.word	0x2000009c

08002e40 <_fstat_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4d07      	ldr	r5, [pc, #28]	; (8002e60 <_fstat_r+0x20>)
 8002e44:	2300      	movs	r3, #0
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	602b      	str	r3, [r5, #0]
 8002e4e:	f7fe f823 	bl	8000e98 <_fstat>
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	d102      	bne.n	8002e5c <_fstat_r+0x1c>
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	b103      	cbz	r3, 8002e5c <_fstat_r+0x1c>
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000009c 	.word	0x2000009c

08002e64 <_isatty_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4d06      	ldr	r5, [pc, #24]	; (8002e80 <_isatty_r+0x1c>)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	f7fe f822 	bl	8000eb8 <_isatty>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_isatty_r+0x1a>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_isatty_r+0x1a>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	2000009c 	.word	0x2000009c

08002e84 <_lseek_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4d07      	ldr	r5, [pc, #28]	; (8002ea4 <_lseek_r+0x20>)
 8002e88:	4604      	mov	r4, r0
 8002e8a:	4608      	mov	r0, r1
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	2200      	movs	r2, #0
 8002e90:	602a      	str	r2, [r5, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7fe f81b 	bl	8000ece <_lseek>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d102      	bne.n	8002ea2 <_lseek_r+0x1e>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	b103      	cbz	r3, 8002ea2 <_lseek_r+0x1e>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	2000009c 	.word	0x2000009c

08002ea8 <__malloc_lock>:
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <__malloc_lock+0x8>)
 8002eaa:	f7ff bb55 	b.w	8002558 <__retarget_lock_acquire_recursive>
 8002eae:	bf00      	nop
 8002eb0:	20000094 	.word	0x20000094

08002eb4 <__malloc_unlock>:
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <__malloc_unlock+0x8>)
 8002eb6:	f7ff bb50 	b.w	800255a <__retarget_lock_release_recursive>
 8002eba:	bf00      	nop
 8002ebc:	20000094 	.word	0x20000094

08002ec0 <_read_r>:
 8002ec0:	b538      	push	{r3, r4, r5, lr}
 8002ec2:	4d07      	ldr	r5, [pc, #28]	; (8002ee0 <_read_r+0x20>)
 8002ec4:	4604      	mov	r4, r0
 8002ec6:	4608      	mov	r0, r1
 8002ec8:	4611      	mov	r1, r2
 8002eca:	2200      	movs	r2, #0
 8002ecc:	602a      	str	r2, [r5, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7fd ff9d 	bl	8000e0e <_read>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d102      	bne.n	8002ede <_read_r+0x1e>
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	b103      	cbz	r3, 8002ede <_read_r+0x1e>
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	2000009c 	.word	0x2000009c

08002ee4 <_init>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr

08002ef0 <_fini>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr
