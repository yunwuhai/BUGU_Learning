#include "HAL_NRF24L01.h"
 
const uint8_t TX_ADDRESS[NRF24L01_TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
const uint8_t RX_ADDRESS[NRF24L01_RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //接收地址
 
/*************************************************************************************
 * @description: 修改连接NRF24L01的SPI的工作模式，不过如果使用CubeMX配置过的程序可以不修改此部分
 * @param {*}
 * @return {*}
 *************************************************************************************/
void NRF24L01_SPI_Init(void)
{
    __HAL_SPI_DISABLE(&NRF24L01_SPI_PORT);               //先关闭SPI1
    NRF24L01_SPI_PORT.Init.CLKPolarity=SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
    NRF24L01_SPI_PORT.Init.CLKPhase=SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
    HAL_SPI_Init(&NRF24L01_SPI_PORT);
    __HAL_SPI_ENABLE(&NRF24L01_SPI_PORT);                //使能SPI1
}

/*************************************************************************************
 * @description: 初始化SPI的接口，如果在CubeMX中设置的时候已经设置了可以不使用此函数，注意IRQ需要上拉
 * @param {*}
 * @return {*}
 *************************************************************************************/
void NRF24L01_Init(void)
{
    //NRF24L01_SPI_Init();                		//针对NRF的特点修改SPI的设置
    NRF24L01_CE_Clr(); 			            	//使能24L01
    NRF24L01_CS_Set();			    			//SPI片选取消	 		 	 
}

/*************************************************************************************
 * @description: 通过SPI发送一个字节并接受一个字节的数据
 * @param {SPI_HandleTypeDef *} hspi SPI接口
 * @param {uint8_t} byte 发送的数据
 * @return {*} 接收到的数据
 *************************************************************************************/
uint8_t NRF24L01_SPI_ReadWriteByte(SPI_HandleTypeDef* hspi, uint8_t byte)
{
    uint8_t d_read, d_send=byte;
    HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF);
    return d_read; 
}

/*************************************************************************************
 * @description: 检测NRF24L01是否存在
 * @param {*}
 * @return {*} 0，成功;1，失败
 *************************************************************************************/
uint8_t NRF24L01_Check(void)
{
	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
	uint8_t i;
	NRF24L01_Write_Buf(NRF24L01_WRITE_REG+NRF24L01_TX_ADDR,buf,5);//写入5个字节的地址.	
	NRF24L01_Read_Buf(NRF24L01_TX_ADDR,buf,5); //读出写入的地址  
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;	 							   
	if(i!=5)return 1;//检测24L01错误	
	return 0;		 	//检测到24L01
}	

/*************************************************************************************
 * @description: 写寄存器
 * @param {uint8_t} reg 寄存器地址
 * @param {uint8_t} value 值
 * @return {*}
 *************************************************************************************/
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
    uint8_t status;	
    NRF24L01_CS_Clr();                 //使能SPI传输
    status =NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,reg);   //发送寄存器号 
    NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,value);         //写入寄存器的值
    NRF24L01_CS_Set();                //禁止SPI传输	   
    return(status);       			//返回状态值
}

/*************************************************************************************
 * @description: 读寄存器
 * @param {uint8_t} reg 寄存器地址
 * @return {*} 读取值
 *************************************************************************************/
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
	uint8_t reg_val;	    
 	NRF24L01_CS_Clr();          //使能SPI传输		
    NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,reg);   //发送寄存器号
    reg_val=NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,0XFF);//读取寄存器内容
    NRF24L01_CS_Set();          //禁止SPI传输		    
    return(reg_val);           //返回状态值
}		

/*************************************************************************************
 * @description: 在指定位置读出指定长度的数据
 * @param {uint8_t} reg 指定地址
 * @param {uint8_t} *pBuf 数据读出存储数组
 * @param {uint8_t} len 读取长度
 * @return {*} 读取的状态值
 *************************************************************************************/
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
    uint8_t status,uint8_t_ctr;	   

    NRF24L01_CS_Clr();           //使能SPI传输
    status=NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//发送寄存器值(位置),并读取状态值   	   
    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
    {
    pBuf[uint8_t_ctr]=NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,0XFF);//读出数据
    }
    NRF24L01_CS_Set();       //关闭SPI传输
    return status;        //返回读到的状态值
}

/*************************************************************************************
 * @description: 在指定位置写指定长度的数据
 * @param {uint8_t} reg 指定地址
 * @param {uint8_t} *pBuf 要写的数据数组
 * @param {uint8_t} len 写的数据长度
 * @return {*} 写的状态值
 *************************************************************************************/
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
    uint8_t status,uint8_t_ctr;	    
    NRF24L01_CS_Clr();          //使能SPI传输
    status = NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//发送寄存器值(位置),并读取状态值
    for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
    {
    NRF24L01_SPI_ReadWriteByte(&NRF24L01_SPI_PORT,*pBuf++); //写入数据	 
    }
    NRF24L01_CS_Set();       //关闭SPI传输
    return status;          //返回读到的状态值
}		

/*************************************************************************************
 * @description: 启动NRF24L01发送一次数据
 * @param {uint8_t} *txbuf 待发送的数组首地址
 * @param {uint8_t} len 发送的数据长度
 * @return {*}发送完成状况
 *************************************************************************************/
uint8_t NRF24L01_TxPacket(uint8_t *txbuf, uint8_t len)
{
    uint8_t sta;

    while (len > 0)
    {
        NRF24L01_CE_Clr();
        uint8_t tempLen = len > NRF24L01_TX_PLOAD_WIDTH ? NRF24L01_TX_PLOAD_WIDTH : len;
        NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, len);
        txbuf += tempLen;
        len -= tempLen;
        NRF24L01_CE_Set();//启动发送
        while (NRF24L01_IRQ_Read() != 0);
    }
    sta=NRF24L01_Read_Reg(NRF24L01_STATUS);  //读取状态寄存器的值	   
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_STATUS,sta); //清除TX_DS或MAX_RT中断标志
    if(sta&NRF24L01_MAX_TX)//达到最大重发次数
    {
        NRF24L01_Write_Reg(NRF24L01_FLUSH_TX,0xff);//清除TX FIFO寄存器 
        return NRF24L01_MAX_TX; 
    }
    if(sta&NRF24L01_TX_OK)//发送完成
    {
        return NRF24L01_TX_OK;
    }
    return 0xff;//其他原因发送失败
}

/*************************************************************************************
 * @description: 启动NRF24L01接收一次数据
 * @param {uint8_t} *rxbuf 接收数据的数组首地址
 * @return {*} 接收完成状况
 *************************************************************************************/
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
	uint8_t sta;
	sta=NRF24L01_Read_Reg(NRF24L01_STATUS);  //读取状态寄存器的值    	 
	NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_STATUS,sta); //清除TX_DS或MAX_RT中断标志
	if(sta&NRF24L01_RX_OK)//接收到数据
	{
		NRF24L01_Read_Buf(NRF24L01_RD_RX_PLOAD,rxbuf,NRF24L01_RX_PLOAD_WIDTH);//读取数据
		NRF24L01_Write_Reg(NRF24L01_FLUSH_RX,0xff);//清除RX FIFO寄存器 
		return 0; 
	}	   
	return 1;//没收到任何数据
}			

/*************************************************************************************
 * @description: 初始化NRF24L01到接收模式
 * @param {*}
 * @return {*}
 *************************************************************************************/
void NRF24L01_RX_Mode(void)
{
    NRF24L01_CE_Clr();	  
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC 
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_EN_AA,0x01);    //使能通道0的自动应答    
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_EN_RXADDR,0x01);//使能通道0的接收地址  	 
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_CH,40);	     //设置RF通信频率		  
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   

    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_RX_PW_P0,NRF24L01_RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 	    

    NRF24L01_Write_Buf(NRF24L01_WRITE_REG+NRF24L01_RX_ADDR_P0,(uint8_t*)RX_ADDRESS,NRF24L01_RX_ADR_WIDTH);//写RX节点地址

    NRF24L01_CE_Set(); //CE为高,进入接收模式 
    HAL_Delay(1);
}	

/*************************************************************************************
 * @description: 初始化NRF24L01到发送模式
 * @param {*}
 * @return {*}
 *************************************************************************************/
void NRF24L01_TX_Mode(void)
{														 
    NRF24L01_CE_Clr();	    
    NRF24L01_Write_Buf(NRF24L01_WRITE_REG+NRF24L01_TX_ADDR,(uint8_t*)TX_ADDRESS,NRF24L01_TX_ADR_WIDTH);//写TX节点地址 
    NRF24L01_Write_Buf(NRF24L01_WRITE_REG+NRF24L01_RX_ADDR_P0,(uint8_t*)RX_ADDRESS,NRF24L01_RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK	  

    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_EN_AA,0x01);     //使能通道0的自动应答    
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_EN_RXADDR,0x01); //使能通道0的接收地址  
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_CH,40);       //设置RF通道为40
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
    NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
    NRF24L01_CE_Set();//CE为高,10us后启动发送
    HAL_Delay(1);
}

/*************************************************************************************
 * @description: 设置NRF24L01到低功耗模式
 * @param {*}
 * @return {*}
 *************************************************************************************/
void NRF_LowPower_Mode(void)
{
	NRF24L01_CE_Clr();	 
	NRF24L01_Write_Reg(NRF24L01_WRITE_REG+NRF24L01_CONFIG, 0x00);		//配置工作模式:掉电模式
}