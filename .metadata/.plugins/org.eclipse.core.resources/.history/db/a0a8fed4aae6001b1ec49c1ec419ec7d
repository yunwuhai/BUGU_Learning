#include "mp3player.h"
#include "HAL_VS10xx.h"
#include "fatfs.h"
#include "main.h"
#include "stdlib.h"
#include "flac.h"
#include "string.h"

#define delay_ms(x) HAL_Delay(x)

uint16_t f_kbps=0;//歌曲文件位率
/*************************************************************************************
 * @description: 显示播放时间,比特率 信息 
 * @param {uint32_t} lenth 歌曲总长度
 * @return {*}
 *************************************************************************************/
void mp3_msg_show(uint32_t lenth)
{	
	static uint16_t playtime=0;//播放时间标记	     
 	uint16_t time=0;// 时间变量
	uint16_t temp=0;	  
	if(f_kbps==0xffff)//未更新过
	{
		playtime=0;
		f_kbps=VS_Get_HeadInfo();	   //获得比特率
	}	 	 
	time=VS_Get_DecodeTime(); //得到解码时间
	if(playtime==0)playtime=time;
	else if((time!=playtime)&&(time!=0))//1s时间到,更新显示数据
	{
		playtime=time;//更新时间 	 				    
		temp=VS_Get_HeadInfo(); //获得比特率	   				 
		if(temp!=f_kbps)
		{
			f_kbps=temp;//更新KBPS	  				     
		}			 
		//显示播放时间			 
		printf("播放时间 %d:%d\r\n",time/60,time%60);    	 
		//显示总时间
		if(f_kbps)time=(lenth/f_kbps)/125;//得到秒钟数   (文件长度(字节)/(1000/8)/比特率=持续秒钟数    	  
		else time=0;//非法位率	  
 		printf("总时间 %d:%d\r\n",time/60,time%60);	  		    
		//显示位率
		printf("位率:%dKbps\r\n",f_kbps);
	}   		 
}	

/*************************************************************************************
 * @description:  得到path路径下,目标文件的总个数
 * @param {uint8_t} *path 路径
 * @return {*} 总有效文件数
 *************************************************************************************/
uint16_t mp3_get_tnum(uint8_t *path)
{	  
	uint8_t res;
	uint16_t rval=0;
 	DIR tdir;	 		//临时目录
	FILINFO* tfileinfo;	//临时文件信息		
			 			   			     
    res=f_opendir(&tdir,(const TCHAR*)path); //打开目录
	printf("res=%d\r\n",res);
  	tfileinfo=(FILINFO*)malloc(sizeof(FILINFO));//申请内存
	printf("tfileinfo.fname=%s\r\n",tfileinfo.fname);
	if(res==FR_OK&&tfileinfo)
	{
		while(1)//查询总的有效文件数
		{
	        res=f_readdir(&tdir,tfileinfo);       		//读取目录下的一个文件
	        if(res!=FR_OK||tfileinfo->fname[0]==0)break;	//错误了/到末尾了,退出		  
			res=f_typetell((uint8_t*)tfileinfo->fname);	
			if((res&0XF0)==0X40)//取高四位,看看是不是音乐文件	
			{
				rval++;//有效文件数增加1
			}	    
		}  
	} 
	free(tfileinfo);//释放内存
	return rval;
}


/*************************************************************************************
 * @description: 播放音乐
 * @param {*}
 * @return {*}
 *************************************************************************************/
void mp3_play(void)
{
	uint8_t res;
 	DIR mp3dir;	 		//目录
	FILINFO* mp3fileinfo;//文件信息
//	uint8_t *fn;   			//长文件名
	uint8_t *pname;			//带路径的文件名
	uint16_t totmp3num; 		//音乐文件总数
	uint16_t curindex;		//图片当前索引
	uint8_t key;				//键值		  
 	uint16_t temp;
	uint16_t *mp3indextbl;	//音乐索引表 
	
 	while(f_opendir(&mp3dir,"0:/MUSIC"))//打开图片文件夹
 	{	    
		printf("MUSIC文件夹错误!\r\n");  
		delay_ms(500);				  
	}

	totmp3num=mp3_get_tnum("0:/MUSIC"); //得到总有效文件数
  	while(totmp3num==NULL)//音乐文件总数为0		
 	{	    
		printf("没有音乐文件!\r\n");	     
		delay_ms(500);				  
	}		

  	mp3fileinfo=(FILINFO*)malloc(sizeof(FILINFO));	//申请内存
 	pname=malloc(_MAX_LFN*2+1);				//为带路径的文件名分配内存
 	mp3indextbl=malloc(2*totmp3num);			//申请2*totmp3num个字节的内存,用于存放音乐文件索引
 	while(!mp3fileinfo||!pname||!mp3indextbl)//内存分配出错
 	{	    
		printf("内存分配失败!\r\n");     
		delay_ms(500);				  
	}  	

	VS_HD_Reset();
	VS_Soft_Reset();
	vsset.mvol=220;						//默认设置音量为220.
	printf("当前音量VOL：%d\r\n",(vsset.mvol-100)/5);//音量限制在:100~250,显示的时候,按照公式(vol-100)/5,显示,也就是0~30 	  
	//记录索引
    res=f_opendir(&mp3dir,"0:/MUSIC"); //打开目录
	if(res==FR_OK)
	{
		curindex=0;//当前索引为0
		while(1)//全部查询一遍
		{
			temp=mp3dir.dptr;								//记录当前index
	        res=f_readdir(&mp3dir,mp3fileinfo);       		//读取目录下的一个文件
	        if(res!=FR_OK||mp3fileinfo->fname[0]==0)break;	//错误了/到末尾了,退出		  		 
			res=f_typetell((uint8_t*)mp3fileinfo->fname);	
			if((res&0XF0)==0X40)//取高四位,看看是不是音乐文件	
			{
				mp3indextbl[curindex]=temp;//记录索引
				curindex++;
			}	    
		} 
	}   
   	curindex=0;											//从0开始显示
   	res=f_opendir(&mp3dir,(const TCHAR*)"0:/MUSIC"); 	//打开目录
	while(res==FR_OK)//打开成功
	{	
		dir_sdi(&mp3dir,mp3indextbl[curindex]);			//改变当前目录索引	   
        res=f_readdir(&mp3dir,mp3fileinfo);       		//读取目录下的一个文件
        if(res!=FR_OK||mp3fileinfo->fname[0]==0)break;	//错误了/到末尾了,退出		 
		strcpy((char*)pname,"0:/MUSIC/");				//复制路径(目录)
		strcat((char*)pname,(const char*)mp3fileinfo->fname);  			//将文件名接在后面
 		printf("当前播放音乐文件：%s   %d/%d\r\n",mp3fileinfo->fname,curindex+1,totmp3num);
		key=mp3_play_song(pname); 				 		//播放这个MP3    
		if(key==2)		//上一曲
		{
			if(curindex)curindex--;
			else curindex=totmp3num-1;
 		}else if(key<=1)//下一曲
		{
			curindex++;		   	
			if(curindex>=totmp3num)curindex=0;//到末尾的时候,自动从头开始
 		}else break;	//产生了错误 	 
	} 											  
	free(mp3fileinfo);			//释放内存			    
	free(pname);				//释放内存			    
	free(mp3indextbl);			//释放内存	 
}


//播放一曲指定的歌曲				     	   									    	 
//返回值:0,正常播放完成
//		 1,下一曲
//       2,上一曲
//       0XFF,出现错误了
uint8_t mp3_play_song(uint8_t *pname)
{	 
 	FIL* fmp3;
    uint16_t br;
	uint8_t res,rval;	  
	uint8_t *databuf;	   		   
	uint16_t i=0; 
	uint8_t key;  	    
			   
	rval=0;	    
	fmp3=(FIL*)malloc(sizeof(FIL));//申请内存
	databuf=(uint8_t*)malloc(4096);		//开辟4096字节的内存区域
	if(databuf==NULL||fmp3==NULL)rval=0XFF ;//内存申请失败.
	if(rval==0)
	{	  
	  	VS_Restart_Play();  					//重启播放 
		VS_Set_All();        					//设置音量等信息 			 
		VS_Reset_DecodeTime();					//复位解码时间 	  
		res=f_typetell(pname);	 	 			//得到文件后缀	 			  	 						 
		if(res==0x4c)//如果是flac,加载patch
		{	
			VS_Load_Patch((uint16_t*)vs1053b_patch,VS1053B_PATCHLEN);
		}  				 		   		 						  
		res=f_open(fmp3,(const TCHAR*)pname,FA_READ);//打开文件	 
 		if(res==0)//打开成功.
		{ 
			VS_SPI_SpeedHigh();	//高速						   
			while(rval==0)
			{
				res=f_read(fmp3,databuf,4096,(UINT*)&br);//读出4096个字节  
				i=0;
				do//主播放循环
			    {  	
					if(VS_Send_MusicData(databuf+i)==0)//给VS10XX发送音频数据
					{
						i+=32;
					}else   
					{
						HAL_UART_Receive(&huart2, &key, 1, 0xffff);
						switch(key)
						{
							case 0x01:
								rval=1;		//下一曲
								break;
							case 0x02:
								rval=2;		//上一曲
								break;
							case 0x03:	//音量增加
								if(vsset.mvol<250)
								{
									vsset.mvol+=5;
						 			VS_Set_Vol(vsset.mvol);	
								}else vsset.mvol=250;
								printf("当前音量VOL：%d\r\n",(vsset.mvol-100)/5);
								break;							
						}
						mp3_msg_show(fmp3->obj.objsize); //显示信息	    
					}	    	    
				}while(i<4096);//循环发送4096个字节 
				if(br!=4096||res!=0)
				{
					rval=0;
					break;//读完了.		  
				} 							 
			}
			f_close(fmp3);
		}else rval=0XFF;//出现错误	   	  
	}						     	 
	free(databuf);	  	 		  	    
	free(fmp3);
	return rval;	  	 		  	    
}

